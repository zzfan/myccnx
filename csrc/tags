!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	lib/ccn_schedule.c	/^static int A(SARGS) { if (flags & CCN_SCHEDULE_CANCEL) return(0);$/;"	f	file:
ADJ_ACTIVE	ccnd/ccnd_internal_client.c	121;"	d	file:
ADJ_CRQ_RECV	ccnd/ccnd_internal_client.c	115;"	d	file:
ADJ_CRQ_SENT	ccnd/ccnd_internal_client.c	114;"	d	file:
ADJ_DAT_RECV	ccnd/ccnd_internal_client.c	117;"	d	file:
ADJ_DAT_SENT	ccnd/ccnd_internal_client.c	116;"	d	file:
ADJ_MICROS	ccnd/ccnd_internal_client.c	186;"	d	file:
ADJ_OFR_RECV	ccnd/ccnd_internal_client.c	113;"	d	file:
ADJ_OFR_SENT	ccnd/ccnd_internal_client.c	112;"	d	file:
ADJ_PINGING	ccnd/ccnd_internal_client.c	119;"	d	file:
ADJ_REFRESH_SEC	ccnd/ccnd_internal_client.c	185;"	d	file:
ADJ_RETRYING	ccnd/ccnd_internal_client.c	120;"	d	file:
ADJ_SOL_RECV	ccnd/ccnd_internal_client.c	111;"	d	file:
ADJ_SOL_SENT	ccnd/ccnd_internal_client.c	110;"	d	file:
ADJ_TIMEDWAIT	ccnd/ccnd_internal_client.c	118;"	d	file:
AESKeystore_info	include/ccn/aeskeystoreasn1.h	/^} AESKeystore_info;$/;"	t	typeref:struct:AESKeystore_info_st
AESKeystore_info_st	include/ccn/aeskeystoreasn1.h	/^typedef struct AESKeystore_info_st {$/;"	s
AES_KEYSTORE_VERSION	lib/ccn_aes_keystore.c	41;"	d	file:
AES_MAX_DIGEST_SIZE	lib/ccn_aes_keystore.c	43;"	d	file:
AI_ADDRCONFIG	lib/ccn_setup_sockaddr_un.c	34;"	d	file:
AI_ADDRCONFIG	libexec/ccndc.c	42;"	d	file:
AI_ADDRCONFIG	libexec/udplink.c	43;"	d	file:
ALLOW_STALE	lib/ccn_traverse.c	51;"	d	file:
ALLTESTS	exttests/dir.mk	/^ALLTESTS = \\$/;"	m
ALLTESTS	tests/dir.mk	/^ALLTESTS = \\$/;"	m
ARRAY_N	lib/ccn_dtag_table.c	22;"	d	file:
AcceptNode	sync/UpdateSketch.c	/^AcceptNode(struct SyncUpdateData *ud) {$/;"	f
AddSegRequest	lib/ccn_fetch.c	/^AddSegRequest(struct ccn_fetch_stream *fs, seg_t seg) {$/;"	f	file:
AddUpdateName	sync/SyncActions.c	/^AddUpdateName(struct SyncUpdateData *ud, struct ccn_charbuf *name, int isNew) {$/;"	f	file:
AdvanceName	sync/UpdateSketch.c	/^AdvanceName(struct SyncUpdateData *ud) {$/;"	f
B	lib/ccn_schedule.c	/^static int B(SARGS) { printf("B"); return 0; }$/;"	f	file:
BIND_8_COMPAT	libexec/ccndc-srv.c	30;"	d	file:
BROKEN_PROGRAMS	ccnd/dir.mk	/^BROKEN_PROGRAMS = $/;"	m
BROKEN_PROGRAMS	ccnr/dir.mk	/^BROKEN_PROGRAMS = $/;"	m
BROKEN_PROGRAMS	cmd/dir.mk	/^BROKEN_PROGRAMS =$/;"	m
BROKEN_PROGRAMS	lib/dir.mk	/^BROKEN_PROGRAMS =$/;"	m
BROKEN_PROGRAMS	sync/dir.mk	/^BROKEN_PROGRAMS =$/;"	m
BackgroundPID	util/ccntestloop.sh	/^BackgroundPID () {$/;"	f
Base64	cmd/ccn_ccnbtoxml.c	/^static const char Base64[] =$/;"	v	file:
BestName	sync/UpdateSketch.c	/^BestName(struct SyncUpdateData *ud) {$/;"	f
BuildFailHook	util/ccntestloop.sh	/^BuildFailHook () {$/;"	f
BuildTree	sync/UpdateSketch.c	/^BuildTree(struct SyncUpdateData *ud,$/;"	f
C	lib/ccn_schedule.c	/^static int C(SARGS) { printf("C"); return 0; }$/;"	f	file:
CACHE_MARGIN	ccnd/ccnd.c	169;"	d	file:
CALLBACK_FINAL	cmd/ccn_ccnbtoxml.c	/^    CALLBACK_FINAL$/;"	e	enum:callback_kind	file:
CALLBACK_INITIAL	cmd/ccn_ccnbtoxml.c	/^    CALLBACK_INITIAL,$/;"	e	enum:callback_kind	file:
CALLBACK_OBJECTEND	cmd/ccn_ccnbtoxml.c	/^    CALLBACK_OBJECTEND,$/;"	e	enum:callback_kind	file:
CCNBX_OPT_UNADORNED	cmd/ccnbx.c	34;"	d	file:
CCNBX_OPT_VERBOSE	cmd/ccnbx.c	35;"	d	file:
CCNDC_H	libexec/ccndc.h	22;"	d
CCNDC_LOG_H	libexec/ccndc-log.h	22;"	d
CCNDC_SRV_H	libexec/ccndc-srv.h	22;"	d
CCNDID_LOCAL_URI	ccnd/ccnd_private.h	473;"	d
CCNDID_NEIGHBOR_URI	ccnd/ccnd_private.h	474;"	d
CCNDOBJ	ccnd/Android.mk	/^CCNDOBJ := ccnd.o ccnd_msg.o ccnd_internal_client.o ccnd_stats.o \\$/;"	m
CCNDSRC	ccnd/Android.mk	/^CCNDSRC := $(CCNDOBJ:.o=.c)$/;"	m
CCND_FACE_METER_N	ccnd/ccnd_private.h	/^    CCND_FACE_METER_N$/;"	e	enum:ccnd_face_meter_index
CCND_ID_TEMPL	ccnd/ccnd_internal_client.c	1240;"	d	file:
CCND_KEYSTORE_PASS	ccnd/ccnd_internal_client.c	1325;"	d	file:
CCND_NOTICE_NAME	ccnd/ccnd_internal_client.c	48;"	d	file:
CCND_OBJ	ccnd/dir.mk	/^CCND_OBJ = ccnd_main.o ccnd.o ccnd_msg.o ccnd_stats.o ccnd_internal_client.o$/;"	m
CCND_PFI_DCFACE	ccnd/ccnd_private.h	363;"	d
CCND_PFI_DNSTREAM	ccnd/ccnd_private.h	360;"	d
CCND_PFI_NONCESZ	ccnd/ccnd_private.h	355;"	d
CCND_PFI_PENDING	ccnd/ccnd_private.h	361;"	d
CCND_PFI_SENDUPST	ccnd/ccnd_private.h	358;"	d
CCND_PFI_SUPDATA	ccnd/ccnd_private.h	362;"	d
CCND_PFI_UPENDING	ccnd/ccnd_private.h	357;"	d
CCND_PFI_UPHUNGRY	ccnd/ccnd_private.h	359;"	d
CCND_PFI_UPSTREAM	ccnd/ccnd_private.h	356;"	d
CCND_PING	ccnd/ccnd_internal_client.c	56;"	d	file:
CCND_PRIVATE_DEFINED	ccnd/ccnd_private.h	25;"	d
CCND_TEST_100137	ccnd/ccnd_internal_client.c	51;"	d	file:
CCNFLATDATASZ	include/ccn/flatname.h	87;"	d
CCNFLATDELIMSZ	include/ccn/flatname.h	85;"	d
CCNFLATSKIP	include/ccn/flatname.h	89;"	d
CCNLIBDIR	ccnd/dir.mk	/^CCNLIBDIR = ..\/lib$/;"	m
CCNLIBDIR	ccnr/dir.mk	/^CCNLIBDIR = ..\/lib$/;"	m
CCNLIBDIR	cmd/dir.mk	/^CCNLIBDIR = ..\/lib$/;"	m
CCNLIBDIR	lib/dir.mk	/^CCNLIBDIR = ..\/lib$/;"	m
CCNLIBDIR	libexec/dir.mk	/^CCNLIBDIR = ..\/lib$/;"	m
CCNLIBDIR	sync/dir.mk	/^CCNLIBDIR = ..\/lib$/;"	m
CCNLIBOBJ	lib/android_obj.mk	/^CCNLIBOBJ := \\$/;"	m
CCNLIBOBJ	lib/dir.mk	/^	echo 'CCNLIBOBJ := \\' > templist$/;"	m
CCNLIBSRC	lib/Android.mk	/^CCNLIBSRC := $(CCNLIBOBJ:.o=.c)$/;"	m
CCNL_ERROR	include/ccn/loglevels.h	27;"	d
CCNL_FINE	include/ccn/loglevels.h	30;"	d
CCNL_FINER	include/ccn/loglevels.h	31;"	d
CCNL_FINEST	include/ccn/loglevels.h	32;"	d
CCNL_INFO	include/ccn/loglevels.h	29;"	d
CCNL_NONE	include/ccn/loglevels.h	25;"	d
CCNL_SEVERE	include/ccn/loglevels.h	26;"	d
CCNL_WARNING	include/ccn/loglevels.h	28;"	d
CCNRID_LOCAL_URI	ccnr/ccnr_private.h	468;"	d
CCNRID_NEIGHBOR_URI	ccnr/ccnr_private.h	469;"	d
CCNRID_POLICY_URI	ccnr/ccnr_private.h	470;"	d
CCNROBJ	ccnr/Android.mk	/^CCNROBJ := ccnr_dispatch.o ccnr_forwarding.o ccnr_init.o ccnr_internal_client.o ccnr_io.o ccnr_link.o ccnr_main.o ccnr_match.o ccnr_msg.o ccnr_net.o ccnr_proto.o ccnr_sendq.o ccnr_stats.o ccnr_store.o ccnr_sync.o ccnr_util.o ..\/sync\/IndexSorter.o ..\/sync\/SyncActions.o ..\/sync\/SyncBase.o ..\/sync\/SyncHashCache.o ..\/sync\/SyncNode.o ..\/sync\/SyncRoot.o ..\/sync\/SyncTreeWorker.o ..\/sync\/SyncUtil.o$/;"	m
CCNRSRC	ccnr/Android.mk	/^CCNRSRC := $(CCNROBJ:.o=.c)$/;"	m
CCNR_CONFIG_ERR	ccnr/ccnr_init.c	194;"	d	file:
CCNR_CONFIG_IGNORELINE	ccnr/ccnr_init.c	193;"	d	file:
CCNR_CONFIG_PASSMASK	ccnr/ccnr_init.c	192;"	d	file:
CCNR_DISPATCH_DEFINED	ccnr/ccnr_dispatch.h	24;"	d
CCNR_FACE_CCND	ccnr/ccnr_private.h	338;"	d
CCNR_FACE_CLOSING	ccnr/ccnr_private.h	334;"	d
CCNR_FACE_CONNECTING	ccnr/ccnr_private.h	332;"	d
CCNR_FACE_DGRAM	ccnr/ccnr_private.h	324;"	d
CCNR_FACE_GG	ccnr/ccnr_private.h	325;"	d
CCNR_FACE_INET	ccnr/ccnr_private.h	327;"	d
CCNR_FACE_INET6	ccnr/ccnr_private.h	328;"	d
CCNR_FACE_LOCAL	ccnr/ccnr_private.h	326;"	d
CCNR_FACE_LOOPBACK	ccnr/ccnr_private.h	333;"	d
CCNR_FACE_METER_N	ccnr/ccnr_private.h	/^    CCNR_FACE_METER_N$/;"	e	enum:ccnr_face_meter_index
CCNR_FACE_NORECV	ccnr/ccnr_private.h	336;"	d
CCNR_FACE_NOSEND	ccnr/ccnr_private.h	329;"	d
CCNR_FACE_PASSIVE	ccnr/ccnr_private.h	335;"	d
CCNR_FACE_PERMANENT	ccnr/ccnr_private.h	331;"	d
CCNR_FACE_REPODATA	ccnr/ccnr_private.h	337;"	d
CCNR_FACE_SOCKMASK	ccnr/ccnr_private.h	339;"	d
CCNR_FACE_UNDECIDED	ccnr/ccnr_private.h	330;"	d
CCNR_FORWARDING_DEFINED	ccnr/ccnr_forwarding.h	24;"	d
CCNR_ID_TEMPL	ccnr/ccnr_internal_client.c	248;"	d	file:
CCNR_INIT_DEFINED	ccnr/ccnr_init.h	24;"	d
CCNR_INTERNAL_DEFINED	ccnr/ccnr_internal_client.h	24;"	d
CCNR_IO_DEFINED	ccnr/ccnr_io.h	24;"	d
CCNR_KEYSTORE_PASS	ccnr/ccnr_internal_client.c	293;"	d	file:
CCNR_LINK_DEFINED	ccnr/ccnr_link.h	24;"	d
CCNR_MATCH_DEFINED	ccnr/ccnr_match.h	24;"	d
CCNR_MAX_ACCESSION	ccnr/ccnr_private.h	73;"	d
CCNR_MAX_ACCESSION	ccnr/ccnr_private.h	80;"	d
CCNR_MAX_ACCESSION	ccnr/ccnr_private.h	89;"	d
CCNR_MAX_ACCESSION	ccnr/ccnr_private.h	94;"	d
CCNR_MAX_ENUM	ccnr/ccnr_private.h	165;"	d
CCNR_MAX_RETRY	ccnr/ccnr_proto.c	56;"	d	file:
CCNR_MIN_ACCESSION	ccnr/ccnr_private.h	72;"	d
CCNR_MIN_ACCESSION	ccnr/ccnr_private.h	79;"	d
CCNR_MIN_ACCESSION	ccnr/ccnr_private.h	88;"	d
CCNR_MIN_ACCESSION	ccnr/ccnr_private.h	93;"	d
CCNR_MSG_DEFINED	ccnr/ccnr_msg.h	24;"	d
CCNR_NET_DEFINED	ccnr/ccnr_net.h	23;"	d
CCNR_NOT_COMPARABLE	ccnr/ccnr_private.h	97;"	d
CCNR_NULL_ACCESSION	ccnr/ccnr_private.h	71;"	d
CCNR_NULL_ACCESSION	ccnr/ccnr_private.h	78;"	d
CCNR_NULL_ACCESSION	ccnr/ccnr_private.h	87;"	d
CCNR_NULL_ACCESSION	ccnr/ccnr_private.h	92;"	d
CCNR_NULL_HWM	ccnr/ccnr_private.h	112;"	d
CCNR_OBJ	ccnr/dir.mk	/^CCNR_OBJ = ccnr_dispatch.o ccnr_forwarding.o ccnr_init.o ccnr_internal_client.o ccnr_io.o ccnr_link.o ccnr_main.o ccnr_match.o ccnr_msg.o ccnr_net.o ccnr_proto.o ccnr_sendq.o ccnr_stats.o ccnr_store.o ccnr_sync.o ccnr_util.o$/;"	m
CCNR_PIPELINE	ccnr/ccnr_proto.h	42;"	d
CCNR_PRIVATE_DEFINED	ccnr/ccnr_private.h	25;"	d
CCNR_PROTO_DEFINED	ccnr/ccnr_proto.h	24;"	d
CCNR_SENDQ_DEFINED	ccnr/ccnr_sendq.h	24;"	d
CCNR_STATS_DEFINED	ccnr/ccnr_stats.h	24;"	d
CCNR_STORE_DEFINED	ccnr/ccnr_store.h	24;"	d
CCNR_SYNC_DEFINED	ccnr/ccnr_sync.h	21;"	d
CCNR_UTIL_DEFINED	ccnr/ccnr_util.h	24;"	d
CCNSHOULDLOG	ccnr/ccnr_private.h	151;"	d
CCNST_FIRST	ccnd/ccnd.c	/^    CCNST_FIRST,    \/* newly created interest entry (pit entry) *\/$/;"	e	enum:ccn_strategy_op	file:
CCNST_NOP	ccnd/ccnd.c	/^    CCNST_NOP,      \/* no-operation *\/$/;"	e	enum:ccn_strategy_op	file:
CCNST_SATISFIED	ccnd/ccnd.c	/^    CCNST_SATISFIED, \/* matching content has arrived, pit entry will go away *\/$/;"	e	enum:ccn_strategy_op	file:
CCNST_TIMEOUT	ccnd/ccnd.c	/^    CCNST_TIMEOUT,  \/* all downstreams timed out, pit entry will go away *\/$/;"	e	enum:ccn_strategy_op	file:
CCNST_TIMER	ccnd/ccnd.c	/^    CCNST_TIMER,    \/* wakeup used by strategy *\/$/;"	e	enum:ccn_strategy_op	file:
CCNS_DEFINED	include/ccn/sync.h	25;"	d
CCN_AESKEYSTOREASN1_DEFINED	include/ccn/aeskeystoreasn1.h	21;"	d
CCN_AOK_CS	include/ccn/ccn.h	620;"	d
CCN_AOK_DEFAULT	include/ccn/ccn.h	622;"	d
CCN_AOK_EXPIRE	include/ccn/ccn.h	624;"	d
CCN_AOK_NEW	include/ccn/ccn.h	621;"	d
CCN_AOK_STALE	include/ccn/ccn.h	623;"	d
CCN_API_VERSION	include/ccn/ccn.h	40;"	d
CCN_ATTR	include/ccn/coding.h	/^    CCN_ATTR,       \/**< attribute - numval is attrnamelen-1, value follows *\/$/;"	e	enum:ccn_tt
CCN_BLOB	include/ccn/coding.h	/^    CCN_BLOB,       \/**< opaque binary data - numval is byte count *\/$/;"	e	enum:ccn_tt
CCN_BLOOM_DEFINED	include/ccn/bloom.h	23;"	d
CCN_BTREE_CONTENT_DEFINED	include/ccn/btree_content.h	23;"	d
CCN_BTREE_DEFINED	include/ccn/btree.h	22;"	d
CCN_BTREE_MAGIC	lib/ccn_btree.c	1219;"	d	file:
CCN_BTREE_MAX_NODE_BYTES	lib/ccn_btree.c	1365;"	d	file:
CCN_BTREE_VERSION	lib/ccn_btree.c	1220;"	d	file:
CCN_BT_ACTIVITY_READ_BUMP	include/ccn/btree.h	111;"	d
CCN_BT_ACTIVITY_REFERENCE_BUMP	include/ccn/btree.h	109;"	d
CCN_BT_ACTIVITY_UPDATE_BUMP	include/ccn/btree.h	113;"	d
CCN_BT_CLEAN_BATCH	ccnr/ccnr_store.c	1453;"	d	file:
CCN_BT_CLEAN_TICK_MICROS	ccnr/ccnr_store.c	1455;"	d	file:
CCN_BT_CONTENT_MAGIC	include/ccn/btree_content.h	45;"	d
CCN_BT_ENCRES	include/ccn/btree.h	245;"	d
CCN_BT_INTERNAL_MAGIC	include/ccn/btree.h	206;"	d
CCN_BT_MAX_KEY_SIZE	include/ccn/btree.h	196;"	d
CCN_BT_OPEN_NODES_IDLE	include/ccn/btree.h	116;"	d
CCN_BT_OPEN_NODES_LIMIT	include/ccn/btree.h	118;"	d
CCN_BT_SIZE_UNITS	include/ccn/btree.h	194;"	d
CCN_BT_SRCH_FOUND	include/ccn/btree.h	246;"	d
CCN_BT_SRCH_INDEX	include/ccn/btree.h	247;"	d
CCN_CCND_DEFINED	include/ccn/ccnd.h	23;"	d
CCN_CCN_DEFINED	include/ccn/ccn.h	23;"	d
CCN_CHARBUF_DEFINED	include/ccn/charbuf.h	23;"	d
CCN_CLOSE	include/ccn/coding.h	48;"	d
CCN_CODING_DEFINED	include/ccn/coding.h	23;"	d
CCN_CONTENT_DATA	include/ccn/ccn.h	/^    CCN_CONTENT_DATA = 0x0C04C0,$/;"	e	enum:ccn_content_type
CCN_CONTENT_ENCR	include/ccn/ccn.h	/^    CCN_CONTENT_ENCR = 0x10D091,$/;"	e	enum:ccn_content_type
CCN_CONTENT_ENTRY_PRECIOUS	ccnr/ccnr_private.h	354;"	d
CCN_CONTENT_ENTRY_SLOWSEND	ccnd/ccnd_private.h	278;"	d
CCN_CONTENT_ENTRY_SLOWSEND	ccnr/ccnr_private.h	352;"	d
CCN_CONTENT_ENTRY_STABLE	ccnr/ccnr_private.h	355;"	d
CCN_CONTENT_ENTRY_STALE	ccnr/ccnr_private.h	353;"	d
CCN_CONTENT_GONE	include/ccn/ccn.h	/^    CCN_CONTENT_GONE = 0x18E344,$/;"	e	enum:ccn_content_type
CCN_CONTENT_KEY	include/ccn/ccn.h	/^    CCN_CONTENT_KEY  = 0x28463F,$/;"	e	enum:ccn_content_type
CCN_CONTENT_LINK	include/ccn/ccn.h	/^    CCN_CONTENT_LINK = 0x2C834A,$/;"	e	enum:ccn_content_type
CCN_CONTENT_NACK	include/ccn/ccn.h	/^    CCN_CONTENT_NACK = 0x34008A$/;"	e	enum:ccn_content_type
CCN_CQ_ASAP	ccnd/ccnd_private.h	/^    CCN_CQ_ASAP,$/;"	e	enum:cq_delay_class
CCN_CQ_ASAP	ccnr/ccnr_private.h	/^    CCN_CQ_ASAP,$/;"	e	enum:cq_delay_class
CCN_CQ_N	ccnd/ccnd_private.h	/^    CCN_CQ_N$/;"	e	enum:cq_delay_class
CCN_CQ_N	ccnr/ccnr_private.h	/^    CCN_CQ_N$/;"	e	enum:cq_delay_class
CCN_CQ_NORMAL	ccnd/ccnd_private.h	/^    CCN_CQ_NORMAL,$/;"	e	enum:cq_delay_class
CCN_CQ_NORMAL	ccnr/ccnr_private.h	/^    CCN_CQ_NORMAL,$/;"	e	enum:cq_delay_class
CCN_CQ_SLOW	ccnd/ccnd_private.h	/^    CCN_CQ_SLOW,$/;"	e	enum:cq_delay_class
CCN_CQ_SLOW	ccnr/ccnr_private.h	/^    CCN_CQ_SLOW,$/;"	e	enum:cq_delay_class
CCN_DATETIME_PRECISION_MAX	include/ccn/charbuf.h	95;"	d
CCN_DATETIME_PRECISION_USEC	include/ccn/charbuf.h	94;"	d
CCN_DATTR	include/ccn/coding.h	/^    CCN_DATTR,      \/**< attribute numval is attrdict index *\/$/;"	e	enum:ccn_tt
CCN_DEFAULT_LOCAL_SOCKNAME	include/ccn/ccnd.h	25;"	d
CCN_DEFAULT_UNICAST_PORT	include/ccn/ccnd.h	33;"	d
CCN_DEFAULT_UNICAST_PORT_NUMBER	include/ccn/ccnd.h	32;"	d
CCN_DIGEST_DEFAULT	include/ccn/digest.h	/^    CCN_DIGEST_DEFAULT,$/;"	e	enum:ccn_digest_id
CCN_DIGEST_DEFINED	include/ccn/digest.h	26;"	d
CCN_DIGEST_SHA1	include/ccn/digest.h	/^    CCN_DIGEST_SHA1,$/;"	e	enum:ccn_digest_id
CCN_DIGEST_SHA224	include/ccn/digest.h	/^    CCN_DIGEST_SHA224,$/;"	e	enum:ccn_digest_id
CCN_DIGEST_SHA256	include/ccn/digest.h	/^    CCN_DIGEST_SHA256, \/* This is our current favorite *\/$/;"	e	enum:ccn_digest_id
CCN_DIGEST_SHA384	include/ccn/digest.h	/^    CCN_DIGEST_SHA384,$/;"	e	enum:ccn_digest_id
CCN_DIGEST_SHA512	include/ccn/digest.h	/^    CCN_DIGEST_SHA512$/;"	e	enum:ccn_digest_id
CCN_DSTATE_ATTRNAME	include/ccn/coding.h	/^    CCN_DSTATE_ATTRNAME,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_BLOB	include/ccn/coding.h	/^    CCN_DSTATE_BLOB,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_ERR_ATTR	include/ccn/coding.h	/^    CCN_DSTATE_ERR_ATTR     = -2,       $/;"	e	enum:ccn_decoder_state
CCN_DSTATE_ERR_BUG	include/ccn/coding.h	/^    CCN_DSTATE_ERR_BUG      = -5$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_ERR_CODING	include/ccn/coding.h	/^    CCN_DSTATE_ERR_CODING   = -3,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_ERR_NEST	include/ccn/coding.h	/^    CCN_DSTATE_ERR_NEST     = -4, $/;"	e	enum:ccn_decoder_state
CCN_DSTATE_ERR_OVERFLOW	include/ccn/coding.h	/^    CCN_DSTATE_ERR_OVERFLOW = -1,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_INITIAL	include/ccn/coding.h	/^    CCN_DSTATE_INITIAL = 0,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_NEWTOKEN	include/ccn/coding.h	/^    CCN_DSTATE_NEWTOKEN,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_NUMVAL	include/ccn/coding.h	/^    CCN_DSTATE_NUMVAL,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_PAUSE	include/ccn/coding.h	226;"	d
CCN_DSTATE_TAGNAME	include/ccn/coding.h	/^    CCN_DSTATE_TAGNAME,$/;"	e	enum:ccn_decoder_state
CCN_DSTATE_UDATA	include/ccn/coding.h	/^    CCN_DSTATE_UDATA,$/;"	e	enum:ccn_decoder_state
CCN_DTAG	include/ccn/coding.h	/^    CCN_DTAG,       \/**< starts composite - numval is tagdict index (enum ccn_dtag) *\/$/;"	e	enum:ccn_tt
CCN_DTAG_ACL	include/ccn/coding.h	/^    CCN_DTAG_ACL = 103,$/;"	e	enum:ccn_dtag
CCN_DTAG_Action	include/ccn/coding.h	/^    CCN_DTAG_Action = 73,$/;"	e	enum:ccn_dtag
CCN_DTAG_AnswerOriginKind	include/ccn/coding.h	/^    CCN_DTAG_AnswerOriginKind = 47,$/;"	e	enum:ccn_dtag
CCN_DTAG_Any	include/ccn/coding.h	/^    CCN_DTAG_Any = 13,$/;"	e	enum:ccn_dtag
CCN_DTAG_BinaryValue	include/ccn/coding.h	/^    CCN_DTAG_BinaryValue = 100,$/;"	e	enum:ccn_dtag
CCN_DTAG_BlockSize	include/ccn/coding.h	/^    CCN_DTAG_BlockSize = 56,$/;"	e	enum:ccn_dtag
CCN_DTAG_Bloom	include/ccn/coding.h	/^    CCN_DTAG_Bloom = 44,$/;"	e	enum:ccn_dtag
CCN_DTAG_BloomSeed	include/ccn/coding.h	/^    CCN_DTAG_BloomSeed = 45,$/;"	e	enum:ccn_dtag
CCN_DTAG_CCNProtocolDataUnit	include/ccn/coding.h	/^    CCN_DTAG_CCNProtocolDataUnit = 17702112$/;"	e	enum:ccn_dtag
CCN_DTAG_Certificate	include/ccn/coding.h	/^    CCN_DTAG_Certificate = 16,$/;"	e	enum:ccn_dtag
CCN_DTAG_ChildSelector	include/ccn/coding.h	/^    CCN_DTAG_ChildSelector = 85,$/;"	e	enum:ccn_dtag
CCN_DTAG_Collection	include/ccn/coding.h	/^    CCN_DTAG_Collection = 17,$/;"	e	enum:ccn_dtag
CCN_DTAG_CompleteName	include/ccn/coding.h	/^    CCN_DTAG_CompleteName = 18,$/;"	e	enum:ccn_dtag
CCN_DTAG_Component	include/ccn/coding.h	/^    CCN_DTAG_Component = 15,$/;"	e	enum:ccn_dtag
CCN_DTAG_Content	include/ccn/coding.h	/^    CCN_DTAG_Content = 19,$/;"	e	enum:ccn_dtag
CCN_DTAG_ContentDigest	include/ccn/coding.h	/^    CCN_DTAG_ContentDigest = 21,$/;"	e	enum:ccn_dtag
CCN_DTAG_ContentHash	include/ccn/coding.h	/^    CCN_DTAG_ContentHash = 22,$/;"	e	enum:ccn_dtag
CCN_DTAG_ContentObject	include/ccn/coding.h	/^    CCN_DTAG_ContentObject = 64,	\/* 20090915 *\/$/;"	e	enum:ccn_dtag
CCN_DTAG_Count	include/ccn/coding.h	/^    CCN_DTAG_Count = 24,$/;"	e	enum:ccn_dtag
CCN_DTAG_DecimalValue	include/ccn/coding.h	/^    CCN_DTAG_DecimalValue = 98,$/;"	e	enum:ccn_dtag
CCN_DTAG_DigestAlgorithm	include/ccn/coding.h	/^    CCN_DTAG_DigestAlgorithm = 55,$/;"	e	enum:ccn_dtag
CCN_DTAG_EncryptedKey	include/ccn/coding.h	/^    CCN_DTAG_EncryptedKey = 70,$/;"	e	enum:ccn_dtag
CCN_DTAG_EncryptedNonceKey	include/ccn/coding.h	/^    CCN_DTAG_EncryptedNonceKey = 71,$/;"	e	enum:ccn_dtag
CCN_DTAG_Entry	include/ccn/coding.h	/^    CCN_DTAG_Entry = 102,$/;"	e	enum:ccn_dtag
CCN_DTAG_Exclude	include/ccn/coding.h	/^    CCN_DTAG_Exclude = 43,$/;"	e	enum:ccn_dtag
CCN_DTAG_ExtOpt	include/ccn/coding.h	/^    CCN_DTAG_ExtOpt = 34,$/;"	e	enum:ccn_dtag
CCN_DTAG_FaceID	include/ccn/coding.h	/^    CCN_DTAG_FaceID = 74,$/;"	e	enum:ccn_dtag
CCN_DTAG_FaceInstance	include/ccn/coding.h	/^    CCN_DTAG_FaceInstance = 80,$/;"	e	enum:ccn_dtag
CCN_DTAG_FinalBlockID	include/ccn/coding.h	/^    CCN_DTAG_FinalBlockID = 59,$/;"	e	enum:ccn_dtag
CCN_DTAG_ForwardingEntry	include/ccn/coding.h	/^    CCN_DTAG_ForwardingEntry = 81,$/;"	e	enum:ccn_dtag
CCN_DTAG_ForwardingFlags	include/ccn/coding.h	/^    CCN_DTAG_ForwardingFlags = 79,$/;"	e	enum:ccn_dtag
CCN_DTAG_FreshnessSeconds	include/ccn/coding.h	/^    CCN_DTAG_FreshnessSeconds = 58,$/;"	e	enum:ccn_dtag
CCN_DTAG_GlobalPrefix	include/ccn/coding.h	/^    CCN_DTAG_GlobalPrefix = 89,$/;"	e	enum:ccn_dtag
CCN_DTAG_GlobalPrefixName	include/ccn/coding.h	/^    CCN_DTAG_GlobalPrefixName = 93,$/;"	e	enum:ccn_dtag
CCN_DTAG_Header	include/ccn/coding.h	/^    CCN_DTAG_Header = 25,$/;"	e	enum:ccn_dtag
CCN_DTAG_Host	include/ccn/coding.h	/^    CCN_DTAG_Host = 76,$/;"	e	enum:ccn_dtag
CCN_DTAG_IPProto	include/ccn/coding.h	/^    CCN_DTAG_IPProto = 75,$/;"	e	enum:ccn_dtag
CCN_DTAG_InfoString	include/ccn/coding.h	/^    CCN_DTAG_InfoString = 110,$/;"	e	enum:ccn_dtag
CCN_DTAG_IntegerValue	include/ccn/coding.h	/^    CCN_DTAG_IntegerValue = 97,$/;"	e	enum:ccn_dtag
CCN_DTAG_Interest	include/ccn/coding.h	/^    CCN_DTAG_Interest = 26,	\/* 20090915 *\/$/;"	e	enum:ccn_dtag
CCN_DTAG_InterestLifetime	include/ccn/coding.h	/^    CCN_DTAG_InterestLifetime = 48,$/;"	e	enum:ccn_dtag
CCN_DTAG_Key	include/ccn/coding.h	/^    CCN_DTAG_Key = 27,$/;"	e	enum:ccn_dtag
CCN_DTAG_KeyAlgorithm	include/ccn/coding.h	/^    CCN_DTAG_KeyAlgorithm = 68,$/;"	e	enum:ccn_dtag
CCN_DTAG_KeyLocator	include/ccn/coding.h	/^    CCN_DTAG_KeyLocator = 28,$/;"	e	enum:ccn_dtag
CCN_DTAG_KeyName	include/ccn/coding.h	/^    CCN_DTAG_KeyName = 29,$/;"	e	enum:ccn_dtag
CCN_DTAG_KeyValuePair	include/ccn/coding.h	/^    CCN_DTAG_KeyValuePair = 96,$/;"	e	enum:ccn_dtag
CCN_DTAG_KeyValueSet	include/ccn/coding.h	/^    CCN_DTAG_KeyValueSet = 95,$/;"	e	enum:ccn_dtag
CCN_DTAG_Label	include/ccn/coding.h	/^    CCN_DTAG_Label = 69,$/;"	e	enum:ccn_dtag
CCN_DTAG_Length	include/ccn/coding.h	/^    CCN_DTAG_Length = 30,$/;"	e	enum:ccn_dtag
CCN_DTAG_Link	include/ccn/coding.h	/^    CCN_DTAG_Link = 31,$/;"	e	enum:ccn_dtag
CCN_DTAG_LinkAuthenticator	include/ccn/coding.h	/^    CCN_DTAG_LinkAuthenticator = 32,$/;"	e	enum:ccn_dtag
CCN_DTAG_LocalName	include/ccn/coding.h	/^    CCN_DTAG_LocalName = 90,$/;"	e	enum:ccn_dtag
CCN_DTAG_MaxSuffixComponents	include/ccn/coding.h	/^    CCN_DTAG_MaxSuffixComponents = 84,$/;"	e	enum:ccn_dtag
CCN_DTAG_MinSuffixComponents	include/ccn/coding.h	/^    CCN_DTAG_MinSuffixComponents = 83,$/;"	e	enum:ccn_dtag
CCN_DTAG_MulticastInterface	include/ccn/coding.h	/^    CCN_DTAG_MulticastInterface = 78,$/;"	e	enum:ccn_dtag
CCN_DTAG_MulticastTTL	include/ccn/coding.h	/^    CCN_DTAG_MulticastTTL = 82,$/;"	e	enum:ccn_dtag
CCN_DTAG_Name	include/ccn/coding.h	/^    CCN_DTAG_Name = 14,$/;"	e	enum:ccn_dtag
CCN_DTAG_NameComponentCount	include/ccn/coding.h	/^    CCN_DTAG_NameComponentCount = 33,	\/* DeprecatedInInterest *\/$/;"	e	enum:ccn_dtag
CCN_DTAG_NameValue	include/ccn/coding.h	/^    CCN_DTAG_NameValue = 101,$/;"	e	enum:ccn_dtag
CCN_DTAG_Namespace	include/ccn/coding.h	/^    CCN_DTAG_Namespace = 92,$/;"	e	enum:ccn_dtag
CCN_DTAG_Nonce	include/ccn/coding.h	/^    CCN_DTAG_Nonce = 41,$/;"	e	enum:ccn_dtag
CCN_DTAG_ParameterizedName	include/ccn/coding.h	/^    CCN_DTAG_ParameterizedName = 104,$/;"	e	enum:ccn_dtag
CCN_DTAG_Parameters	include/ccn/coding.h	/^    CCN_DTAG_Parameters = 109,$/;"	e	enum:ccn_dtag
CCN_DTAG_Policy	include/ccn/coding.h	/^    CCN_DTAG_Policy = 91,$/;"	e	enum:ccn_dtag
CCN_DTAG_PolicyVersion	include/ccn/coding.h	/^    CCN_DTAG_PolicyVersion = 94,$/;"	e	enum:ccn_dtag
CCN_DTAG_Port	include/ccn/coding.h	/^    CCN_DTAG_Port = 77,$/;"	e	enum:ccn_dtag
CCN_DTAG_Prefix	include/ccn/coding.h	/^    CCN_DTAG_Prefix = 105,$/;"	e	enum:ccn_dtag
CCN_DTAG_ProfileName	include/ccn/coding.h	/^    CCN_DTAG_ProfileName = 108,$/;"	e	enum:ccn_dtag
CCN_DTAG_PublisherCertificateDigest	include/ccn/coding.h	/^    CCN_DTAG_PublisherCertificateDigest = 61,$/;"	e	enum:ccn_dtag
CCN_DTAG_PublisherIssuerCertificateDigest	include/ccn/coding.h	/^    CCN_DTAG_PublisherIssuerCertificateDigest = 63,$/;"	e	enum:ccn_dtag
CCN_DTAG_PublisherIssuerKeyDigest	include/ccn/coding.h	/^    CCN_DTAG_PublisherIssuerKeyDigest = 62,$/;"	e	enum:ccn_dtag
CCN_DTAG_PublisherPublicKeyDigest	include/ccn/coding.h	/^    CCN_DTAG_PublisherPublicKeyDigest = 60,$/;"	e	enum:ccn_dtag
CCN_DTAG_RepositoryInfo	include/ccn/coding.h	/^    CCN_DTAG_RepositoryInfo = 86,$/;"	e	enum:ccn_dtag
CCN_DTAG_RepositoryVersion	include/ccn/coding.h	/^    CCN_DTAG_RepositoryVersion = 88,$/;"	e	enum:ccn_dtag
CCN_DTAG_Root	include/ccn/coding.h	/^    CCN_DTAG_Root = 107,$/;"	e	enum:ccn_dtag
CCN_DTAG_RootDigest	include/ccn/coding.h	/^    CCN_DTAG_RootDigest = 36,$/;"	e	enum:ccn_dtag
CCN_DTAG_Scope	include/ccn/coding.h	/^    CCN_DTAG_Scope = 42,$/;"	e	enum:ccn_dtag
CCN_DTAG_SequenceNumber	include/ccn/coding.h	/^    CCN_DTAG_SequenceNumber = 256,$/;"	e	enum:ccn_dtag
CCN_DTAG_Signature	include/ccn/coding.h	/^    CCN_DTAG_Signature = 37,$/;"	e	enum:ccn_dtag
CCN_DTAG_SignatureBits	include/ccn/coding.h	/^    CCN_DTAG_SignatureBits = 54,$/;"	e	enum:ccn_dtag
CCN_DTAG_SignedInfo	include/ccn/coding.h	/^    CCN_DTAG_SignedInfo = 20,$/;"	e	enum:ccn_dtag
CCN_DTAG_Start	include/ccn/coding.h	/^    CCN_DTAG_Start = 38,$/;"	e	enum:ccn_dtag
CCN_DTAG_StatusCode	include/ccn/coding.h	/^    CCN_DTAG_StatusCode = 113,$/;"	e	enum:ccn_dtag
CCN_DTAG_StatusResponse	include/ccn/coding.h	/^    CCN_DTAG_StatusResponse = 112,$/;"	e	enum:ccn_dtag
CCN_DTAG_StatusText	include/ccn/coding.h	/^    CCN_DTAG_StatusText = 114,$/;"	e	enum:ccn_dtag
CCN_DTAG_StringValue	include/ccn/coding.h	/^    CCN_DTAG_StringValue = 99,$/;"	e	enum:ccn_dtag
CCN_DTAG_Suffix	include/ccn/coding.h	/^    CCN_DTAG_Suffix = 106,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncByteCount	include/ccn/coding.h	/^    CCN_DTAG_SyncByteCount = 123,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncConfigSlice	include/ccn/coding.h	/^    CCN_DTAG_SyncConfigSlice = 124,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncConfigSliceList	include/ccn/coding.h	/^    CCN_DTAG_SyncConfigSliceList = 125,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncConfigSliceOp	include/ccn/coding.h	/^    CCN_DTAG_SyncConfigSliceOp = 126,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncContentHash	include/ccn/coding.h	/^    CCN_DTAG_SyncContentHash = 120,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncLeafCount	include/ccn/coding.h	/^    CCN_DTAG_SyncLeafCount = 121,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncNode	include/ccn/coding.h	/^    CCN_DTAG_SyncNode = 115,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncNodeDeltas	include/ccn/coding.h	/^    CCN_DTAG_SyncNodeDeltas = 127,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncNodeElement	include/ccn/coding.h	/^    CCN_DTAG_SyncNodeElement = 117,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncNodeElements	include/ccn/coding.h	/^    CCN_DTAG_SyncNodeElements = 119,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncNodeKind	include/ccn/coding.h	/^    CCN_DTAG_SyncNodeKind = 116,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncTreeDepth	include/ccn/coding.h	/^    CCN_DTAG_SyncTreeDepth = 122,$/;"	e	enum:ccn_dtag
CCN_DTAG_SyncVersion	include/ccn/coding.h	/^    CCN_DTAG_SyncVersion = 118,$/;"	e	enum:ccn_dtag
CCN_DTAG_Timestamp	include/ccn/coding.h	/^    CCN_DTAG_Timestamp = 39,$/;"	e	enum:ccn_dtag
CCN_DTAG_Type	include/ccn/coding.h	/^    CCN_DTAG_Type = 40,$/;"	e	enum:ccn_dtag
CCN_DTAG_Version	include/ccn/coding.h	/^    CCN_DTAG_Version = 87,$/;"	e	enum:ccn_dtag
CCN_DTAG_Witness	include/ccn/coding.h	/^    CCN_DTAG_Witness = 53,$/;"	e	enum:ccn_dtag
CCN_DTAG_WrapAlgorithm	include/ccn/coding.h	/^    CCN_DTAG_WrapAlgorithm = 67,$/;"	e	enum:ccn_dtag
CCN_DTAG_WrappedKey	include/ccn/coding.h	/^    CCN_DTAG_WrappedKey = 65,$/;"	e	enum:ccn_dtag
CCN_DTAG_WrappingKeyIdentifier	include/ccn/coding.h	/^    CCN_DTAG_WrappingKeyIdentifier = 66,$/;"	e	enum:ccn_dtag
CCN_DTAG_WrappingKeyName	include/ccn/coding.h	/^    CCN_DTAG_WrappingKeyName = 72,$/;"	e	enum:ccn_dtag
CCN_EMPTY_PDU	include/ccn/ccnd.h	39;"	d
CCN_EMPTY_PDU_LENGTH	include/ccn/ccnd.h	40;"	d
CCN_EXT	include/ccn/coding.h	/^    CCN_EXT,        \/**< starts composite extension - numval is subtype *\/$/;"	e	enum:ccn_tt
CCN_EXTEND_DICT_DEFINED	include/ccn/extend_dict.h	23;"	d
CCN_FACE_ADJ	ccnd/ccnd_private.h	253;"	d
CCN_FACE_BC	ccnd/ccnd_private.h	251;"	d
CCN_FACE_CLOSING	ccnd/ccnd_private.h	244;"	d
CCN_FACE_CONNECTING	ccnd/ccnd_private.h	242;"	d
CCN_FACE_DC	ccnd/ccnd_private.h	238;"	d
CCN_FACE_DGRAM	ccnd/ccnd_private.h	232;"	d
CCN_FACE_GG	ccnd/ccnd_private.h	233;"	d
CCN_FACE_INET	ccnd/ccnd_private.h	235;"	d
CCN_FACE_INET6	ccnd/ccnd_private.h	237;"	d
CCN_FACE_LC	ccnd/ccnd_private.h	250;"	d
CCN_FACE_LINK	ccnd/ccnd_private.h	231;"	d
CCN_FACE_LOCAL	ccnd/ccnd_private.h	234;"	d
CCN_FACE_LOOPBACK	ccnd/ccnd_private.h	243;"	d
CCN_FACE_MCAST	ccnd/ccnd_private.h	236;"	d
CCN_FACE_MGMT_DEFINED	include/ccn/face_mgmt.h	21;"	d
CCN_FACE_NBC	ccnd/ccnd_private.h	252;"	d
CCN_FACE_NORECV	ccnd/ccnd_private.h	246;"	d
CCN_FACE_NOSEND	ccnd/ccnd_private.h	239;"	d
CCN_FACE_PASSIVE	ccnd/ccnd_private.h	245;"	d
CCN_FACE_PERMANENT	ccnd/ccnd_private.h	241;"	d
CCN_FACE_REGOK	ccnd/ccnd_private.h	247;"	d
CCN_FACE_SEQOK	ccnd/ccnd_private.h	248;"	d
CCN_FACE_SEQPROBE	ccnd/ccnd_private.h	249;"	d
CCN_FACE_UNDECIDED	ccnd/ccnd_private.h	240;"	d
CCN_FETCH_DEFINED	include/ccn/fetch.h	29;"	d
CCN_FETCH_READ_END	include/ccn/fetch.h	59;"	d
CCN_FETCH_READ_NONE	include/ccn/fetch.h	58;"	d
CCN_FETCH_READ_TIMEOUT	include/ccn/fetch.h	57;"	d
CCN_FETCH_READ_ZERO	include/ccn/fetch.h	56;"	d
CCN_FINAL_DSTATE	include/ccn/coding.h	228;"	d
CCN_FLATNAME_DEFINED	include/ccn/flatname.h	22;"	d
CCN_FORW_ACTIVE	include/ccn/reg_mgmt.h	38;"	d
CCN_FORW_ADVERTISE	include/ccn/reg_mgmt.h	40;"	d
CCN_FORW_CAPTURE	include/ccn/reg_mgmt.h	42;"	d
CCN_FORW_CAPTURE_OK	include/ccn/reg_mgmt.h	45;"	d
CCN_FORW_CHILD_INHERIT	include/ccn/reg_mgmt.h	39;"	d
CCN_FORW_LAST	include/ccn/reg_mgmt.h	41;"	d
CCN_FORW_LOCAL	include/ccn/reg_mgmt.h	43;"	d
CCN_FORW_PFXO	ccnd/ccnd_private.h	420;"	d
CCN_FORW_PFXO	ccnr/ccnr_private.h	456;"	d
CCN_FORW_PUBMASK	include/ccn/reg_mgmt.h	46;"	d
CCN_FORW_REFRESHED	ccnd/ccnd_private.h	421;"	d
CCN_FORW_REFRESHED	ccnr/ccnr_private.h	457;"	d
CCN_FORW_TAP	include/ccn/reg_mgmt.h	44;"	d
CCN_FORW_WAITING_CCNDID	lib/ccn_client.c	113;"	d	file:
CCN_FWU_SECS	ccnd/ccnd_private.h	427;"	d
CCN_FWU_SECS	ccnr/ccnr_private.h	463;"	d
CCN_GET_NOKEYWAIT	include/ccn/ccn.h	391;"	d
CCN_GET_TT_FROM_DSTATE	include/ccn/coding.h	227;"	d
CCN_HASHTB_DEFINED	include/ccn/hashtb.h	23;"	d
CCN_HEADER_DEFINED	include/ccn/header.h	21;"	d
CCN_INDEXBUF_DEFINED	include/ccn/indexbuf.h	23;"	d
CCN_INTEREST_LIFETIME_MICROSEC	include/ccn/ccn.h	66;"	d
CCN_INTEREST_LIFETIME_SEC	include/ccn/ccn.h	65;"	d
CCN_INTEREST_TIMEOUT_USECS	lib/ccn_fetch.c	49;"	d	file:
CCN_IndexSorter	sync/IndexSorter.h	21;"	d
CCN_KEYSTORE_DEFINED	include/ccn/keystore.h	26;"	d
CCN_KEYSTORE_PASS	cmd/ccninitkeystore.c	31;"	d	file:
CCN_LOCAL_PORT_ENVNAME	include/ccn/ccnd.h	26;"	d
CCN_MARKER_BLKID	include/ccn/ccn.h	/^    CCN_MARKER_BLKID   = 0xFB, \/**< nonconsecutive block ids *\/$/;"	e	enum:ccn_marker
CCN_MARKER_CONTROL	include/ccn/ccn.h	/^    CCN_MARKER_CONTROL = 0xC1, \/**< commands, etc. *\/ $/;"	e	enum:ccn_marker
CCN_MARKER_NONE	include/ccn/ccn.h	/^    CCN_MARKER_NONE = -1,$/;"	e	enum:ccn_marker
CCN_MARKER_OSEQNUM	include/ccn/ccn.h	/^    CCN_MARKER_OSEQNUM = 0xF8, \/**< deprecated *\/$/;"	e	enum:ccn_marker
CCN_MARKER_SEQNUM	include/ccn/ccn.h	/^    CCN_MARKER_SEQNUM  = 0x00, \/**< consecutive block sequence numbers *\/$/;"	e	enum:ccn_marker
CCN_MARKER_VERSION	include/ccn/ccn.h	/^    CCN_MARKER_VERSION = 0xFD  \/**< timestamp-based versioning *\/$/;"	e	enum:ccn_marker
CCN_MATRIX_DEFINED	include/ccn/matrix.h	26;"	d
CCN_MAX_CONTENT_PAYLOAD	include/ccn/ccn.h	57;"	d
CCN_MAX_KEY_LINK_CHAIN	lib/ccn_client.c	1604;"	d	file:
CCN_MAX_MESSAGE_BYTES	include/ccn/ccn.h	58;"	d
CCN_MAX_TINY	include/ccn/coding.h	30;"	d
CCN_MERKLEPATHASN1_DEFINED	include/ccn/merklepathasn1.h	22;"	d
CCN_NAMETREE_DEFINED	include/ccn/nametree.h	21;"	d
CCN_NAMETREE_IMPL	lib/ccn_nametree.c	24;"	d	file:
CCN_NOFACEID	ccnd/ccnd_private.h	254;"	d
CCN_NOFACEID	ccnr/ccnr_private.h	341;"	d
CCN_NO_FACEID	include/ccn/face_mgmt.h	27;"	d
CCN_NO_SCHEMA	cmd/ccn_ccnbtoxml.c	56;"	d	file:
CCN_NO_TOKEN	include/ccn/coding.h	/^    CCN_NO_TOKEN    \/**< should not occur in encoding *\/$/;"	e	enum:ccn_tt
CCN_OPENSSL_EX_DEFINED	include/ccn/openssl_ex.h	26;"	d
CCN_PATH_VAR_TMP	ccnd/ccnd_internal_client.c	1316;"	d	file:
CCN_PCO_B_Component0	include/ccn/ccn.h	/^    CCN_PCO_B_Component0,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Content	include/ccn/ccn.h	/^    CCN_PCO_B_Content,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_DigestAlgorithm	include/ccn/ccn.h	/^    CCN_PCO_B_DigestAlgorithm,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_ExtOpt	include/ccn/ccn.h	/^    CCN_PCO_B_ExtOpt,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_FinalBlockID	include/ccn/ccn.h	/^    CCN_PCO_B_FinalBlockID,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_FreshnessSeconds	include/ccn/ccn.h	/^    CCN_PCO_B_FreshnessSeconds,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_KeyLocator	include/ccn/ccn.h	/^    CCN_PCO_B_KeyLocator,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_KeyName_Name	include/ccn/ccn.h	/^    CCN_PCO_B_KeyName_Name,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_KeyName_Pub	include/ccn/ccn.h	/^    CCN_PCO_B_KeyName_Pub,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Key_Certificate_KeyName	include/ccn/ccn.h	/^    CCN_PCO_B_Key_Certificate_KeyName,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Name	include/ccn/ccn.h	/^    CCN_PCO_B_Name,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_PublisherPublicKeyDigest	include/ccn/ccn.h	/^    CCN_PCO_B_PublisherPublicKeyDigest,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Signature	include/ccn/ccn.h	/^    CCN_PCO_B_Signature,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_SignatureBits	include/ccn/ccn.h	/^    CCN_PCO_B_SignatureBits,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_SignedInfo	include/ccn/ccn.h	/^    CCN_PCO_B_SignedInfo,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Timestamp	include/ccn/ccn.h	/^    CCN_PCO_B_Timestamp,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Type	include/ccn/ccn.h	/^    CCN_PCO_B_Type,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_B_Witness	include/ccn/ccn.h	/^    CCN_PCO_B_Witness,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E	include/ccn/ccn.h	/^    CCN_PCO_E$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_ComponentLast	include/ccn/ccn.h	/^    CCN_PCO_E_ComponentLast = CCN_PCO_E_ComponentN,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_ComponentN	include/ccn/ccn.h	/^    CCN_PCO_E_ComponentN,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Content	include/ccn/ccn.h	/^    CCN_PCO_E_Content,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_DigestAlgorithm	include/ccn/ccn.h	/^    CCN_PCO_E_DigestAlgorithm,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_ExtOpt	include/ccn/ccn.h	/^    CCN_PCO_E_ExtOpt,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_FinalBlockID	include/ccn/ccn.h	/^    CCN_PCO_E_FinalBlockID,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_FreshnessSeconds	include/ccn/ccn.h	/^    CCN_PCO_E_FreshnessSeconds,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_KeyLocator	include/ccn/ccn.h	/^    CCN_PCO_E_KeyLocator,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_KeyName_Name	include/ccn/ccn.h	/^    CCN_PCO_E_KeyName_Name,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_KeyName_Pub	include/ccn/ccn.h	/^    CCN_PCO_E_KeyName_Pub,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Key_Certificate_KeyName	include/ccn/ccn.h	/^    CCN_PCO_E_Key_Certificate_KeyName,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Name	include/ccn/ccn.h	/^    CCN_PCO_E_Name,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_PublisherPublicKeyDigest	include/ccn/ccn.h	/^    CCN_PCO_E_PublisherPublicKeyDigest,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Signature	include/ccn/ccn.h	/^    CCN_PCO_E_Signature,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_SignatureBits	include/ccn/ccn.h	/^    CCN_PCO_E_SignatureBits,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_SignedInfo	include/ccn/ccn.h	/^    CCN_PCO_E_SignedInfo,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Timestamp	include/ccn/ccn.h	/^    CCN_PCO_E_Timestamp,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Type	include/ccn/ccn.h	/^    CCN_PCO_E_Type,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PCO_E_Witness	include/ccn/ccn.h	/^    CCN_PCO_E_Witness,$/;"	e	enum:ccn_parsed_content_object_offsetid
CCN_PI_B_AnswerOriginKind	include/ccn/ccn.h	/^    CCN_PI_B_AnswerOriginKind,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_ChildSelector	include/ccn/ccn.h	/^    CCN_PI_B_ChildSelector,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_Component0	include/ccn/ccn.h	/^    CCN_PI_B_Component0,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_Exclude	include/ccn/ccn.h	/^    CCN_PI_B_Exclude,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_InterestLifetime	include/ccn/ccn.h	/^    CCN_PI_B_InterestLifetime,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_LastPrefixComponent	include/ccn/ccn.h	/^    CCN_PI_B_LastPrefixComponent,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_MaxSuffixComponents	include/ccn/ccn.h	/^    CCN_PI_B_MaxSuffixComponents,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_MinSuffixComponents	include/ccn/ccn.h	/^    CCN_PI_B_MinSuffixComponents,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_Name	include/ccn/ccn.h	/^    CCN_PI_B_Name,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_Nonce	include/ccn/ccn.h	/^    CCN_PI_B_Nonce,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_OTHER	include/ccn/ccn.h	/^    CCN_PI_B_OTHER,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_PublisherID	include/ccn/ccn.h	/^    CCN_PI_B_PublisherID, \/\/ XXX - rename$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_PublisherIDKeyDigest	include/ccn/ccn.h	/^    CCN_PI_B_PublisherIDKeyDigest,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_B_Scope	include/ccn/ccn.h	/^    CCN_PI_B_Scope,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E	include/ccn/ccn.h	/^    CCN_PI_E$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_AnswerOriginKind	include/ccn/ccn.h	/^    CCN_PI_E_AnswerOriginKind,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_ChildSelector	include/ccn/ccn.h	/^    CCN_PI_E_ChildSelector,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_ComponentLast	include/ccn/ccn.h	/^    CCN_PI_E_ComponentLast = CCN_PI_E_LastPrefixComponent,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_Exclude	include/ccn/ccn.h	/^    CCN_PI_E_Exclude,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_InterestLifetime	include/ccn/ccn.h	/^    CCN_PI_E_InterestLifetime,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_LastPrefixComponent	include/ccn/ccn.h	/^    CCN_PI_E_LastPrefixComponent,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_MaxSuffixComponents	include/ccn/ccn.h	/^    CCN_PI_E_MaxSuffixComponents,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_MinSuffixComponents	include/ccn/ccn.h	/^    CCN_PI_E_MinSuffixComponents,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_Name	include/ccn/ccn.h	/^    CCN_PI_E_Name,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_Nonce	include/ccn/ccn.h	/^    CCN_PI_E_Nonce,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_OTHER	include/ccn/ccn.h	/^    CCN_PI_E_OTHER,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_PublisherID	include/ccn/ccn.h	/^    CCN_PI_E_PublisherID,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_PublisherIDKeyDigest	include/ccn/ccn.h	/^    CCN_PI_E_PublisherIDKeyDigest,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PI_E_Scope	include/ccn/ccn.h	/^    CCN_PI_E_Scope,$/;"	e	enum:ccn_parsed_interest_offsetid
CCN_PL_B_Component0	include/ccn/ccn.h	/^    CCN_PL_B_Component0,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_ContentDigest	include/ccn/ccn.h	/^    CCN_PL_B_ContentDigest,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_Label	include/ccn/ccn.h	/^    CCN_PL_B_Label,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_LinkAuthenticator	include/ccn/ccn.h	/^    CCN_PL_B_LinkAuthenticator,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_Name	include/ccn/ccn.h	/^    CCN_PL_B_Name,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_NameComponentCount	include/ccn/ccn.h	/^    CCN_PL_B_NameComponentCount,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_PublisherDigest	include/ccn/ccn.h	/^    CCN_PL_B_PublisherDigest,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_PublisherID	include/ccn/ccn.h	/^    CCN_PL_B_PublisherID,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_Timestamp	include/ccn/ccn.h	/^    CCN_PL_B_Timestamp,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_B_Type	include/ccn/ccn.h	/^    CCN_PL_B_Type,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E	include/ccn/ccn.h	/^    CCN_PL_E$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_ComponentLast	include/ccn/ccn.h	/^    CCN_PL_E_ComponentLast,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_ContentDigest	include/ccn/ccn.h	/^    CCN_PL_E_ContentDigest,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_Label	include/ccn/ccn.h	/^    CCN_PL_E_Label,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_LinkAuthenticator	include/ccn/ccn.h	/^    CCN_PL_E_LinkAuthenticator,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_Name	include/ccn/ccn.h	/^    CCN_PL_E_Name,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_NameComponentCount	include/ccn/ccn.h	/^    CCN_PL_E_NameComponentCount,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_PublisherDigest	include/ccn/ccn.h	/^    CCN_PL_E_PublisherDigest,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_PublisherID	include/ccn/ccn.h	/^    CCN_PL_E_PublisherID,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_Timestamp	include/ccn/ccn.h	/^    CCN_PL_E_Timestamp,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PL_E_Type	include/ccn/ccn.h	/^    CCN_PL_E_Type,$/;"	e	enum:ccn_parsed_Link_offsetid
CCN_PRIVATE_DEFINED	include/ccn/ccn_private.h	23;"	d
CCN_PROCESSING_INSTRUCTIONS	include/ccn/coding.h	/^    CCN_PROCESSING_INSTRUCTIONS = 16 \/* <?name:U value:U?> *\/$/;"	e	enum:ccn_ext_subtype
CCN_PR_EQV	ccnr/ccnr_private.h	393;"	d
CCN_PR_SCOPE0	ccnr/ccnr_private.h	394;"	d
CCN_PR_SCOPE1	ccnr/ccnr_private.h	395;"	d
CCN_PR_SCOPE2	ccnr/ccnr_private.h	396;"	d
CCN_PR_STUFFED1	ccnr/ccnr_private.h	391;"	d
CCN_PR_TAP	ccnr/ccnr_private.h	392;"	d
CCN_PR_UNSENT	ccnr/ccnr_private.h	389;"	d
CCN_PR_WAIT1	ccnr/ccnr_private.h	390;"	d
CCN_RANDOM_DEFINED	include/ccn/random.h	22;"	d
CCN_RCFLAG_LASTBLOCK	include/ccn/btree_content.h	46;"	d
CCN_RCFLAG_STALE	include/ccn/btree_content.h	47;"	d
CCN_REG_MGMT_DEFINED	include/ccn/reg_mgmt.h	21;"	d
CCN_SCHEDULE_CANCEL	include/ccn/schedule.h	59;"	d
CCN_SCHEDULE_DEFINED	include/ccn/schedule.h	23;"	d
CCN_SECRET_KEY_LENGTH	include/ccn/keystore.h	32;"	d
CCN_SEQWRITER_DEFINED	include/ccn/seqwriter.h	22;"	d
CCN_SIGNING_DEFAULT_DIGEST_ALGORITHM	include/ccn/ccn.h	880;"	d
CCN_SIGNING_DEFINED	include/ccn/signing.h	25;"	d
CCN_SIGNING_PARAMS_INIT	include/ccn/ccn.h	829;"	d
CCN_SKIPLIST_MAX_DEPTH	lib/ccn_nametree.c	27;"	d	file:
CCN_SOCKADDRUTIL_DEFINED	include/ccn/sockaddrutil.h	22;"	d
CCN_SOCKCREATE_DEFINED	include/ccn/sockcreate.h	21;"	d
CCN_SP_FINAL_BLOCK	include/ccn/ccn.h	836;"	d
CCN_SP_OMIT_KEY_LOCATOR	include/ccn/ccn.h	837;"	d
CCN_SP_TEMPL_EXT_OPT	include/ccn/ccn.h	838;"	d
CCN_SP_TEMPL_FINAL_BLOCK_ID	include/ccn/ccn.h	833;"	d
CCN_SP_TEMPL_FRESHNESS	include/ccn/ccn.h	834;"	d
CCN_SP_TEMPL_KEY_LOCATOR	include/ccn/ccn.h	835;"	d
CCN_SP_TEMPL_TIMESTAMP	include/ccn/ccn.h	832;"	d
CCN_STRICT_PREFIX	include/ccn/flatname.h	73;"	d
CCN_STRICT_REV_PREFIX	include/ccn/flatname.h	74;"	d
CCN_SyncActions	sync/SyncActions.h	19;"	d
CCN_SyncBase	sync/SyncBase.h	22;"	d
CCN_SyncDepends	sync/sync_plumbing.h	33;"	d
CCN_SyncDiff	sync/sync_diff.h	22;"	d
CCN_SyncHashCache	sync/SyncHashCache.h	22;"	d
CCN_SyncMacros	sync/SyncMacros.h	22;"	d
CCN_SyncNode	sync/SyncNode.h	25;"	d
CCN_SyncPrivate	sync/SyncPrivate.h	22;"	d
CCN_SyncRoot	sync/SyncRoot.h	22;"	d
CCN_SyncTreeWorker	sync/SyncTreeWorker.h	21;"	d
CCN_SyncUtil	sync/SyncUtil.h	21;"	d
CCN_TAG	include/ccn/coding.h	/^    CCN_TAG,        \/**< starts composite - numval is tagnamelen-1 *\/ $/;"	e	enum:ccn_tt
CCN_TT_BITS	include/ccn/coding.h	28;"	d
CCN_TT_HBIT	include/ccn/coding.h	31;"	d
CCN_TT_MASK	include/ccn/coding.h	29;"	d
CCN_UDATA	include/ccn/coding.h	/^    CCN_UDATA,      \/**< UTF-8 encoded character data - numval is byte count *\/$/;"	e	enum:ccn_tt
CCN_UNKNOWN_SCHEMA	cmd/ccn_ccnbtoxml.c	57;"	d	file:
CCN_UPCALL_CONSUMED_INTEREST	include/ccn/ccn.h	/^    CCN_UPCALL_CONSUMED_INTEREST, \/**< incoming interest, someone has answered *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_CONTENT	include/ccn/ccn.h	/^    CCN_UPCALL_CONTENT,           \/**< incoming verified content *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_CONTENT_BAD	include/ccn/ccn.h	/^    CCN_UPCALL_CONTENT_BAD,       \/**< verification failed *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_CONTENT_KEYMISSING	include/ccn/ccn.h	/^    CCN_UPCALL_CONTENT_KEYMISSING,\/**< key has not been fetched *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_CONTENT_RAW	include/ccn/ccn.h	/^    CCN_UPCALL_CONTENT_RAW        \/**< verification has not been attempted *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_CONTENT_UNVERIFIED	include/ccn/ccn.h	/^    CCN_UPCALL_CONTENT_UNVERIFIED,\/**< content that has not been verified *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_FINAL	include/ccn/ccn.h	/^    CCN_UPCALL_FINAL,             \/**< handler is about to be deregistered *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_INTEREST	include/ccn/ccn.h	/^    CCN_UPCALL_INTEREST,          \/**< incoming interest *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_INTEREST_TIMED_OUT	include/ccn/ccn.h	/^    CCN_UPCALL_INTEREST_TIMED_OUT,\/**< interest timed out *\/$/;"	e	enum:ccn_upcall_kind
CCN_UPCALL_RESULT_ERR	include/ccn/ccn.h	/^    CCN_UPCALL_RESULT_ERR = -1, \/**< upcall detected an error *\/$/;"	e	enum:ccn_upcall_res
CCN_UPCALL_RESULT_FETCHKEY	include/ccn/ccn.h	/^    CCN_UPCALL_RESULT_FETCHKEY = 4 \/**< request fetching of an unfetched key *\/$/;"	e	enum:ccn_upcall_res
CCN_UPCALL_RESULT_INTEREST_CONSUMED	include/ccn/ccn.h	/^    CCN_UPCALL_RESULT_INTEREST_CONSUMED = 2,\/**< upcall claims to consume interest *\/$/;"	e	enum:ccn_upcall_res
CCN_UPCALL_RESULT_OK	include/ccn/ccn.h	/^    CCN_UPCALL_RESULT_OK = 0,   \/**< normal upcall return *\/$/;"	e	enum:ccn_upcall_res
CCN_UPCALL_RESULT_REEXPRESS	include/ccn/ccn.h	/^    CCN_UPCALL_RESULT_REEXPRESS = 1, \/**< reexpress the same interest again *\/$/;"	e	enum:ccn_upcall_res
CCN_UPCALL_RESULT_VERIFY	include/ccn/ccn.h	/^    CCN_UPCALL_RESULT_VERIFY = 3, \/**< force an unverified result to be verified *\/$/;"	e	enum:ccn_upcall_res
CCN_URI_DEFAULT_ESCAPE	include/ccn/uri.h	44;"	d
CCN_URI_DEFINED	include/ccn/uri.h	23;"	d
CCN_URI_ESCAPE_MASK	include/ccn/uri.h	42;"	d
CCN_URI_INCLUDESCHEME	include/ccn/uri.h	38;"	d
CCN_URI_MIXEDESCAPE	include/ccn/uri.h	39;"	d
CCN_URI_PERCENTESCAPE	include/ccn/uri.h	40;"	d
CCN_VERSION_TIMEOUT	lib/ccn_fetch.c	48;"	d	file:
CCN_V_EST	include/ccn/ccn.h	1037;"	d
CCN_V_HIGH	include/ccn/ccn.h	1036;"	d
CCN_V_HIGHEST	include/ccn/ccn.h	1039;"	d
CCN_V_LOW	include/ccn/ccn.h	1035;"	d
CCN_V_LOWEST	include/ccn/ccn.h	1038;"	d
CCN_V_NESTOK	include/ccn/ccn.h	1043;"	d
CCN_V_NEXT	include/ccn/ccn.h	1040;"	d
CCN_V_NOW	include/ccn/ccn.h	1042;"	d
CCN_V_PREV	include/ccn/ccn.h	1041;"	d
CCN_V_REPLACE	include/ccn/ccn.h	1034;"	d
CCN_V_SCOPE0	include/ccn/ccn.h	1044;"	d
CCN_V_SCOPE1	include/ccn/ccn.h	1045;"	d
CCN_V_SCOPE2	include/ccn/ccn.h	1046;"	d
CDIRFLAGS	ccnr/dir.mk	/^CDIRFLAGS = -I..$/;"	m
CFLAGS	Makefile	/^CFLAGS = $(COPT)$/;"	m
CHECKHTE	lib/hashtb.c	39;"	d	file:
CHKPTR	ccnr/ccnr_store.c	1576;"	d	file:
CHKPTR	ccnr/ccnr_store.c	95;"	d	file:
CHKPTR	lib/ccnbtreetest.c	43;"	d	file:
CHKPTR	lib/nametreetest.c	40;"	d	file:
CHKRES	ccnr/ccnr_store.c	1575;"	d	file:
CHKRES	ccnr/ccnr_store.c	94;"	d	file:
CHKRES	cmd/ccnbasicconfig.c	49;"	d	file:
CHKSYS	ccnr/ccnr_store.c	1574;"	d	file:
CHKSYS	ccnr/ccnr_store.c	93;"	d	file:
CHKSYS	lib/ccnbtreetest.c	42;"	d	file:
CHKSYS	lib/nametreetest.c	39;"	d	file:
CHUNK_SIZE	cmd/ccncatchunks.c	64;"	d	file:
CINCFLAGS	subr.mk	/^CINCFLAGS = -I..\/include $(CDIRFLAGS)$/;"	m
COPT	conf/pickygcc.mk	/^COPT = -O$/;"	m
COUNT	lib/signbenchtest.c	31;"	d	file:
CPREFLAGS	conf/Darwin-8.11.0.mk	/^CPREFLAGS = -I\/opt\/local\/include$/;"	m
CPREFLAGS	conf/FreeBSD.mk	/^CPREFLAGS = -I\/usr\/local\/include$/;"	m
CPREFLAGS	conf/Linux.mk	/^CPREFLAGS= -D_REENTRANT$/;"	m
CPREFLAGS	conf/NetBSD.mk	/^CPREFLAGS = -I\/usr\/pkg\/include$/;"	m
CPREFLAGS	conf/SunOS-5.10.mk	/^CPREFLAGS = -I\/usr\/local\/ssl\/include -I\/usr\/sfw\/include$/;"	m
CPREFLAGS	conf/SunOS-5.11.mk	/^CPREFLAGS = -I\/usr\/local\/ssl\/include -I\/usr\/sfw\/include$/;"	m
CPREFLAGS	conf/SunOS.mk	/^CPREFLAGS = -I\/usr\/sfw\/include$/;"	m
CRLF	ccnd/ccnd_stats.c	47;"	d	file:
CRLF	ccnd/ccndsmoketest.c	44;"	d	file:
CRLF	ccnr/ccnr_stats.c	53;"	d	file:
CSRC	ccnd/dir.mk	/^CSRC = ccnd_main.c ccnd.c ccnd_msg.c ccnd_stats.c ccnd_internal_client.c ccndsmoketest.c$/;"	m
CSRC	ccnr/dir.mk	/^CSRC = ccnr_dispatch.c ccnr_forwarding.c ccnr_init.c ccnr_internal_client.c ccnr_io.c ccnr_link.c ccnr_main.c ccnr_match.c ccnr_msg.c ccnr_net.c ccnr_proto.c ccnr_sendq.c ccnr_stats.c ccnr_store.c ccnr_sync.c ccnr_util.c$/;"	m
CSRC	cmd/dir.mk	/^CSRC =  ccn_ccnbtoxml.c ccn_splitccnb.c ccn_xmltoccnb.c ccnbasicconfig.c \\$/;"	m
CSRC	lib/dir.mk	/^CSRC = \\$/;"	m
CSRC	libexec/dir.mk	/^CSRC = ccndc-log.c ccndc-main.c ccndc-srv.c ccndc.c udplink.c$/;"	m
CSRC	sync/dir.mk	/^CSRC = \\$/;"	m
CS_LIMIT	cmd/ccnc.c	58;"	d	file:
CTL	lib/lned.c	36;"	d	file:
CWARNFLAGS	conf/Darwin.mk	/^CWARNFLAGS = -Wall -Wpointer-arith -Wreturn-type -Wstrict-prototypes$/;"	m
CWARNFLAGS	conf/FreeBSD.mk	/^CWARNFLAGS = -Wall -Wpointer-arith -Wreturn-type -Wstrict-prototypes$/;"	m
CWARNFLAGS	conf/Linux.mk	/^CWARNFLAGS = -Wall -Wpointer-arith -Wreturn-type -Wstrict-prototypes$/;"	m
CWARNFLAGS	conf/OpenBSD.mk	/^CWARNFLAGS = -Wall -Wpointer-arith -Wreturn-type -Wstrict-prototypes$/;"	m
CWARNFLAGS	conf/pickygcc.mk	/^CWARNFLAGS = -Wall -Wswitch-enum -Wno-format-y2k -Wno-unused-parameter     \\$/;"	m
CacheEntryFetch	sync/UpdateSketch.c	/^CacheEntryFetch(struct SyncUpdateData *ud, struct SyncHashCacheEntry *ce) {$/;"	f
CallMe	lib/ccn_fetch.c	/^CallMe(struct ccn_closure *selfp,$/;"	f	file:
CheckDirectory	util/ccntestloop.sh	/^CheckDirectory () {$/;"	f
CheckHeldInterest	sync/SyncActions.c	/^CheckHeldInterest(struct SyncRootStruct *root, struct ccn_charbuf *cob)$/;"	f	file:
CheckLogLevel	util/ccntestloop.sh	/^CheckLogLevel () {$/;"	f
CheckTestout	util/ccntestloop.sh	/^CheckTestout () {$/;"	f
Cleanup	ccnd/testbasics	/^Cleanup () {$/;"	f
CloseUpdateCoding	sync/SyncActions.c	/^CloseUpdateCoding(struct SyncUpdateData *ud) {$/;"	f	file:
Commentize	lib/gen_enum_dtag	/^Commentize () {$/;"	f
CompareAction	sync/SyncActions.c	/^CompareAction(struct ccn_schedule *sched,$/;"	f	file:
D	lib/ccn_schedule.c	/^static int D(SARGS) { if (flags & CCN_SCHEDULE_CANCEL) return(0);$/;"	f	file:
DATA	lib/hashtb.c	36;"	d	file:
DATA_OFFSET	cmd/ccndumppcap.c	51;"	d	file:
DB	cmd/ccnc.c	138;"	d	file:
DEBRIS	ccnd/dir.mk	/^DEBRIS = anything.ccnb contentobjecthash.ccnb contentmishash.ccnb \\$/;"	m
DEBRIS	ccnr/dir.mk	/^DEBRIS = $/;"	m
DEBRIS	cmd/dir.mk	/^DEBRIS =$/;"	m
DEBRIS	lib/dir.mk	/^DEBRIS = ccn_verifysig _bt_* test.aeskeystore test.keystore$/;"	m
DEBRIS	libexec/dir.mk	/^DEBRIS = ccndc-inject$/;"	m
DEBRIS	sync/dir.mk	/^DEBRIS =$/;"	m
DEFAULT_CMD_TIMEOUT	sync/SyncTest.c	50;"	d	file:
DEFAULT_DEST_PORT	cmd/ccndumppcap.c	54;"	d	file:
DEFAULT_HASH_BYTES	sync/SyncMacros.h	27;"	d
DEFAULT_SRC_PORT	cmd/ccndumppcap.c	53;"	d	file:
DEPRECATED	include/ccn/ccn.h	47;"	d
DEPRECATED	include/ccn/ccn.h	49;"	d
DUPDIR	exttests/dir.mk	/^DUPDIR = stubs$/;"	m
DUPDIR	tests/dir.mk	/^DUPDIR = stubs$/;"	m
Defaults	util/ccntestloop.sh	/^Defaults () {$/;"	f
DeltaTime	cmd/ccn_fetch_test.c	/^DeltaTime(uint64_t mt1, uint64_t mt2) {$/;"	f	file:
DeltaTime	lib/ccn_fetch.c	/^DeltaTime(TimeMarker mt1, TimeMarker mt2) {$/;"	f	file:
Descendants	util/ccntestloop.sh	/^Descendants () { ($/;"	f
DiffTimes	util/ccntestloop.sh	/^DiffTimes () {$/;"	f
Dump	lib/hashtbtest.c	/^Dump(struct hashtb *h)$/;"	f	file:
ELEMENT	lib/ccn_indexbuf.c	25;"	d	file:
ENUMERATION_STATE_TICK_MICROSEC	ccnr/ccnr_proto.c	957;"	d	file:
ENUM_N_COBS	ccnr/ccnr_private.h	437;"	d
ES_ACTIVE	ccnr/ccnr_private.h	/^    ES_ACTIVE = 1,$/;"	e	enum:es_active_state
ES_ACTIVE_PENDING_INACTIVE	ccnr/ccnr_private.h	/^    ES_ACTIVE_PENDING_INACTIVE = 2$/;"	e	enum:es_active_state
ES_INACTIVE	ccnr/ccnr_private.h	/^    ES_INACTIVE = 0,$/;"	e	enum:es_active_state
ES_PENDING	ccnr/ccnr_private.h	/^    ES_PENDING = -1,$/;"	e	enum:es_active_state
EVP_PKEY_HMAC	include/ccn/openssl_ex.h	32;"	d
EVP_PKEY_get0	lib/ccn_signing.c	/^void *EVP_PKEY_get0(EVP_PKEY *pkey)$/;"	f
EXCLUDE_HIGH	cmd/ccnslurp.c	39;"	d	file:
EXCLUDE_HIGH	lib/ccn_traverse.c	48;"	d	file:
EXCLUDE_LOW	cmd/ccnslurp.c	38;"	d	file:
EXCLUDE_LOW	lib/ccn_traverse.c	47;"	d	file:
EXPATLIBS	cmd/dir.mk	/^EXPATLIBS = -lexpat$/;"	m
EXPATLIBS	lib/dir.mk	/^EXPATLIBS = -lexpat$/;"	m
EXPAT_PROGRAMS	cmd/dir.mk	/^EXPAT_PROGRAMS = ccn_xmltoccnb$/;"	m
Echo	util/ccntestloop.sh	/^Echo () {$/;"	f
ElemDone	cmd/ccn_fetch_test.c	/^ElemDone(TestElem e) {$/;"	f	file:
ExecSelf	util/ccntestloop.sh	/^ExecSelf () {$/;"	f
ExtractDeps	exttests/testdriver.sh	/^ExtractDeps () {$/;"	f
ExtractDeps	tests/testdriver.sh	/^ExtractDeps () {$/;"	f
FACESLOTBITS	ccnd/ccnd_private.h	170;"	d
FAILIF	ccnr/ccnr_store.c	1573;"	d	file:
FAILIF	ccnr/ccnr_store.c	92;"	d	file:
FAILIF	lib/ccnbtreetest.c	41;"	d	file:
FAILIF	lib/nametreetest.c	38;"	d	file:
FATAL	cmd/ccnc.c	135;"	d	file:
FF	lib/ccn_versioning.c	32;"	d	file:
FM_BYTI	ccnd/ccnd_private.h	/^    FM_BYTI,$/;"	e	enum:ccnd_face_meter_index
FM_BYTI	ccnr/ccnr_private.h	/^    FM_BYTI,$/;"	e	enum:ccnr_face_meter_index
FM_BYTO	ccnd/ccnd_private.h	/^    FM_BYTO,$/;"	e	enum:ccnd_face_meter_index
FM_BYTO	ccnr/ccnr_private.h	/^    FM_BYTO,$/;"	e	enum:ccnr_face_meter_index
FM_DATI	ccnd/ccnd_private.h	/^    FM_DATI,$/;"	e	enum:ccnd_face_meter_index
FM_DATI	ccnr/ccnr_private.h	/^    FM_DATI,$/;"	e	enum:ccnr_face_meter_index
FM_DATO	ccnd/ccnd_private.h	/^    FM_DATO,$/;"	e	enum:ccnd_face_meter_index
FM_DATO	ccnr/ccnr_private.h	/^    FM_DATO,$/;"	e	enum:ccnr_face_meter_index
FM_INTI	ccnd/ccnd_private.h	/^    FM_INTI,$/;"	e	enum:ccnd_face_meter_index
FM_INTI	ccnr/ccnr_private.h	/^    FM_INTI,$/;"	e	enum:ccnr_face_meter_index
FM_INTO	ccnd/ccnd_private.h	/^    FM_INTO,$/;"	e	enum:ccnd_face_meter_index
FM_INTO	ccnr/ccnr_private.h	/^    FM_INTO,$/;"	e	enum:ccnr_face_meter_index
FORCE_BINARY	cmd/ccn_ccnbtoxml.c	99;"	d	file:
FRESHNESS	lib/signbenchtest.c	30;"	d	file:
FW_NBUF	cmd/ccnfilewatch.c	95;"	d	file:
Fail	ccnd/testbasics	/^Fail () {$/;"	f
Fail	lib/ccn_initkeystore.sh	/^Fail () {$/;"	f
Fail	util/ccnrpolicyedit.sh	/^Fail () {$/;"	f
Fail	util/ccntestloop.sh	/^Fail () {$/;"	f
FailHook	util/ccntestloop.sh	/^FailHook () {$/;"	f
FindBufferForPosition	lib/ccn_fetch.c	/^FindBufferForPosition(struct ccn_fetch_stream *fs, intmax_t pos) {$/;"	f	file:
FindBufferForSeg	lib/ccn_fetch.c	/^FindBufferForSeg(struct ccn_fetch_stream *fs, seg_t seg) {$/;"	f	file:
FreeDeltas	sync/SyncActions.c	/^FreeDeltas(struct SyncRootDeltas *deltas) {$/;"	f	file:
FreeUpdateData	sync/SyncActions.c	/^FreeUpdateData(struct SyncUpdateData *ud) {$/;"	f	file:
GET_NEXT_TOKEN	libexec/ccndc.c	168;"	d	file:
GOT_HERE	ccnd/ccnd_internal_client.c	46;"	d	file:
GOT_HERE	cmd/ccncatchunks2.c	35;"	d	file:
GOT_HERE	lib/ccn_sockcreate.c	42;"	d	file:
GetConfiguration	util/ccntestloop.sh	/^GetConfiguration () {$/;"	f
GetCurrentTime	cmd/ccn_fetch_test.c	/^GetCurrentTime(void) {$/;"	f	file:
GetCurrentTimeUSecs	lib/ccn_fetch.c	/^GetCurrentTimeUSecs(void) {$/;"	f	file:
GetFinalSegment	lib/ccn_fetch.c	/^GetFinalSegment(struct ccn_upcall_info *info) {$/;"	f	file:
GetNumberFromInfo	lib/ccn_fetch.c	/^GetNumberFromInfo(const unsigned char *ccnb,$/;"	f	file:
GetTestNames	exttests/testdriver.sh	/^GetTestNames () {$/;"	f
GetTestNames	tests/testdriver.sh	/^GetTestNames () {$/;"	f
HSRC	ccnd/dir.mk	/^HSRC = ccnd_private.h$/;"	m
HSRC	ccnr/dir.mk	/^HSRC = ccnr_dispatch.h ccnr_forwarding.h ccnr_init.h ccnr_internal_client.h        \\$/;"	m
HSRC	libexec/dir.mk	/^HSRC = ccndc-log.h ccndc-srv.h ccndc.h$/;"	m
HSRC	sync/dir.mk	/^HSRC = IndexSorter.h SyncActions.h SyncBase.h SyncHashCache.h SyncMacros.h \\$/;"	m
HTTPVERSION	ccnd/ccndsmoketest.c	45;"	d	file:
HT_NEW_ENTRY	include/ccn/hashtb.h	118;"	d
HT_OLD_ENTRY	include/ccn/hashtb.h	117;"	d
HeartbeatAction	sync/SyncActions.c	/^HeartbeatAction(struct ccn_schedule *sched,$/;"	f	file:
HoldInterest	sync/SyncActions.c	/^HoldInterest(struct SyncRootStruct *root, struct ccn_upcall_info *info)$/;"	f	file:
INSTALL	conf/SunOS.mk	/^INSTALL = ginstall$/;"	m
INSTALLED_PROGRAMS	ccnd/dir.mk	/^INSTALLED_PROGRAMS = ccnd ccndsmoketest $/;"	m
INSTALLED_PROGRAMS	ccnr/dir.mk	/^INSTALLED_PROGRAMS = ccnr$/;"	m
INSTALLED_PROGRAMS	cmd/dir.mk	/^INSTALLED_PROGRAMS = \\$/;"	m
INSTALLED_PROGRAMS	libexec/dir.mk	/^INSTALLED_PROGRAMS = ccndc$/;"	m
INSTALLED_PROGRAMS	sync/dir.mk	/^INSTALLED_PROGRAMS = $/;"	m
INSTALLED_PROGRAMS	util/dir.mk	/^INSTALLED_PROGRAMS = $(PROGRAMS)$/;"	m
IP_ADDR_LENGTH	cmd/ccndumppcap.c	40;"	d	file:
IP_CHKSUM_OFFSET	cmd/ccndumppcap.c	43;"	d	file:
IP_DEST_ADDR_OFFSET	cmd/ccndumppcap.c	45;"	d	file:
IP_HDR_LENGTH	cmd/ccndumppcap.c	41;"	d	file:
IP_LENGTH_OFFSET	cmd/ccndumppcap.c	42;"	d	file:
IP_OFFSET	cmd/ccndumppcap.c	39;"	d	file:
IP_SRC_ADDR_OFFSET	cmd/ccndumppcap.c	44;"	d	file:
IV_SIZE	lib/ccn_aes_keystore.c	42;"	d	file:
IndexSorter_Add	sync/IndexSorter.c	/^IndexSorter_Add(IndexSorter_Base base, IndexSorter_Index x) {$/;"	f
IndexSorter_Base	sync/IndexSorter.h	/^typedef struct IndexSorter_Struct *IndexSorter_Base;$/;"	t	typeref:struct:IndexSorter_Struct
IndexSorter_Best	sync/IndexSorter.c	/^IndexSorter_Best(IndexSorter_Base base) {$/;"	f
IndexSorter_Free	sync/IndexSorter.c	/^IndexSorter_Free(IndexSorter_Base *basePtr) {$/;"	f
IndexSorter_Index	sync/IndexSorter.h	/^typedef uintmax_t IndexSorter_Index;$/;"	t
IndexSorter_New	sync/IndexSorter.c	/^IndexSorter_New(IndexSorter_Index lim, IndexSorter_Index empty) {$/;"	f
IndexSorter_Rem	sync/IndexSorter.c	/^IndexSorter_Rem(IndexSorter_Base base) {$/;"	f
IndexSorter_Reset	sync/IndexSorter.c	/^IndexSorter_Reset(IndexSorter_Base base) {$/;"	f
IndexSorter_Struct	sync/IndexSorter.h	/^struct IndexSorter_Struct {$/;"	s
IndexSorter_sorter	sync/IndexSorter.h	/^IndexSorter_sorter(IndexSorter_Base base,$/;"	t
InferPosition	lib/ccn_fetch.c	/^InferPosition(struct ccn_fetch_stream *fs, seg_t seg) {$/;"	f	file:
KEY	lib/hashtb.c	37;"	d	file:
L	cmd/ccn_ccnbtoxml.c	761;"	d	file:
LDLIBS	ccnd/dir.mk	/^LDLIBS = -L$(CCNLIBDIR) $(MORE_LDLIBS) -lccn$/;"	m
LDLIBS	ccnr/dir.mk	/^LDLIBS = -L$(CCNLIBDIR) -L$(SYNCLIBDIR) $(MORE_LDLIBS) -lccnsync -lccn$/;"	m
LDLIBS	cmd/dir.mk	/^LDLIBS = -L$(CCNLIBDIR) $(MORE_LDLIBS) -lccn$/;"	m
LDLIBS	lib/dir.mk	/^LDLIBS = -L$(CCNLIBDIR) $(MORE_LDLIBS) -lccn$/;"	m
LDLIBS	libexec/dir.mk	/^LDLIBS = -L$(CCNLIBDIR) $(MORE_LDLIBS) -lccn$/;"	m
LDLIBS	sync/dir.mk	/^LDLIBS = -L$(CCNLIBDIR) $(MORE_LDLIBS) -lccn -L. -lccnsync$/;"	m
LF_ADVISE	sync/sync_api.c	/^    LF_ADVISE,$/;"	e	enum:local_flags	file:
LF_NODE	sync/sync_api.c	/^    LF_NODE,$/;"	e	enum:local_flags	file:
LF_NULL	sync/sync_api.c	/^    LF_NULL,$/;"	e	enum:local_flags	file:
LF_OTHER	sync/sync_api.c	/^    LF_OTHER$/;"	e	enum:local_flags	file:
LIBS	lib/dir.mk	/^LIBS = libccn.a$/;"	m
LIBS	sync/dir.mk	/^LIBS = libccnsync.a$/;"	m
LIB_OBJS	lib/dir.mk	/^LIB_OBJS = \\$/;"	m
LIB_OBJS	sync/dir.mk	/^LIB_OBJS = IndexSorter.o SyncBase.o SyncHashCache.o SyncNode.o SyncRoot.o \\$/;"	m
LLC_LENGTH	cmd/ccndumppcap.c	38;"	d	file:
LM_128	ccnr/ccnr_private.h	160;"	d
LM_16	ccnr/ccnr_private.h	157;"	d
LM_2	ccnr/ccnr_private.h	154;"	d
LM_32	ccnr/ccnr_private.h	158;"	d
LM_4	ccnr/ccnr_private.h	155;"	d
LM_64	ccnr/ccnr_private.h	159;"	d
LM_8	ccnr/ccnr_private.h	156;"	d
LNED_DEFINED	include/ccn/lned.h	20;"	d
LOCAL_BUF_MAX	cmd/ccn_fetch_test.c	38;"	d	file:
LOCAL_CFLAGS	ccnd/Android.mk	/^LOCAL_CFLAGS := -g -DCCN_LOCAL_TCP$/;"	m
LOCAL_CFLAGS	ccnr/Android.mk	/^LOCAL_CFLAGS := -g$/;"	m
LOCAL_CFLAGS	lib/Android.mk	/^LOCAL_CFLAGS := -g$/;"	m
LOCAL_CFLAGS	sync/Android.mk	/^LOCAL_CFLAGS := -g$/;"	m
LOCAL_C_INCLUDES	ccnd/Android.mk	/^LOCAL_C_INCLUDES	:= $(LOCAL_PATH)$/;"	m
LOCAL_C_INCLUDES	ccnr/Android.mk	/^LOCAL_C_INCLUDES	:= $(LOCAL_PATH)$/;"	m
LOCAL_C_INCLUDES	lib/Android.mk	/^LOCAL_C_INCLUDES	:= $(LOCAL_PATH)$/;"	m
LOCAL_C_INCLUDES	sync/Android.mk	/^LOCAL_C_INCLUDES	:= $(LOCAL_PATH)$/;"	m
LOCAL_MODULE	ccnd/Android.mk	/^LOCAL_MODULE		:= libccnd$/;"	m
LOCAL_MODULE	ccnr/Android.mk	/^LOCAL_MODULE		:= libccnr$/;"	m
LOCAL_MODULE	lib/Android.mk	/^LOCAL_MODULE		:= libccnx$/;"	m
LOCAL_MODULE	sync/Android.mk	/^LOCAL_MODULE		:= libccnsync$/;"	m
LOCAL_MODULE_FILENAME	sync/Android.mk	/^LOCAL_MODULE_FILENAME := libccnsync$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	ccnd/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	ccnr/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	lib/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	sync/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SCOPE	lib/ccn_traverse.c	50;"	d	file:
LOCAL_SHARED_LIBRARIES	ccnd/Android.mk	/^LOCAL_SHARED_LIBRARIES :=$/;"	m
LOCAL_SHARED_LIBRARIES	ccnr/Android.mk	/^LOCAL_SHARED_LIBRARIES :=$/;"	m
LOCAL_SHARED_LIBRARIES	lib/Android.mk	/^LOCAL_SHARED_LIBRARIES :=$/;"	m
LOCAL_SHARED_LIBRARIES	sync/Android.mk	/^LOCAL_SHARED_LIBRARIES :=$/;"	m
LOCAL_SRC_FILES	ccnd/Android.mk	/^LOCAL_SRC_FILES := $(CCNDSRC)$/;"	m
LOCAL_SRC_FILES	ccnr/Android.mk	/^LOCAL_SRC_FILES := $(CCNRSRC)$/;"	m
LOCAL_SRC_FILES	lib/Android.mk	/^LOCAL_SRC_FILES := $(CCNLIBSRC)$/;"	m
LOCAL_SRC_FILES	sync/Android.mk	/^LOCAL_SRC_FILES := $(SYNCSRC)$/;"	m
LOCAL_STATIC_LIBRARIES	ccnd/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrypto libccnx$/;"	m
LOCAL_STATIC_LIBRARIES	ccnr/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrypto libccnx$/;"	m
LOCAL_STATIC_LIBRARIES	lib/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrypto libssl$/;"	m
LOCAL_STATIC_LIBRARIES	sync/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrypto libccnx$/;"	m
LOGGIT	lib/ccn_sockcreate.c	41;"	d	file:
LastRunNumber	util/ccntestloop.sh	/^LastRunNumber () {$/;"	f
LimitCPU	util/ccntestloop.sh	/^LimitCPU () {$/;"	f
M	sync/SyncActions.c	3953;"	d	file:
M	sync/SyncActions.c	42;"	d	file:
MAKE	conf/SunOS.mk	/^MAKE = gmake$/;"	m
MAKEF	Makefile	/^MAKEF =  -f ..\/conf.mk -f dir.mk -f ..\/subr.mk -f depend.mk$/;"	m
MARKHTE	lib/hashtb.c	40;"	d	file:
MAXFACES	ccnd/ccnd_private.h	171;"	d
MAXLEN	lib/siphash24.c	212;"	d	file:
MAX_DATA_SIZE	lib/ccn_seqwriter.c	29;"	d	file:
MAX_ENUMERATORS	lib/hashtb.c	165;"	d	file:
MAX_HASH_BYTES	sync/SyncMacros.h	28;"	d
MAX_NAME_BYTES	sync/SyncMacros.h	29;"	d
MAX_NREFS	sync/SyncMacros.h	30;"	d
MAX_PACKET	cmd/ccndumppcap.c	52;"	d	file:
MAX_READ_LEN	sync/SyncTest.c	49;"	d	file:
MAX_TERM_WIDTH	lib/lned.c	35;"	d	file:
MINI_STORE_LIMIT	cmd/ccnlibtest.c	60;"	d	file:
MIN_NODE_BYTES	lib/ccn_btree.c	66;"	d	file:
MOAN	lib/ccn_verifysig.c	33;"	d	file:
MORECOMPS_MASK	ccnd/ccnd_internal_client.c	953;"	d	file:
MORECOMPS_MASK	ccnr/ccnr_internal_client.h	39;"	d
MORE_LDLIBS	conf/CYGWIN_NT-5.1.mk	/^MORE_LDLIBS=..\/contrib\/getaddrinfo\/getaddrinfo.o$/;"	m
MORE_LDLIBS	conf/CYGWIN_NT-6.0.mk	/^MORE_LDLIBS=..\/contrib\/getaddrinfo\/getaddrinfo.o$/;"	m
MORE_LDLIBS	conf/CYGWIN_NT-6.1-WOW64.mk	/^MORE_LDLIBS=$/;"	m
MORE_LDLIBS	conf/Darwin-8.11.0.mk	/^MORE_LDLIBS = -L\/opt\/local\/lib$/;"	m
MORE_LDLIBS	conf/FreeBSD.mk	/^MORE_LDLIBS = -L\/usr\/local\/lib -R\/usr\/local\/lib$/;"	m
MORE_LDLIBS	conf/NetBSD.mk	/^MORE_LDLIBS = -L\/usr\/pkg\/lib -R\/usr\/pkg\/lib$/;"	m
MORE_LDLIBS	conf/SunOS-5.10.mk	/^MORE_LDLIBS = -L\/usr\/local\/ssl\/lib -R\/usr\/local\/ssl\/lib -L\/usr\/sfw\/lib -R\/usr\/local\/ssl\/lib -lmtmalloc -lnsl -lsocket$/;"	m
MORE_LDLIBS	conf/SunOS-5.11.mk	/^MORE_LDLIBS = -L\/usr\/local\/ssl\/lib -R\/usr\/local\/ssl\/lib -L\/usr\/sfw\/lib -R\/usr\/local\/ssl\/lib -lmtmalloc -lnsl -lsocket$/;"	m
MORE_LDLIBS	conf/SunOS.mk	/^MORE_LDLIBS = -lmtmalloc -lnsl -lsocket -L\/usr\/sfw\/lib -R\/usr\/sfw\/lib$/;"	m
MP_info	include/ccn/merklepathasn1.h	/^} MP_info;$/;"	t	typeref:struct:MP_info_st
MP_info_st	include/ccn/merklepathasn1.h	/^typedef struct MP_info_st {$/;"	s
MSG	lib/ccn_btree.c	1100;"	d	file:
MSG	lib/ccn_btree.c	1597;"	d	file:
MSG	lib/ccn_btree.c	1744;"	d	file:
MSG	lib/ccn_btree.c	649;"	d	file:
MUST_VERIFY	ccnd/ccnd_internal_client.c	954;"	d	file:
MUST_VERIFY	ccnr/ccnr_internal_client.h	40;"	d
MUST_VERIFY	cmd/ccnls.c	38;"	d	file:
MUST_VERIFY	lib/ccn_traverse.c	49;"	d	file:
MUST_VERIFY1	ccnd/ccnd_internal_client.c	955;"	d	file:
MUST_VERIFY1	ccnr/ccnr_internal_client.h	41;"	d
MYFETCH	lib/ccn_btree.c	38;"	d	file:
MYFETCH	lib/ccn_btree_content.c	28;"	d	file:
MYFETCH64	lib/ccn_btree_content.c	36;"	d	file:
MYSTORE	lib/ccn_btree.c	52;"	d	file:
MYSTORE	lib/ccn_btree_content.c	32;"	d	file:
MYSTORE64	lib/ccn_btree_content.c	50;"	d	file:
MakeNodeFromNames	sync/SyncActions.c	/^MakeNodeFromNames(struct SyncUpdateData *ud, int split) {$/;"	f	file:
MaxSuffixDefault	lib/ccn_fetch.c	50;"	d	file:
MilliSleep	cmd/ccn_fetch_test.c	/^MilliSleep(uint64_t n) {$/;"	f	file:
MinMilliSleep	cmd/ccn_fetch_test.c	69;"	d	file:
Moan	lib/ccn_verifysig.c	/^Moan(int line) {$/;"	f
MyAlloc	cmd/ccn_fetch_test.c	82;"	d	file:
MyCharbuf	cmd/ccn_fetch_test.c	/^typedef struct ccn_charbuf *MyCharbuf;$/;"	t	typeref:struct:ccn_charbuf	file:
MyParms	cmd/ccn_fetch_test.c	/^struct MyParms {$/;"	s	file:
NAMETREE_PVT_PAYLOAD_OWNED	lib/ccn_nametree.c	28;"	d	file:
NAME_BE	ccnr/ccnr_proto.h	31;"	d
NEED_OPENSSL_1_0_COMPAT	include/ccn/openssl_ex.h	33;"	d
NEW_ANY	sync/SyncMacros.h	32;"	d
NEW_STRUCT	sync/SyncMacros.h	33;"	d
NL	ccnd/ccnd_stats.c	48;"	d	file:
NL	ccnr/ccnr_stats.c	54;"	d	file:
NOTE_ERR	lib/ccn_client.c	122;"	d	file:
NOTE_ERRNO	lib/ccn_client.c	123;"	d	file:
NS_MAXDNAME	libexec/ccndc-srv.c	47;"	d	file:
NS_MAXMSG	libexec/ccndc-srv.c	42;"	d	file:
N_POOLS	cmd/ccnlibtest.c	59;"	d	file:
Name	lib/ccn_buf_decoder.c	/^    int Name;$/;"	m	struct:parsed_KeyName	file:
NeedSegment	lib/ccn_fetch.c	/^NeedSegment(struct ccn_fetch_stream *fs, seg_t seg) {$/;"	f	file:
NeedSegments	lib/ccn_fetch.c	/^NeedSegments(struct ccn_fetch_stream *fs) {$/;"	f	file:
NewBufferForSeg	lib/ccn_fetch.c	/^NewBufferForSeg(struct ccn_fetch_stream *fs, seg_t seg, size_t len) {$/;"	f	file:
NewDeltas	sync/SyncActions.c	/^NewDeltas(struct SyncRootStruct *root) {$/;"	f	file:
NewElem	cmd/ccn_fetch_test.c	/^NewElem(struct MyParms *p) {$/;"	f	file:
NoteTimes	util/ccntestloop.sh	/^NoteTimes () {$/;"	f
OBJTREE	Makefile	/^OBJTREE = build$/;"	m
ON_ERROR_CLEANUP	libexec/ccndc.c	52;"	d	file:
ON_ERROR_EXIT	libexec/ccndc.c	66;"	d	file:
ON_NULL_CLEANUP	libexec/ccndc.c	59;"	d	file:
OPENSSL_CFLAGS	conf/Darwin-9.8.0.mk	/^OPENSSL_CFLAGS = -I\/opt\/local\/include$/;"	m
OPENSSL_CFLAGS	conf/OpenSSL.mk	/^OPENSSL_CFLAGS = -I$(OPENSSL_PREFIX)\/include$/;"	m
OPENSSL_LIBS	conf/Darwin-9.8.0.mk	/^OPENSSL_LIBS = -L\/opt\/local\/lib$/;"	m
OPENSSL_LIBS	conf/OpenSSL.mk	/^OPENSSL_LIBS = -R$(OPENSSL_PREFIX)\/lib -L$(OPENSSL_PREFIX)\/lib$/;"	m
OPENSSL_PREFIX	conf/OpenSSL.mk	/^OPENSSL_PREFIX = ~\/PARC\/openssl\/openssl-0.9.8x$/;"	m
OPER_MASK	ccnd/ccnd_internal_client.c	956;"	d	file:
OPER_MASK	ccnr/ccnr_internal_client.h	42;"	d
OP_ADJACENCY	ccnd/ccnd_internal_client.c	965;"	d	file:
OP_DESTROYFACE	ccnd/ccnd_internal_client.c	959;"	d	file:
OP_DESTROYFACE	ccnr/ccnr_internal_client.h	45;"	d
OP_GUEST	ccnd/ccnd_internal_client.c	966;"	d	file:
OP_NEWFACE	ccnd/ccnd_internal_client.c	958;"	d	file:
OP_NEWFACE	ccnr/ccnr_internal_client.h	44;"	d
OP_NOTICE	ccnd/ccnd_internal_client.c	963;"	d	file:
OP_NOTICE	ccnr/ccnr_internal_client.h	49;"	d
OP_PING	ccnd/ccnd_internal_client.c	957;"	d	file:
OP_PING	ccnr/ccnr_internal_client.h	43;"	d
OP_PREFIXREG	ccnd/ccnd_internal_client.c	960;"	d	file:
OP_PREFIXREG	ccnr/ccnr_internal_client.h	46;"	d
OP_REG	libexec/ccndc-srv.c	55;"	d	file:
OP_SELFREG	ccnd/ccnd_internal_client.c	961;"	d	file:
OP_SELFREG	ccnr/ccnr_internal_client.h	47;"	d
OP_SERVICE	ccnd/ccnd_internal_client.c	964;"	d	file:
OP_SERVICE	ccnr/ccnr_internal_client.h	50;"	d
OP_UNREG	ccnd/ccnd_internal_client.c	962;"	d	file:
OP_UNREG	ccnr/ccnr_internal_client.h	48;"	d
OP_UNREG	libexec/ccndc-srv.c	56;"	d	file:
PASSWORD	lib/signbenchtest.c	34;"	d	file:
PAYLOAD_SIZE	lib/signbenchtest.c	32;"	d	file:
PCAP_PROGRAMS	conf/CYGWIN_NT-5.1.mk	/^PCAP_PROGRAMS=$/;"	m
PCAP_PROGRAMS	conf/CYGWIN_NT-6.0.mk	/^PCAP_PROGRAMS=$/;"	m
PCAP_PROGRAMS	conf/CYGWIN_NT-6.1-WOW64.mk	/^PCAP_PROGRAMS=$/;"	m
PIPELIMIT	cmd/ccncatchunks2.c	33;"	d	file:
PIT_LIMIT	cmd/ccnc.c	49;"	d	file:
PLATCFLAGS	conf/CYGWIN_NT-5.1.mk	/^PLATCFLAGS=-DNEED_GETADDRINFO_COMPAT -Wl,--enable-auto-import -I..\/contrib\/getaddrinfo$/;"	m
PLATCFLAGS	conf/CYGWIN_NT-6.0.mk	/^PLATCFLAGS=-DNEED_GETADDRINFO_COMPAT -Wl,--enable-auto-import -I..\/contrib\/getaddrinfo$/;"	m
PLATCFLAGS	conf/CYGWIN_NT-6.1-WOW64.mk	/^PLATCFLAGS=$/;"	m
PLATCFLAGS	conf/Darwin.mk	/^PLATCFLAGS=-fno-common$/;"	m
PLATCFLAGS	conf/FreeBSD.mk	/^PLATCFLAGS=-fPIC$/;"	m
PLATCFLAGS	conf/Linux.mk	/^PLATCFLAGS=-fPIC$/;"	m
PLATCFLAGS	conf/NetBSD.mk	/^PLATCFLAGS=-fPIC$/;"	m
PLATCFLAGS	conf/OpenBSD.mk	/^PLATCFLAGS=-fPIC$/;"	m
PREFER_HEX	cmd/ccn_ccnbtoxml.c	100;"	d	file:
PROGRAMS	ccnd/dir.mk	/^PROGRAMS = $(INSTALLED_PROGRAMS)$/;"	m
PROGRAMS	ccnr/dir.mk	/^PROGRAMS = $(INSTALLED_PROGRAMS)$/;"	m
PROGRAMS	cmd/dir.mk	/^PROGRAMS = $(INSTALLED_PROGRAMS) \\$/;"	m
PROGRAMS	lib/dir.mk	/^PROGRAMS = hashtbtest skel_decode_test \\$/;"	m
PROGRAMS	libexec/dir.mk	/^PROGRAMS = $(INSTALLED_PROGRAMS) udplink$/;"	m
PROGRAMS	sync/dir.mk	/^PROGRAMS = $(INSTALLED_PROGRAMS) \\$/;"	m
PROGRAMS	util/dir.mk	/^PROGRAMS = ccndstart ccndstop ccndstatus ccntestloop ccndlogging ccnget ccnput \\$/;"	m
PUBLIC	ccnr/ccnr_private.h	472;"	d
PrintDetails	util/ccntestloop.sh	/^PrintDetails () {$/;"	f
PrintTimesForRun	util/ccntestloop.sh	/^PrintTimesForRun () { ($/;"	f
ProvideDefault	configure	/^ProvideDefault () {$/;"	f
PruneOldLogs	util/ccntestloop.sh	/^PruneOldLogs () {$/;"	f
PruneSegments	lib/ccn_fetch.c	/^PruneSegments(struct ccn_fetch_stream *fs) {$/;"	f	file:
PublisherID	lib/ccn_buf_decoder.c	/^    int PublisherID;$/;"	m	struct:parsed_KeyName	file:
REAL_CFLAGS	subr.mk	/^REAL_CFLAGS = $(COPT) $(CWARNFLAGS) $(CINCFLAGS) $(CPREFLAGS) $(PLATCFLAGS)$/;"	m
REPO_AF	ccnr/ccnr_proto.h	30;"	d
REPO_SW	ccnr/ccnr_proto.h	28;"	d
REPO_SWC	ccnr/ccnr_proto.h	29;"	d
RESOLV_LIBS	conf/FreeBSD.mk	/^RESOLV_LIBS=$/;"	m
RESOLV_LIBS	conf/NetBSD.mk	/^RESOLV_LIBS=$/;"	m
RESOLV_LIBS	conf/OpenBSD.mk	/^RESOLV_LIBS=$/;"	m
ROTL	lib/siphash24.c	21;"	d	file:
Rebuild	util/ccntestloop.sh	/^Rebuild () {$/;"	f
RemRootDeltas	sync/SyncActions.c	/^RemRootDeltas(struct SyncRootStruct *root, struct SyncRootDeltas *deltas) {$/;"	f	file:
RemSegRequest	lib/ccn_fetch.c	/^RemSegRequest(struct ccn_fetch_stream *fs, struct localClosure *req) {$/;"	f	file:
RemovePIDFile	util/ccntestloop.sh	/^RemovePIDFile () {$/;"	f
ReprocessHeldInterest	sync/SyncActions.c	/^ReprocessHeldInterest(struct SyncRootStruct *root)$/;"	f	file:
RunATest	exttests/testdriver.sh	/^RunATest () {$/;"	f
RunATest	tests/testdriver.sh	/^RunATest () {$/;"	f
RunCTest	util/ccntestloop.sh	/^RunCTest () {$/;"	f
RunJavaTest	util/ccntestloop.sh	/^RunJavaTest () {$/;"	f
RunTest	util/ccntestloop.sh	/^RunTest () {$/;"	f
SARGS	lib/ccn_schedule.c	359;"	d	file:
SCRIPTSRC	ccnd/dir.mk	/^SCRIPTSRC = testbasics fortunes.ccnb contentobjecthash.ref anything.ref \\$/;"	m
SCRIPTSRC	ccnr/dir.mk	/^SCRIPTSRC = $/;"	m
SCRIPTSRC	cmd/dir.mk	/^SCRIPTSRC = ccn_initkeystore.sh$/;"	m
SCRIPTSRC	exttests/dir.mk	/^SCRIPTSRC = testdriver.sh functions preamble settings make_clean.sh $(ALLTESTS)$/;"	m
SCRIPTSRC	sync/dir.mk	/^SCRIPTSRC = $/;"	m
SCRIPTSRC	tests/dir.mk	/^SCRIPTSRC = testdriver.sh functions preamble settings $(ALLTESTS)$/;"	m
SCRIPTSRC	util/dir.mk	/^SCRIPTSRC = shebang \\$/;"	m
SCR_after	sync/SyncNode.h	/^    SCR_after,$/;"	e	enum:SyncCompareResult
SCR_before	sync/SyncNode.h	/^    SCR_before,$/;"	e	enum:SyncCompareResult
SCR_error	sync/SyncNode.h	/^    SCR_error$/;"	e	enum:SyncCompareResult
SCR_inside	sync/SyncNode.h	/^    SCR_inside,$/;"	e	enum:SyncCompareResult
SCR_max	sync/SyncNode.h	/^    SCR_max,$/;"	e	enum:SyncCompareResult
SCR_min	sync/SyncNode.h	/^    SCR_min,$/;"	e	enum:SyncCompareResult
SCR_missing	sync/SyncNode.h	/^    SCR_missing,$/;"	e	enum:SyncCompareResult
SELF	generic.mk	/^	SELF=`basename \\`pwd\\``; (cd .. && $(MAKE) SUBDIRS=$$SELF $@)$/;"	m
SET_ERR	sync/SyncUtil.c	45;"	d	file:
SET_SYNC_ERR	sync/SyncMacros.h	35;"	d
SHARED_LD_FLAGS	conf/Darwin.mk	/^SHARED_LD_FLAGS = -dylib -arch `\/usr\/bin\/arch` -install_name $(SHLIBNAME) $(OPENSSL_LIBS) -all_load \/usr\/lib\/dylib1.o -lcrypto -lSystem$/;"	m
SHARED_LD_FLAGS	conf/FreeBSD.mk	/^SHARED_LD_FLAGS= -shared -whole-archive -soname=$(SHLIBNAME) -lc$/;"	m
SHARED_LD_FLAGS	conf/Linux.mk	/^SHARED_LD_FLAGS = -shared --whole-archive -soname=$(SHLIBNAME) -lc$/;"	m
SHARED_LD_FLAGS	conf/NetBSD.mk	/^SHARED_LD_FLAGS= -shared -whole-archive -soname=$(SHLIBNAME) -lc$/;"	m
SHARED_LD_FLAGS	conf/OpenBSD.mk	/^SHARED_LD_FLAGS = -shared --whole-archive -soname=$(SHLIBNAME) -lc$/;"	m
SHARED_LD_FLAGS	conf/SunOS.mk	/^SHARED_LD_FLAGS = -G -z allextract$/;"	m
SHEXT	conf/Darwin.mk	/^SHEXT=dylib$/;"	m
SHEXT	conf/FreeBSD.mk	/^SHEXT=so$/;"	m
SHEXT	conf/Linux.mk	/^SHEXT=so$/;"	m
SHEXT	conf/NetBSD.mk	/^SHEXT=so$/;"	m
SHEXT	conf/OpenBSD.mk	/^SHEXT=so$/;"	m
SHEXT	conf/SunOS.mk	/^SHEXT = so$/;"	m
SHLIBDEPS	conf/Darwin.mk	/^SHLIBDEPS=\/usr\/lib\/dylib1.o$/;"	m
SHLIBDEPS	conf/FreeBSD.mk	/^SHLIBDEPS=$/;"	m
SHLIBDEPS	conf/Linux.mk	/^SHLIBDEPS=$/;"	m
SHLIBDEPS	conf/NetBSD.mk	/^SHLIBDEPS=$/;"	m
SHLIBDEPS	conf/OpenBSD.mk	/^SHLIBDEPS=$/;"	m
SHLIBDEPS	conf/SunOS.mk	/^SHLIBDEPS=$/;"	m
SHLIBNAME	conf/Darwin.mk	/^SHLIBNAME=libccn.1.$(SHEXT)$/;"	m
SHLIBNAME	conf/FreeBSD.mk	/^SHLIBNAME=libccn.$(SHEXT).1$/;"	m
SHLIBNAME	conf/Linux.mk	/^SHLIBNAME=libccn.$(SHEXT).1$/;"	m
SHLIBNAME	conf/NetBSD.mk	/^SHLIBNAME=libccn.$(SHEXT).1$/;"	m
SHLIBNAME	conf/OpenBSD.mk	/^SHLIBNAME=libccn.$(SHEXT).1$/;"	m
SHLIBNAME	conf/SunOS.mk	/^SHLIBNAME=libccn.$(SHEXT).1$/;"	m
SHOW_HEX_STATE	lib/skel_decode_test.c	43;"	d	file:
SIPROUND	lib/siphash24.c	41;"	d	file:
SLICE_VERSION	include/ccn/sync.h	30;"	d
SLICE_VERSION	sync/SyncMacros.h	25;"	d
SRI_Kind_AdviseInt	sync/SyncActions.h	/^    SRI_Kind_AdviseInt,  \/**< root advise handler *\/$/;"	e	enum:SyncRegisterActionKind
SRI_Kind_Content	sync/SyncActions.h	/^    SRI_Kind_Content     \/**< general content *\/$/;"	e	enum:SyncRegisterActionKind
SRI_Kind_FetchInt	sync/SyncActions.h	/^    SRI_Kind_FetchInt,   \/**< node fetch handler *\/$/;"	e	enum:SyncRegisterActionKind
SRI_Kind_NodeFetch	sync/SyncActions.h	/^    SRI_Kind_NodeFetch,  \/**< node fetch request *\/$/;"	e	enum:SyncRegisterActionKind
SRI_Kind_None	sync/SyncActions.h	/^    SRI_Kind_None,$/;"	e	enum:SyncRegisterActionKind
SRI_Kind_RootAdvise	sync/SyncActions.h	/^    SRI_Kind_RootAdvise, \/**< root advise request *\/$/;"	e	enum:SyncRegisterActionKind
SRI_Kind_RootStats	sync/SyncActions.h	/^    SRI_Kind_RootStats,  \/**< root stats request *\/$/;"	e	enum:SyncRegisterActionKind
SUBDIRS	Makefile	/^SUBDIRS = lib ccnd sync ccnr libexec cmd util tests exttests$/;"	m
SYNCLIBDIR	ccnr/dir.mk	/^SYNCLIBDIR = ..\/sync$/;"	m
SYNCLIBS	cmd/dir.mk	/^SYNCLIBS = -L..\/sync -lccnsync$/;"	m
SYNCOBJ	sync/Android.mk	/^SYNCOBJ := IndexSorter.o SyncActions.o SyncBase.o SyncHashCache.o SyncNode.o SyncRoot.o SyncTreeWorker.o SyncUtil.o SyncTest.o sync_diff.o sync_api.o$/;"	m
SYNCSRC	sync/Android.mk	/^SYNCSRC := $(SYNCOBJ:.o=.c)$/;"	m
SYNC_BAD_CMP	sync/SyncUtil.h	115;"	d
SYNC_UPDATE_VERSION	sync/SyncActions.c	62;"	d	file:
SYNC_VERSION	sync/SyncMacros.h	24;"	d
SaveLogs	util/ccntestloop.sh	/^SaveLogs () {$/;"	f
ScriptChanged	util/ccntestloop.sh	/^ScriptChanged () {$/;"	f
SendDeltasReply	sync/SyncActions.c	/^SendDeltasReply(struct SyncRootStruct *root, struct SyncRootDeltas *deltas) {$/;"	f	file:
SetExitCode	exttests/testdriver.sh	/^SetExitCode () {$/;"	f
SetExitCode	tests/testdriver.sh	/^SetExitCode () {$/;"	f
SetPIDFile	util/ccntestloop.sh	/^SetPIDFile () {$/;"	f
ShowDelta	lib/ccn_fetch.c	/^ShowDelta(FILE *f, TimeMarker from) {$/;"	f	file:
SourcesChanged	util/ccntestloop.sh	/^SourcesChanged () {$/;"	f
StartBackground	util/ccntestloop.sh	/^StartBackground () {$/;"	f
StatsLine	sync/SyncActions.c	415;"	d	file:
StatsLine	sync/SyncActions.c	528;"	d	file:
Status	util/ccntestloop.sh	/^Status () {$/;"	f
StopBackground	util/ccntestloop.sh	/^StopBackground () {$/;"	f
StuffPreload	util/ccndstart.sh	/^StuffPreload () {$/;"	f
SyncAccumHash	sync/SyncUtil.c	/^SyncAccumHash(struct SyncLongHashStruct *hp, const struct ccn_charbuf *cb) {$/;"	f
SyncAccumHashInner	sync/SyncUtil.c	/^SyncAccumHashInner(struct SyncLongHashStruct *hp,$/;"	f
SyncAccumHashRaw	sync/SyncUtil.c	/^SyncAccumHashRaw(struct SyncLongHashStruct *hp,$/;"	f
SyncAccumNode	sync/SyncUtil.c	/^SyncAccumNode(struct SyncNodeAccum *na, struct SyncNodeComposite *nc) {$/;"	f
SyncActionData	sync/SyncActions.h	/^struct SyncActionData {$/;"	s
SyncActionState	sync/SyncActions.h	/^enum SyncActionState {$/;"	g
SyncActionState_done	sync/SyncActions.h	/^    SyncActionState_done$/;"	e	enum:SyncActionState
SyncActionState_error	sync/SyncActions.h	/^    SyncActionState_error,$/;"	e	enum:SyncActionState
SyncActionState_init	sync/SyncActions.h	/^    SyncActionState_init,$/;"	e	enum:SyncActionState
SyncActionState_loose	sync/SyncActions.h	/^    SyncActionState_loose,$/;"	e	enum:SyncActionState
SyncActionState_sent	sync/SyncActions.h	/^    SyncActionState_sent,$/;"	e	enum:SyncActionState
SyncAddName	sync/SyncUtil.c	/^SyncAddName(struct SyncBaseStruct *base,$/;"	f
SyncAddRoot	sync/SyncRoot.c	/^SyncAddRoot(struct SyncBaseStruct *base,$/;"	f
SyncAllocComposite	sync/SyncNode.c	/^SyncAllocComposite(struct SyncBaseStruct *base) {$/;"	f
SyncAllocNameAccum	sync/SyncUtil.c	/^SyncAllocNameAccum(int lim) {$/;"	f
SyncAllocNodeAccum	sync/SyncUtil.c	/^SyncAllocNodeAccum(int lim) {$/;"	f
SyncAppendAllComponents	sync/SyncUtil.c	/^SyncAppendAllComponents(struct ccn_charbuf *dst,$/;"	f
SyncAppendElement	sync/SyncUtil.c	/^SyncAppendElement(struct ccn_charbuf *dst, const struct ccn_charbuf *src) {$/;"	f
SyncAppendElementInner	sync/SyncUtil.c	/^SyncAppendElementInner(struct ccn_charbuf *cb, struct ccn_buf_decoder *d) {$/;"	f
SyncAppendRandomBytes	sync/SyncUtil.c	/^SyncAppendRandomBytes(struct ccn_charbuf *cb, int n) {$/;"	f
SyncAppendRandomHash	sync/SyncUtil.c	/^SyncAppendRandomHash(struct ccn_charbuf *cb, int n) {$/;"	f
SyncAppendRandomName	sync/SyncUtil.c	/^SyncAppendRandomName(struct ccn_charbuf *cb, int nComp, int maxCompLen) {$/;"	f
SyncAppendTaggedNumber	sync/SyncUtil.c	/^SyncAppendTaggedNumber(struct ccn_charbuf *cb,$/;"	f
SyncBaseStruct	sync/SyncBase.h	/^struct SyncBaseStruct {$/;"	s
SyncCacheEntryFetch	sync/SyncHashCache.c	/^SyncCacheEntryFetch(struct SyncHashCacheEntry *ce) {$/;"	f
SyncCacheEntryStore	sync/SyncHashCache.c	/^SyncCacheEntryStore(struct SyncHashCacheEntry *ce) {$/;"	f
SyncCheckCompErr	sync/SyncNode.c	/^SyncCheckCompErr(struct SyncNodeComposite *nc) {$/;"	f
SyncCheckDecodeErr	sync/SyncUtil.c	/^SyncCheckDecodeErr(struct ccn_buf_decoder *d) {$/;"	f
SyncClearErr	sync/SyncBase.c	/^SyncClearErr(struct SyncBaseStruct *base) {$/;"	f
SyncCmpHashesRaw	sync/SyncUtil.c	/^SyncCmpHashesRaw(const unsigned char * xp, ssize_t xs,$/;"	f
SyncCmpNames	sync/SyncUtil.c	/^SyncCmpNames(const struct ccn_charbuf *cbx, const struct ccn_charbuf *cby) {$/;"	f
SyncCmpNamesInner	sync/SyncUtil.c	/^SyncCmpNamesInner(struct ccn_buf_decoder *xx, struct ccn_buf_decoder *yy) {$/;"	f
SyncCompareData	sync/SyncActions.c	/^struct SyncCompareData {$/;"	s	file:
SyncCompareHash	sync/SyncUtil.c	/^SyncCompareHash(struct ccn_charbuf *hashX, struct ccn_charbuf *hashY) {$/;"	f
SyncCompareResult	sync/SyncNode.h	/^enum SyncCompareResult {$/;"	g
SyncCompareState	sync/SyncActions.c	/^enum SyncCompareState {$/;"	g	file:
SyncCompare_busy	sync/SyncActions.c	/^    SyncCompare_busy,$/;"	e	enum:SyncCompareState	file:
SyncCompare_done	sync/SyncActions.c	/^    SyncCompare_done$/;"	e	enum:SyncCompareState	file:
SyncCompare_init	sync/SyncActions.c	/^    SyncCompare_init,$/;"	e	enum:SyncCompareState	file:
SyncCompare_preload	sync/SyncActions.c	/^    SyncCompare_preload,$/;"	e	enum:SyncCompareState	file:
SyncCompare_waiting	sync/SyncActions.c	/^    SyncCompare_waiting,$/;"	e	enum:SyncCompareState	file:
SyncComponentCount	sync/SyncUtil.c	/^SyncComponentCount(const struct ccn_charbuf *name) {$/;"	f
SyncComponentMatch	sync/SyncUtil.c	/^SyncComponentMatch(const struct ccn_charbuf *x,$/;"	f
SyncConstructCommandPrefix	sync/SyncUtil.c	/^SyncConstructCommandPrefix(struct SyncRootStruct *root, char *marker) {$/;"	f
SyncCopyName	sync/SyncUtil.c	/^SyncCopyName(const struct ccn_charbuf *name) {$/;"	f
SyncCurrentTime	sync/SyncUtil.c	/^SyncCurrentTime(void) {$/;"	f
SyncDecodeHexDigit	sync/SyncUtil.c	/^SyncDecodeHexDigit(char c) {$/;"	f
SyncDecodeUriChar	sync/SyncUtil.c	/^SyncDecodeUriChar(char c) {$/;"	f
SyncDeltaTime	sync/SyncUtil.c	/^SyncDeltaTime(int64_t mt1, int64_t mt2) {$/;"	f
SyncElemKind	sync/SyncNode.h	/^} SyncElemKind;$/;"	t	typeref:enum:__anon2
SyncElemKind_leaf	sync/SyncNode.h	/^    SyncElemKind_leaf = 1   \/**< leaf *\/$/;"	e	enum:__anon2
SyncElemKind_node	sync/SyncNode.h	/^    SyncElemKind_node = 0,  \/**< node *\/$/;"	e	enum:__anon2
SyncEndComposite	sync/SyncNode.c	/^SyncEndComposite(struct SyncNodeComposite *nc) {$/;"	f
SyncErrCode	sync/SyncBase.h	/^enum SyncErrCode {$/;"	g
SyncErrCode_bug	sync/SyncBase.h	/^    SyncErrCode_bug = 1,        \/\/ internal bug$/;"	e	enum:SyncErrCode
SyncErrCode_caller	sync/SyncBase.h	/^    SyncErrCode_caller = 2      \/\/ caller error (bad args, wrong state, ...)$/;"	e	enum:SyncErrCode
SyncErrCode_none	sync/SyncBase.h	/^    SyncErrCode_none = 0,       \/\/ no error$/;"	e	enum:SyncErrCode
SyncErrStruct	sync/SyncBase.h	/^struct SyncErrStruct {$/;"	s
SyncExclusionsFromHashList	sync/SyncUtil.c	/^SyncExclusionsFromHashList(struct SyncRootStruct *root,$/;"	f
SyncExtendComposite	sync/SyncNode.c	/^SyncExtendComposite(struct SyncNodeComposite *nc,$/;"	f
SyncExtractName	sync/SyncUtil.c	/^SyncExtractName(struct ccn_buf_decoder *d) {$/;"	f
SyncFindAction	sync/SyncActions.c	/^SyncFindAction(struct SyncRootStruct *root, enum SyncRegisterActionKind kind) {$/;"	f	file:
SyncFreeBase	sync/SyncBase.c	/^SyncFreeBase(struct SyncBaseStruct **bp) {$/;"	f	file:
SyncFreeBase	sync/SyncTest.c	/^SyncFreeBase(struct SyncBaseStruct *base) {$/;"	f	file:
SyncFreeComposite	sync/SyncNode.c	/^SyncFreeComposite(struct SyncNodeComposite *nc) {$/;"	f
SyncFreeNameAccum	sync/SyncUtil.c	/^SyncFreeNameAccum(struct SyncNameAccum *na) {$/;"	f
SyncFreeNameAccumAndNames	sync/SyncUtil.c	/^SyncFreeNameAccumAndNames(struct SyncNameAccum *na) {$/;"	f
SyncFreeNodeAccum	sync/SyncUtil.c	/^SyncFreeNodeAccum(struct SyncNodeAccum *na) {$/;"	f
SyncGenInterest	sync/SyncUtil.c	/^SyncGenInterest(struct ccn_charbuf *name,$/;"	f
SyncGetComponentPtr	sync/SyncUtil.c	/^SyncGetComponentPtr(const struct ccn_charbuf *src, int comp,$/;"	f
SyncGetHashPtr	sync/SyncUtil.c	/^SyncGetHashPtr(const struct ccn_buf_decoder *hd,$/;"	f
SyncHandleSlice	sync/SyncActions.c	/^SyncHandleSlice(struct SyncBaseStruct *base, struct ccn_charbuf *name) {$/;"	f	file:
SyncHashCacheCreate	sync/SyncHashCache.c	/^SyncHashCacheCreate(struct SyncRootStruct *root, uint32_t mod) {$/;"	f
SyncHashCacheEntry	sync/SyncHashCache.h	/^struct SyncHashCacheEntry {$/;"	s
SyncHashCacheFree	sync/SyncHashCache.c	/^SyncHashCacheFree(struct SyncHashCacheHead *head) {$/;"	f
SyncHashCacheHead	sync/SyncHashCache.h	/^struct SyncHashCacheHead {$/;"	s
SyncHashClearMarks	sync/SyncHashCache.c	/^SyncHashClearMarks(struct SyncHashCacheHead *head) {$/;"	f
SyncHashEnter	sync/SyncHashCache.c	/^SyncHashEnter(struct SyncHashCacheHead *head,$/;"	f
SyncHashInfoList	sync/SyncUtil.h	/^struct SyncHashInfoList {$/;"	s
SyncHashLookup	sync/SyncHashCache.c	/^SyncHashLookup(struct SyncHashCacheHead *head,$/;"	f
SyncHashRemoveEntry	sync/SyncHashCache.c	/^SyncHashRemoveEntry(struct SyncHashCacheHead *head,$/;"	f
SyncHashState	sync/SyncHashCache.h	/^enum SyncHashState {$/;"	g
SyncHashState_covered	sync/SyncHashCache.h	/^    SyncHashState_covered = 8,   \/**< remote hash known covered by the local root *\/$/;"	e	enum:SyncHashState
SyncHashState_fetching	sync/SyncHashCache.h	/^    SyncHashState_fetching = 4,  \/**< remote node is being fetched *\/$/;"	e	enum:SyncHashState
SyncHashState_local	sync/SyncHashCache.h	/^    SyncHashState_local = 1,     \/**< a local node exists *\/$/;"	e	enum:SyncHashState
SyncHashState_marked	sync/SyncHashCache.h	/^    SyncHashState_marked = 64    \/**< cache entry has been marked *\/$/;"	e	enum:SyncHashState
SyncHashState_null	sync/SyncHashCache.h	/^    SyncHashState_null = 0,      \/**< empty, not much known *\/$/;"	e	enum:SyncHashState
SyncHashState_remote	sync/SyncHashCache.h	/^    SyncHashState_remote = 2,    \/**< a remote hash has been seen *\/$/;"	e	enum:SyncHashState
SyncHashState_stored	sync/SyncHashCache.h	/^    SyncHashState_stored = 32,   \/**< local node has been stored *\/$/;"	e	enum:SyncHashState
SyncHashState_storing	sync/SyncHashCache.h	/^    SyncHashState_storing = 16,  \/**< local node is queued to be stored *\/$/;"	e	enum:SyncHashState
SyncHexStr	sync/SyncUtil.c	/^SyncHexStr(const unsigned char *cp, size_t sz) {$/;"	f
SyncInitDecoderFromCharbuf	sync/SyncUtil.c	/^SyncInitDecoderFromCharbuf(struct ccn_buf_decoder *d,$/;"	f
SyncInitDecoderFromCharbufRange	sync/SyncUtil.c	/^SyncInitDecoderFromCharbufRange(struct ccn_buf_decoder *d,$/;"	f
SyncInitDecoderFromElem	sync/SyncNode.c	/^SyncInitDecoderFromElem(struct ccn_buf_decoder *d,$/;"	f
SyncInitDecoderFromOffset	sync/SyncNode.c	/^SyncInitDecoderFromOffset(struct ccn_buf_decoder *d,$/;"	f
SyncInterestArrived	sync/SyncActions.c	/^SyncInterestArrived(struct ccn_closure *selfp,$/;"	f	file:
SyncIsName	sync/SyncUtil.c	/^SyncIsName(const struct ccn_charbuf *cb) {$/;"	f
SyncLocalRepoFetch	sync/SyncUtil.c	/^SyncLocalRepoFetch(struct SyncBaseStruct *base,$/;"	f
SyncLocalRepoStore	sync/SyncUtil.c	/^SyncLocalRepoStore(struct SyncBaseStruct *base,$/;"	f
SyncLongHashStruct	sync/SyncNode.h	/^struct SyncLongHashStruct {$/;"	s
SyncLongHashToBuf	sync/SyncUtil.c	/^SyncLongHashToBuf(const struct SyncLongHashStruct *hp) {$/;"	f
SyncMethodsList	sync/SyncPrivate.h	/^struct SyncMethodsList {$/;"	s
SyncNameAccum	sync/SyncUtil.h	/^struct SyncNameAccum {$/;"	s
SyncNameAccumAppend	sync/SyncUtil.c	/^SyncNameAccumAppend(struct SyncNameAccum *na,$/;"	f
SyncNameAccumCanon	sync/SyncUtil.c	/^SyncNameAccumCanon(struct SyncNameAccum *na,$/;"	f
SyncNameAccumEntry	sync/SyncUtil.h	/^struct SyncNameAccumEntry {$/;"	s
SyncNameAccumList	sync/SyncUtil.h	/^struct SyncNameAccumList {$/;"	s
SyncNameAccumSorter	sync/SyncUtil.c	/^SyncNameAccumSorter(IndexSorter_Base base,$/;"	f
SyncNameForIndexbuf	sync/SyncUtil.c	/^SyncNameForIndexbuf(const unsigned char *buf, struct ccn_indexbuf *comps) {$/;"	f
SyncNameForLocalNode	sync/SyncUtil.c	/^SyncNameForLocalNode(struct SyncRootStruct *root, struct ccn_charbuf *hash) {$/;"	f
SyncNewBase	sync/SyncBase.c	/^SyncNewBase(struct sync_plumbing *sd) {$/;"	f
SyncNewBaseForActions	sync/SyncActions.c	/^SyncNewBaseForActions(struct sync_plumbing *sd) {$/;"	f
SyncNodeAccum	sync/SyncUtil.h	/^struct SyncNodeAccum {$/;"	s
SyncNodeAddName	sync/SyncNode.c	/^SyncNodeAddName(struct SyncNodeComposite *nc,$/;"	f
SyncNodeAddNode	sync/SyncNode.c	/^SyncNodeAddNode(struct SyncNodeComposite *nc,$/;"	f
SyncNodeAppendLongHash	sync/SyncNode.c	/^SyncNodeAppendLongHash(struct ccn_charbuf *cb, struct SyncNodeComposite *nc) {$/;"	f
SyncNodeCompareLeaf	sync/SyncNode.c	/^SyncNodeCompareLeaf(struct SyncNodeComposite *nc,$/;"	f
SyncNodeCompareMinMax	sync/SyncNode.c	/^SyncNodeCompareMinMax(struct SyncNodeComposite *nc, struct ccn_charbuf *name) {$/;"	f
SyncNodeComposite	sync/SyncNode.h	/^struct SyncNodeComposite {$/;"	s
SyncNodeDecRC	sync/SyncNode.c	/^SyncNodeDecRC(struct SyncNodeComposite *nc) {$/;"	f
SyncNodeElem	sync/SyncNode.h	/^struct SyncNodeElem {$/;"	s
SyncNodeFromBytes	sync/SyncNode.c	/^SyncNodeFromBytes(struct SyncRootStruct *root, const unsigned char *cp, size_t cs) {$/;"	f
SyncNodeFromInfo	sync/SyncNode.c	/^SyncNodeFromInfo(struct SyncRootStruct *root,$/;"	f
SyncNodeFromParsedObject	sync/SyncNode.c	/^SyncNodeFromParsedObject(struct SyncRootStruct *root,$/;"	f
SyncNodeIncRC	sync/SyncNode.c	/^SyncNodeIncRC(struct SyncNodeComposite *nc) {$/;"	f
SyncNodeKind	sync/SyncNode.h	/^} SyncNodeKind;$/;"	t	typeref:enum:__anon1
SyncNodeKind_mark	sync/SyncNode.h	/^    SyncNodeKind_mark = 1   \/**< mark bit (TBD) *\/$/;"	e	enum:__anon1
SyncNodeKind_zero	sync/SyncNode.h	/^    SyncNodeKind_zero = 0,  \/**< no bits set *\/$/;"	e	enum:__anon1
SyncNodeMaintainMinMax	sync/SyncNode.c	/^SyncNodeMaintainMinMax(struct SyncNodeComposite *nc,$/;"	f
SyncNoteErr	sync/SyncUtil.c	/^SyncNoteErr(const char *msg) {$/;"	f
SyncNoteFailed	sync/SyncUtil.c	/^SyncNoteFailed(struct SyncRootStruct *root, char *where, char *why, int line) {$/;"	f
SyncNoteHash	sync/SyncUtil.c	/^SyncNoteHash(struct SyncHashInfoList *head, struct SyncHashCacheEntry *ce) {$/;"	f
SyncNoteSimple	sync/SyncUtil.c	/^SyncNoteSimple(struct SyncRootStruct *root, char *where, char *s1) {$/;"	f
SyncNoteSimple2	sync/SyncUtil.c	/^SyncNoteSimple2(struct SyncRootStruct *root, char *where, char *s1, char *s2) {$/;"	f
SyncNoteSimple3	sync/SyncUtil.c	/^SyncNoteSimple3(struct SyncRootStruct *root, char *where, char *s1, char *s2, char *s3) {$/;"	f
SyncNoteUri	sync/SyncUtil.c	/^SyncNoteUri(struct SyncRootStruct *root, char *where, char *why, struct ccn_charbuf *name) {$/;"	f
SyncNoteUriBase	sync/SyncUtil.c	/^SyncNoteUriBase(struct SyncBaseStruct *base, char *where, char *why, struct ccn_charbuf *name) {$/;"	f
SyncParseComposite	sync/SyncNode.c	/^SyncParseComposite(struct SyncNodeComposite *nc, struct ccn_buf_decoder *d) {$/;"	f
SyncParseHash	sync/SyncUtil.c	/^SyncParseHash(struct ccn_buf_decoder *d) {$/;"	f
SyncParseName	sync/SyncUtil.c	/^SyncParseName(struct ccn_buf_decoder *d) {$/;"	f
SyncParseUnsigned	sync/SyncUtil.c	/^SyncParseUnsigned(struct ccn_buf_decoder *d, enum ccn_dtag dtag) {$/;"	f
SyncPatternMatch	sync/SyncUtil.c	/^SyncPatternMatch(const struct ccn_charbuf *pattern,$/;"	f
SyncPointerToContent	sync/SyncUtil.c	/^SyncPointerToContent(struct ccn_charbuf *cb, struct ccn_parsed_ContentObject *pco,$/;"	f
SyncPrefixMatch	sync/SyncUtil.c	/^SyncPrefixMatch(const struct ccn_charbuf *prefix,$/;"	f
SyncPrivate	sync/SyncPrivate.h	/^struct SyncPrivate {$/;"	s
SyncRegisterActionKind	sync/SyncActions.h	/^enum SyncRegisterActionKind {$/;"	g
SyncRegisterInterest	sync/SyncActions.c	/^SyncRegisterInterest(struct SyncRootStruct *root,$/;"	f	file:
SyncRegisterInterests	sync/SyncActions.c	/^SyncRegisterInterests(struct SyncRootStruct *root) {$/;"	f	file:
SyncRemRoot	sync/SyncRoot.c	/^SyncRemRoot(struct SyncRootStruct *root) {$/;"	f
SyncRemoteFetchResponse	sync/SyncActions.c	/^SyncRemoteFetchResponse(struct ccn_closure *selfp,$/;"	f	file:
SyncResetComposite	sync/SyncNode.c	/^SyncResetComposite(struct SyncNodeComposite *nc) {$/;"	f
SyncRootAdviseResponse	sync/SyncActions.c	/^SyncRootAdviseResponse(struct ccn_closure *selfp,$/;"	f	file:
SyncRootAppendSlice	sync/SyncRoot.c	/^SyncRootAppendSlice(struct ccn_charbuf *cb, struct SyncRootStruct *root) {$/;"	f
SyncRootDecodeAndAdd	sync/SyncRoot.c	/^SyncRootDecodeAndAdd(struct SyncBaseStruct *base,$/;"	f
SyncRootDeltas	sync/SyncPrivate.h	/^struct SyncRootDeltas {$/;"	s
SyncRootLookupCode	sync/SyncRoot.h	/^enum SyncRootLookupCode {$/;"	g
SyncRootLookupCode_covered	sync/SyncRoot.h	/^    SyncRootLookupCode_covered,     \/**< covered by this root *\/$/;"	e	enum:SyncRootLookupCode
SyncRootLookupCode_error	sync/SyncRoot.h	/^    SyncRootLookupCode_error        \/**< error in the name or the state *\/$/;"	e	enum:SyncRootLookupCode
SyncRootLookupCode_none	sync/SyncRoot.h	/^    SyncRootLookupCode_none,        \/**< not covered by this root *\/$/;"	e	enum:SyncRootLookupCode
SyncRootLookupName	sync/SyncRoot.c	/^SyncRootLookupName(struct SyncRootStruct *root,$/;"	f
SyncRootPrivate	sync/SyncPrivate.h	/^struct SyncRootPrivate {$/;"	s
SyncRootStats	sync/SyncPrivate.h	/^struct SyncRootStats {$/;"	s
SyncRootStruct	sync/SyncRoot.h	/^struct SyncRootStruct {$/;"	s
SyncRootTopEntry	sync/SyncRoot.c	/^SyncRootTopEntry(struct SyncRootStruct *root) {$/;"	f
SyncSendRootAdviseInterest	sync/SyncActions.c	/^SyncSendRootAdviseInterest(struct SyncRootStruct *root) {$/;"	f	file:
SyncSetCompErr	sync/SyncNode.c	/^SyncSetCompErr(struct SyncNodeComposite *nc, int val) {$/;"	f
SyncSetDecodeErr	sync/SyncUtil.c	/^SyncSetDecodeErr(struct ccn_buf_decoder *d, int val) {$/;"	f
SyncSetErrInner	sync/SyncBase.c	/^SyncSetErrInner(struct SyncBaseStruct *base,$/;"	f
SyncSignBuf	sync/SyncUtil.c	/^SyncSignBuf(struct SyncBaseStruct *base,$/;"	f
SyncSmallHash	sync/SyncUtil.c	/^SyncSmallHash(const unsigned char * xp, ssize_t xs) {$/;"	f
SyncSortNames	sync/SyncUtil.c	/^SyncSortNames(struct SyncRootStruct *root, struct SyncNameAccum *src) {$/;"	f
SyncStartCompareAction	sync/SyncActions.c	/^SyncStartCompareAction(struct SyncRootStruct *root, struct ccn_charbuf *hashR) {$/;"	f	file:
SyncStartContentFetch	sync/SyncActions.c	/^SyncStartContentFetch(struct SyncRootStruct *root,$/;"	f	file:
SyncStartHeartbeat	sync/SyncActions.c	/^SyncStartHeartbeat(struct SyncBaseStruct *base) {$/;"	f
SyncStartNodeFetch	sync/SyncActions.c	/^SyncStartNodeFetch(struct SyncRootStruct *root,$/;"	f	file:
SyncStartSliceEnum	sync/SyncActions.c	/^SyncStartSliceEnum(struct SyncRootStruct *root) {$/;"	f	file:
SyncTestParms	sync/SyncTest.c	/^struct SyncTestParms {$/;"	s	file:
SyncTest_OBJ	sync/dir.mk	/^SyncTest_OBJ = SyncTest.o$/;"	m
SyncTreeGenerateNames	sync/SyncTreeWorker.c	/^SyncTreeGenerateNames(struct SyncTreeWorkerHead *head,$/;"	f
SyncTreeLookupName	sync/SyncTreeWorker.c	/^SyncTreeLookupName(struct SyncTreeWorkerHead *head,$/;"	f
SyncTreeMarkReachable	sync/SyncTreeWorker.c	/^SyncTreeMarkReachable(struct SyncTreeWorkerHead *head, int minLevel) {$/;"	f
SyncTreeMergeNames	sync/SyncActions.c	/^SyncTreeMergeNames(struct SyncTreeWorkerHead *head,$/;"	f	file:
SyncTreeWorkerCreate	sync/SyncTreeWorker.c	/^SyncTreeWorkerCreate(struct SyncHashCacheHead *cache,$/;"	f
SyncTreeWorkerEntry	sync/SyncTreeWorker.h	/^struct SyncTreeWorkerEntry {$/;"	s
SyncTreeWorkerFree	sync/SyncTreeWorker.c	/^SyncTreeWorkerFree(struct SyncTreeWorkerHead *head) {$/;"	f
SyncTreeWorkerGetElem	sync/SyncTreeWorker.c	/^SyncTreeWorkerGetElem(struct SyncTreeWorkerHead *head) {$/;"	f
SyncTreeWorkerHead	sync/SyncTreeWorker.h	/^struct SyncTreeWorkerHead {$/;"	s
SyncTreeWorkerInit	sync/SyncTreeWorker.c	/^SyncTreeWorkerInit(struct SyncTreeWorkerHead *head,$/;"	f
SyncTreeWorkerPop	sync/SyncTreeWorker.c	/^SyncTreeWorkerPop(struct SyncTreeWorkerHead *head) {$/;"	f
SyncTreeWorkerPush	sync/SyncTreeWorker.c	/^SyncTreeWorkerPush(struct SyncTreeWorkerHead *head) {$/;"	f
SyncTreeWorkerReset	sync/SyncTreeWorker.c	/^SyncTreeWorkerReset(struct SyncTreeWorkerHead *head, int level) {$/;"	f
SyncTreeWorkerState	sync/SyncTreeWorker.h	/^enum SyncTreeWorkerState {$/;"	g
SyncTreeWorkerState_error	sync/SyncTreeWorker.h	/^    SyncTreeWorkerState_error$/;"	e	enum:SyncTreeWorkerState
SyncTreeWorkerState_fetching	sync/SyncTreeWorker.h	/^    SyncTreeWorkerState_fetching,$/;"	e	enum:SyncTreeWorkerState
SyncTreeWorkerState_init	sync/SyncTreeWorker.h	/^    SyncTreeWorkerState_init,$/;"	e	enum:SyncTreeWorkerState
SyncTreeWorkerState_needFetch	sync/SyncTreeWorker.h	/^    SyncTreeWorkerState_needFetch,$/;"	e	enum:SyncTreeWorkerState
SyncTreeWorkerTop	sync/SyncTreeWorker.c	/^SyncTreeWorkerTop(struct SyncTreeWorkerHead *head) {$/;"	f
SyncUpdateData	sync/SyncActions.c	/^struct SyncUpdateData {$/;"	s	file:
SyncUpdateRoot	sync/SyncActions.c	/^SyncUpdateRoot(struct SyncRootStruct *root) {$/;"	f	file:
SyncUpdateState	sync/SyncActions.c	/^enum SyncUpdateState {$/;"	g	file:
SyncUpdate_busy	sync/SyncActions.c	/^    SyncUpdate_busy,$/;"	e	enum:SyncUpdateState	file:
SyncUpdate_done	sync/SyncActions.c	/^    SyncUpdate_done$/;"	e	enum:SyncUpdateState	file:
SyncUpdate_error	sync/SyncActions.c	/^    SyncUpdate_error,$/;"	e	enum:SyncUpdateState	file:
SyncUpdate_init	sync/SyncActions.c	/^    SyncUpdate_init,$/;"	e	enum:SyncUpdateState	file:
SyncUpdate_inserted	sync/SyncActions.c	/^    SyncUpdate_inserted,$/;"	e	enum:SyncUpdateState	file:
SyncUriForName	sync/SyncUtil.c	/^SyncUriForName(struct ccn_charbuf *name) {$/;"	f
SyncWriteComposite	sync/SyncNode.c	/^SyncWriteComposite(struct SyncNodeComposite *nc, FILE *f) {$/;"	f
TESTS	exttests/dir.mk	/^TESTS = $(ALLTESTS)$/;"	m
TESTS	tests/dir.mk	/^TESTS = $(ALLTESTS)$/;"	m
TESTSCHEDULE	lib/ccn_schedule.c	/^int TESTSCHEDULE(int argc, char **argv)$/;"	f
THIS_CANNOT_HAPPEN	lib/ccn_client.c	125;"	d	file:
TOSS_WHITE	cmd/ccn_xmltoccnb.c	391;"	d	file:
TYPICAL_NONCE_SIZE	ccnd/ccnd_private.h	338;"	d
T_SRV	libexec/ccndc-srv.c	52;"	d	file:
TestBusy	exttests/testdriver.sh	/^TestBusy () {$/;"	f
TestBusy	tests/testdriver.sh	/^TestBusy () {$/;"	f
TestElem	cmd/ccn_fetch_test.c	/^typedef struct TestElemStruct *TestElem;$/;"	t	typeref:struct:TestElemStruct	file:
TestElemStruct	cmd/ccn_fetch_test.c	/^struct TestElemStruct {$/;"	s	file:
ThisRunNumber	util/ccntestloop.sh	/^ThisRunNumber () {$/;"	f
TimeMarker	lib/ccn_fetch.c	/^typedef uint64_t TimeMarker;$/;"	t	file:
TryAppend	configure	/^TryAppend () {$/;"	f
TryNodeSplit	sync/SyncActions.c	/^TryNodeSplit(struct SyncUpdateData *ud) {$/;"	f	file:
TryScript	configure	/^TryScript () {$/;"	f
U32TO8_LE	lib/siphash24.c	23;"	d	file:
U64TO8_LE	lib/siphash24.c	27;"	d	file:
U8TO64_LE	lib/siphash24.c	31;"	d	file:
UDP_CHKSUM_OFFSET	cmd/ccndumppcap.c	50;"	d	file:
UDP_HDR_LENGTH	cmd/ccndumppcap.c	48;"	d	file:
UDP_LENGTH_OFFSET	cmd/ccndumppcap.c	49;"	d	file:
UDP_OFFSET	cmd/ccndumppcap.c	47;"	d	file:
USAGE	cmd/ccnc.c	31;"	d	file:
USAGE	cmd/ccnlibtest.c	177;"	d	file:
USAGE	cmd/ccnsnew.c	29;"	d	file:
UpdateAction	sync/SyncActions.c	/^UpdateAction(struct ccn_schedule *sched,$/;"	f	file:
UpdateAddName	sync/UpdateSketch.c	/^UpdateAddName(struct SyncUpdateData *ud, struct ccn_charbuf *name) {$/;"	f
UpdateSources	util/ccntestloop.sh	/^UpdateSources () {$/;"	f
Usage	util/ccndlogging.sh	/^Usage () {$/;"	f
Usage	util/ccndstatus.sh	/^Usage () {$/;"	f
Usage	util/ccntestloop.sh	/^Usage () {$/;"	f
UseLocalTopoPrefix	sync/SyncUtil.c	1262;"	d	file:
VERBOSE_DECODE	cmd/ccn_ccnbtoxml.c	101;"	d	file:
VER_LIMIT	cmd/ccnc.c	60;"	d	file:
WTHZ	ccnd/ccnd.c	164;"	d	file:
XML	lib/ccn_coding.c	27;"	d	file:
XXX	lib/ccn_client.c	128;"	d	file:
a	ccnr/ccnr_private.h	/^typedef struct ccnr_accession_rep {unsigned a; unsigned b;} ccnr_accession;$/;"	m	struct:ccnr_accession_rep
a	lib/ccn_client.c	/^    struct multifilt_item *a;   \/**< The filters that are to be combined *\/$/;"	m	struct:multifilt	typeref:struct:multifilt::multifilt_item	file:
abortCompare	sync/SyncActions.c	/^abortCompare(struct SyncCompareData *data, char *why) {$/;"	f	file:
abortCompare	sync/sync_diff.c	/^abortCompare(struct sync_diff_data *sdd, char *why) {$/;"	f	file:
accept_connection	ccnd/ccnd.c	/^accept_connection(struct ccnd_handle *h, int listener_fd)$/;"	f	file:
accession	ccnd/ccnd_private.h	/^    ccn_cookie accession;       \/**< for associated nametree entry *\/$/;"	m	struct:content_entry
accession	ccnr/ccnr_store.c	/^    ccnr_accession accession;   \/**< permanent repository id *\/$/;"	m	struct:content_entry	file:
accessioned	ccnd/ccnd_private.h	/^    unsigned long accessioned;$/;"	m	struct:ccnd_handle
accum	cmd/ccn_fetch_test.c	/^	intmax_t accum;$/;"	m	struct:TestElemStruct	file:
accum	sync/SyncUtil.h	/^    struct SyncNameAccum *accum;$/;"	m	struct:SyncNameAccumList	typeref:struct:SyncNameAccumList::SyncNameAccum
actim	include/ccn/btree_content.h	/^    unsigned char actim[6];     \/**< Accession time, Timestamp format *\/$/;"	m	struct:ccn_btree_content_payload
action	include/ccn/face_mgmt.h	/^    const char *action;$/;"	m	struct:ccn_face_instance
action	include/ccn/reg_mgmt.h	/^    const char *action;$/;"	m	struct:ccn_forwarding_entry
action	include/ccn/schedule.h	/^    ccn_scheduled_action action;$/;"	m	struct:ccn_scheduled_event
action	lib/ccn_client.c	/^    struct ccn_closure *action;  \/* handler for incoming content *\/$/;"	m	struct:expressed_interest	typeref:struct:expressed_interest::ccn_closure	file:
action	lib/ccn_client.c	/^    struct ccn_closure *action;$/;"	m	struct:interest_filter	typeref:struct:interest_filter::ccn_closure	file:
action	lib/ccn_client.c	/^    struct ccn_closure *action;$/;"	m	struct:multifilt_item	typeref:struct:multifilt_item::ccn_closure	file:
action	lib/ccn_client.c	/^    struct ccn_closure action;$/;"	m	struct:ccn_reg_closure	typeref:struct:ccn_reg_closure::ccn_closure	file:
action	sync/sync_diff.h	/^    struct ccn_closure *action;$/;"	m	struct:sync_diff_fetch_data	typeref:struct:sync_diff_fetch_data::ccn_closure
actions	sync/SyncRoot.h	/^    void *actions;                        \/**< data for pending interests *\/$/;"	m	struct:SyncRootStruct
active	ccnr/ccnr_private.h	/^    enum es_active_state active;$/;"	m	struct:enum_state	typeref:enum:enum_state::es_active_state
active_enum	ccnr/ccnr_private.h	/^    ccnr_accession active_enum[CCNR_MAX_ENUM]; \/**< active sync enumerations *\/$/;"	m	struct:ccnr_handle
active_in_fd	ccnr/ccnr_private.h	/^    int active_in_fd;               \/**< data currently being indexed *\/$/;"	m	struct:ccnr_handle
active_out_fd	ccnr/ccnr_private.h	/^    int active_out_fd;              \/**< repo file we will write to *\/$/;"	m	struct:ccnr_handle
activity	include/ccn/btree.h	/^    unsigned activity;          \/**< Meters use of the node *\/$/;"	m	struct:ccn_btree_node
add	sync/sync_diff.h	/^    int (* add)(struct sync_diff_add_closure *ac,$/;"	m	struct:sync_diff_add_closure
addNameFromCompare	sync/SyncActions.c	/^addNameFromCompare(struct SyncCompareData *data) {$/;"	f	file:
addNameFromCompare	sync/sync_diff.c	/^addNameFromCompare(struct sync_diff_data *sdd) {$/;"	f	file:
addNodeFetch	sync/sync_diff.c	/^addNodeFetch(struct sync_diff_data *sdd,$/;"	f	file:
add_accum	sync/sync_api.c	/^    int64_t add_accum;$/;"	m	struct:ccns_handle	file:
add_cert_extension	lib/ccn_keystore.c	/^add_cert_extension(X509 *cert, int nid, char *value)$/;"	f	file:
add_cert_extension_with_context	lib/ccn_keystore.c	/^add_cert_extension_with_context(X509 *cert, int nid, char *value)$/;"	f	file:
add_closure	sync/sync_diff.h	/^    struct sync_diff_add_closure *add_closure;$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::sync_diff_add_closure
add_cob_exclusion	cmd/ccnc.c	/^add_cob_exclusion(struct ccnxchat_state *st, struct ccn_charbuf *cob)$/;"	f	file:
add_info_exclusion	cmd/ccnc.c	/^add_info_exclusion(struct ccnxchat_state *st, struct ccn_upcall_info *info)$/;"	f	file:
add_key_to_hashtb	lib/ccn_client.c	/^add_key_to_hashtb(struct ccn *h, const struct ccn_pkey *key, const unsigned char *keyid, $/;"	f	file:
add_to_pool	cmd/ccnlibtest.c	/^add_to_pool(int pool, const unsigned char *r, size_t n)$/;"	f
add_update_name	sync/sync_diff.c	/^add_update_name(struct sync_update_data *ud, struct ccn_charbuf *name, int isNew) {$/;"	f	file:
add_uri_exclusion	cmd/ccnc.c	/^add_uri_exclusion(struct ccnxchat_state *st, const char *uri)$/;"	f	file:
add_ver_exclusion	cmd/ccnc.c	/^add_ver_exclusion(struct ccnxchat_state *st, struct ccn_charbuf **c)$/;"	f	file:
adding	sync/sync_diff.h	/^    struct SyncNameAccum *adding;   \/**< sorted names from start_sync_update *\/$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncNameAccum
addr	ccnd/ccnd_private.h	/^    const struct sockaddr *addr;$/;"	m	struct:face	typeref:struct:face::sockaddr
address	include/ccn/sockcreate.h	/^    const char *address;        \/**< acceptable to getaddrinfo *\/$/;"	m	struct:ccn_sockdescr
addrlen	ccnd/ccnd_private.h	/^    socklen_t addrlen;$/;"	m	struct:face
adjacency_do_refresh	ccnd/ccnd_internal_client.c	/^adjacency_do_refresh(struct ccn_schedule *sched,$/;"	f	file:
adjacency_do_reset	ccnd/ccnd_internal_client.c	/^adjacency_do_reset(struct ccn_schedule *sched,$/;"	f	file:
adjacency_timed_reset	ccnd/ccnd_internal_client.c	/^adjacency_timed_reset(struct ccnd_handle *ccnd, unsigned faceid)$/;"	f	file:
adjstate	ccnd/ccnd_private.h	/^    unsigned short adjstate;    \/**< state of adjacency negotiotiation *\/$/;"	m	struct:face
adjstate_change	ccnd/ccnd_internal_client.c	155;"	d	file:
adjstate_change_db	ccnd/ccnd_internal_client.c	/^adjstate_change_db(struct ccnd_handle *ccnd, struct face *face,$/;"	f
adjust_npe_predicted_response	ccnd/ccnd.c	/^adjust_npe_predicted_response(struct ccnd_handle *h,$/;"	f	file:
adjust_predicted_response	ccnd/ccnd.c	/^adjust_predicted_response(struct ccnd_handle *h,$/;"	f	file:
adjust_regprefix	cmd/ccnc.c	/^adjust_regprefix(struct ccn_charbuf *name)$/;"	f
adviseNeed	sync/SyncPrivate.h	/^    int adviseNeed;$/;"	m	struct:SyncRootPrivate
adviseNeedReset	sync/SyncActions.c	/^static int adviseNeedReset = 1;         \/\/ reset value for adviseNeed$/;"	v	file:
af_name	ccnd/ccnd.c	/^af_name(int family)$/;"	f	file:
af_name	ccnr/ccnr_net.c	/^af_name(int family)$/;"	f	file:
age	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *age;$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_scheduled_event
age	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *age;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
age_cs	cmd/ccnc.c	/^age_cs(struct ccnxchat_state *st)$/;"	f	file:
age_forwarding	ccnd/ccnd.c	/^age_forwarding(struct ccn_schedule *sched,$/;"	f	file:
age_forwarding	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *age_forwarding;$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_scheduled_event
age_forwarding	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *age_forwarding;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
age_forwarding_needed	ccnd/ccnd.c	/^age_forwarding_needed(struct ccnd_handle *h)$/;"	f	file:
age_pit	cmd/ccnc.c	/^age_pit(struct ccnxchat_state *st)$/;"	f	file:
algorithm_oid	include/ccn/aeskeystoreasn1.h	/^    ASN1_OBJECT *algorithm_oid;$/;"	m	struct:AESKeystore_info_st
all_chars_mixed_encoded	lib/encodedecodetest.c	/^static char all_chars_mixed_encoded[256 * 2 + 2]; \/* Computed *\/$/;"	v	file:
all_chars_percent_encoded	lib/encodedecodetest.c	/^static char all_chars_percent_encoded[256 * 3 + 1]; \/* Computed *\/$/;"	v	file:
all_chars_percent_encoded_canon	lib/encodedecodetest.c	/^static const char *all_chars_percent_encoded_canon =$/;"	v	file:
all_whitespace	cmd/ccn_xmltoccnb.c	/^all_whitespace(struct ccn_charbuf *b)$/;"	f	file:
allocNodeFetch	sync/sync_diff.c	/^allocNodeFetch(struct sync_diff_data *sdd, struct SyncHashCacheEntry *ce) {$/;"	f	file:
allow_stale	cmd/ccnbuzz.c	/^    int allow_stale;$/;"	m	struct:mydata	file:
allow_stale	cmd/ccncatchunks.c	/^    int allow_stale;$/;"	m	struct:mydata	file:
allow_stale	cmd/ccncatchunks2.c	/^    int allow_stale;$/;"	m	struct:mydata	file:
allow_stale	cmd/ccnsimplecat.c	/^    int allow_stale;$/;"	m	struct:mydata	file:
annotation	cmd/ccn_ccnbtoxml.c	/^    struct ccn_charbuf *annotation;$/;"	m	struct:ccn_decoder	typeref:struct:ccn_decoder::ccn_charbuf	file:
answer_highest	lib/ccn_versioning.c	/^answer_highest(struct ccn_charbuf *templ)$/;"	f	file:
answer_passive	cmd/ccnslurp.c	/^answer_passive(struct ccn_charbuf *templ)$/;"	f	file:
answer_passive	lib/ccn_traverse.c	/^answer_passive(struct ccn_charbuf *templ, int allow_stale)$/;"	f	file:
answer_passive	lib/ccn_versioning.c	/^answer_passive(struct ccn_charbuf *templ)$/;"	f	file:
answerfrom	include/ccn/ccn.h	/^    int answerfrom;$/;"	m	struct:ccn_parsed_interest
api_version	include/ccn/ccn.h	/^    int api_version;$/;"	m	struct:ccn_signing_params
appendComponents	sync/SyncTest.c	/^appendComponents(struct ccn_charbuf *dst,$/;"	f
appendExclusions	sync/SyncUtil.c	/^appendExclusions(struct ccn_charbuf *cb, struct SyncNameAccum *excl) {$/;"	f	file:
appendLifetime	sync/SyncUtil.c	/^appendLifetime(struct ccn_charbuf *cb, int lifetime) {$/;"	f	file:
appendName	sync/SyncRoot.c	/^appendName(struct ccn_charbuf *cb, struct ccn_charbuf *name) {$/;"	f	file:
appendOut	cmd/ccn_fetch_test.c	/^	int appendOut;$/;"	m	struct:MyParms	file:
append_Any_filter	lib/ccn_traverse.c	/^append_Any_filter(struct ccn_charbuf *c)$/;"	f	file:
append_adjacency_uri	ccnd/ccnd_internal_client.c	/^append_adjacency_uri(struct ccnd_handle *ccnd,$/;"	f	file:
append_bf_all	cmd/ccnbuzz.c	/^append_bf_all(struct ccn_charbuf *c)$/;"	f	file:
append_bf_all	cmd/ccnslurp.c	/^append_bf_all(struct ccn_charbuf *c)$/;"	f	file:
append_bloom_element	cmd/ccnbuzz.c	/^append_bloom_element(struct ccn_charbuf *templ,$/;"	f	file:
append_filter_all	lib/ccn_versioning.c	/^append_filter_all(struct ccn_charbuf *c)$/;"	f	file:
append_full_user_name	cmd/ccnc.c	/^append_full_user_name(struct ccn_charbuf *c)$/;"	f	file:
append_future_vcomp	lib/ccn_versioning.c	/^append_future_vcomp(struct ccn_charbuf *templ)$/;"	f	file:
append_interest_details	cmd/ccnc.c	/^append_interest_details(struct ccn_charbuf *c,$/;"	f	file:
append_slice	sync/sync_api.c	/^append_slice(struct ccn_charbuf *c, struct ccns_slice *s) {$/;"	f	file:
arrival_faceid	ccnd/ccnd_private.h	/^    unsigned arrival_faceid;    \/**< the faceid of first arrival *\/$/;"	m	struct:content_entry
ask_more	cmd/ccncatchunks2.c	/^ask_more(struct mydata *md, uintmax_t seq)$/;"	f	file:
assumeFixed	cmd/ccn_fetch_test.c	/^	int assumeFixed;$/;"	m	struct:MyParms	file:
autoreg	ccnd/ccnd_private.h	/^    struct ccn_charbuf *autoreg;    \/**< URIs to auto-register *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_charbuf
ax	sync/sync_diff.h	/^    int ax;$/;"	m	struct:sync_update_data
b	ccnr/ccnr_private.h	/^typedef struct ccnr_accession_rep {unsigned a; unsigned b;} ccnr_accession;$/;"	m	struct:ccnr_accession_rep
backoff	cmd/ccncatchunks2.c	/^    unsigned backoff;$/;"	m	struct:mydata	file:
base	sync/SyncNode.h	/^    struct SyncBaseStruct *base;$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::SyncBaseStruct
base	sync/SyncRoot.h	/^    struct SyncBaseStruct *base;          \/**< Sync Agent base *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncBaseStruct
base	sync/SyncTest.c	/^    struct SyncBaseStruct *base;$/;"	m	struct:SyncTestParms	typeref:struct:SyncTestParms::SyncBaseStruct	file:
base	sync/sync_api.c	/^    struct SyncBaseStruct *base;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncBaseStruct	file:
base64_char_count	cmd/ccn_ccnbtoxml.c	/^    int base64_char_count;$/;"	m	struct:ccn_decoder	file:
base64_decode_bytes	cmd/ccn_xmltoccnb.c	/^base64_decode_bytes(struct base64_decoder *d, const void *p, size_t count)$/;"	f	file:
base64_decoder	cmd/ccn_xmltoccnb.c	/^struct base64_decoder {$/;"	s	file:
basename	cmd/ccnc.c	/^    const char *basename;$/;"	m	struct:__anon3	file:
basename	cmd/ccnc.c	/^    struct ccn_charbuf *basename; \/* The namespace we are serving *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
batching	lib/ccn_seqwriter.c	/^    int batching;$/;"	m	struct:ccn_seqwriter	file:
bignumval	cmd/ccn_ccnbtoxml.c	/^    uintmax_t bignumval;$/;"	m	struct:ccn_decoder	file:
birth	ccnd/ccnd_private.h	/^    ccn_wrappedtime birth;          \/**< when interest entry was created *\/$/;"	m	struct:ccn_strategy
bits	cmd/ccn_ccnbtoxml.c	/^    int bits;$/;"	m	struct:ccn_decoder	file:
blockSize	sync/SyncTest.c	/^    int blockSize;$/;"	m	struct:SyncTestParms	file:
block_size	include/ccn/header.h	/^    uintmax_t block_size;$/;"	m	struct:ccn_header
blockmaxsize	lib/ccn_seqwriter.c	/^    int blockmaxsize;$/;"	m	struct:ccn_seqwriter	file:
blockminsize	lib/ccn_seqwriter.c	/^    int blockminsize;$/;"	m	struct:ccn_seqwriter	file:
bloom	include/ccn/bloom.h	/^    unsigned char bloom[1024]; \/* 8 kilobits maximum *\/$/;"	m	struct:ccn_bloom_wire
bloom_nexthash	lib/ccn_bloom.c	/^bloom_nexthash(int s, int u)$/;"	f	file:
bloom_seed	lib/ccn_bloom.c	/^bloom_seed(const struct ccn_bloom_wire *f)$/;"	f	file:
bogon	ccnr/ccnr_store.c	/^static const unsigned char *bogon = NULL;$/;"	v	file:
bs	sync/SyncTest.c	/^    off_t bs;$/;"	m	struct:storeFileStruct	file:
btclose	include/ccn/btree.h	/^    ccn_btree_io_closefn btclose;$/;"	m	struct:ccn_btree_io
btdestroy	include/ccn/btree.h	/^    ccn_btree_io_destroyfn btdestroy;$/;"	m	struct:ccn_btree_io
btopen	include/ccn/btree.h	/^    ccn_btree_io_openfn btopen;$/;"	m	struct:ccn_btree_io
btread	include/ccn/btree.h	/^    ccn_btree_io_readfn btread;$/;"	m	struct:ccn_btree_io
btree	ccnr/ccnr_private.h	/^    struct ccn_btree *btree;        \/**< btree index of content *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_btree
bts_close	lib/ccn_btree_store.c	/^bts_close(struct ccn_btree_io *io, struct ccn_btree_node *node)$/;"	f	file:
bts_data	lib/ccn_btree_store.c	/^struct bts_data {$/;"	s	file:
bts_destroy	lib/ccn_btree_store.c	/^bts_destroy(struct ccn_btree_io **pio)$/;"	f	file:
bts_node_state	lib/ccn_btree_store.c	/^struct bts_node_state {$/;"	s	file:
bts_open	lib/ccn_btree_store.c	/^bts_open(struct ccn_btree_io *io, struct ccn_btree_node *node)$/;"	f	file:
bts_read	lib/ccn_btree_store.c	/^bts_read(struct ccn_btree_io *io, struct ccn_btree_node *node, unsigned limit)$/;"	f	file:
bts_remove_lockfile	lib/ccn_btree_store.c	/^bts_remove_lockfile(struct ccn_btree_io *io)$/;"	f	file:
bts_write	lib/ccn_btree_store.c	/^bts_write(struct ccn_btree_io *io, struct ccn_btree_node *node)$/;"	f	file:
btwrite	include/ccn/btree.h	/^    ccn_btree_io_writefn btwrite;$/;"	m	struct:ccn_btree_io
bucket	lib/hashtb.c	/^    struct node **bucket;$/;"	m	struct:hashtb	typeref:struct:hashtb::node	file:
buf	cmd/ccn_fetch_test.c	/^	string buf;$/;"	m	struct:TestElemStruct	file:
buf	include/ccn/btree.h	/^    struct ccn_charbuf *buf;    \/**< The internal buffer *\/$/;"	m	struct:ccn_btree_node	typeref:struct:ccn_btree_node::ccn_charbuf
buf	include/ccn/ccn.h	/^    const unsigned char *buf;$/;"	m	struct:ccn_buf_decoder
buf	include/ccn/charbuf.h	/^    unsigned char *buf;$/;"	m	struct:ccn_charbuf
buf	include/ccn/indexbuf.h	/^    size_t *buf;$/;"	m	struct:ccn_indexbuf
buf	lib/ccn_fetch.c	/^	unsigned char *buf;	\/\/ where the bytes are$/;"	m	struct:ccn_fetch_buffer	file:
bufLen	cmd/ccn_fetch_test.c	/^	int bufLen;$/;"	m	struct:TestElemStruct	file:
bufList	lib/ccn_fetch.c	/^	struct ccn_fetch_buffer *bufList;	\/\/ the buffer list$/;"	m	struct:ccn_fetch_stream	typeref:struct:ccn_fetch_stream::ccn_fetch_buffer	file:
bufMax	cmd/ccn_fetch_test.c	/^	int bufMax;$/;"	m	struct:TestElemStruct	file:
buffer	lib/ccn_seqwriter.c	/^    struct ccn_charbuf *buffer;$/;"	m	struct:ccn_seqwriter	typeref:struct:ccn_seqwriter::ccn_charbuf	file:
bufoffset	ccnr/ccnr_private.h	/^    off_t bufoffset;$/;"	m	struct:fdholder
bufs	sync/SyncTest.c	/^    int bufs;$/;"	m	struct:SyncTestParms	file:
build_multifilt_array	lib/ccn_client.c	/^build_multifilt_array(struct ccn *h,$/;"	f	file:
bulkdata	lib/ccn_bulkdata.c	/^struct bulkdata {$/;"	s	file:
burst_nsec	ccnd/ccnd_private.h	/^    unsigned burst_nsec;             \/**< nsec per KByte, limits burst rate *\/$/;"	m	struct:content_queue
burst_nsec	ccnr/ccnr_private.h	/^    unsigned burst_nsec;             \/**< nsec per KByte, limits burst rate *\/$/;"	m	struct:content_queue
busy	sync/SyncHashCache.h	/^    uint32_t busy;                      \/**< the tree worker usage count *\/$/;"	m	struct:SyncHashCacheEntry
byteCount	sync/SyncNode.h	/^    unsigned byteCount;   \/**< byte count sum for child nodes (this node NOT included) *\/$/;"	m	struct:SyncNodeComposite
bytes	sync/SyncNode.h	/^    unsigned char bytes[MAX_HASH_BYTES];$/;"	m	struct:SyncLongHashStruct
cache	sync/SyncTreeWorker.h	/^    struct SyncHashCacheHead *cache;$/;"	m	struct:SyncTreeWorkerHead	typeref:struct:SyncTreeWorkerHead::SyncHashCacheHead
cacheCleanBatch	sync/SyncActions.c	/^static int cacheCleanBatch = 8;         \/\/ cache clean batch seconds$/;"	v	file:
cacheCleanDelta	sync/SyncActions.c	/^static int cacheCleanDelta = 4;         \/\/ cache clean batch seconds$/;"	v	file:
cacheEntry	sync/SyncTreeWorker.h	/^    struct SyncHashCacheEntry *cacheEntry;$/;"	m	struct:SyncTreeWorkerEntry	typeref:struct:SyncTreeWorkerEntry::SyncHashCacheEntry
cacheEntryForElem	sync/SyncActions.c	/^cacheEntryForElem(struct SyncCompareData *data,$/;"	f	file:
cacheEntryForElem	sync/sync_diff.c	/^cacheEntryForElem(struct sync_diff_data *sdd,$/;"	f	file:
cachePurgeTrigger	sync/SyncActions.c	/^static int cachePurgeTrigger = 60;      \/\/ cache entry purge, in seconds$/;"	v	file:
callback	cmd/ccn_ccnbtoxml.c	/^    ccn_decoder_callback callback;$/;"	m	struct:ccn_decoder	file:
callback	include/ccn/sync.h	/^    ccns_callback callback;$/;"	m	struct:ccns_name_closure
callback_kind	cmd/ccn_ccnbtoxml.c	/^enum callback_kind {$/;"	g	file:
callback_state	cmd/ccn_ccnbtoxml.c	/^struct callback_state {$/;"	s	file:
callbackdata	cmd/ccn_ccnbtoxml.c	/^    void *callbackdata;$/;"	m	struct:ccn_decoder	file:
canonFilter	sync/SyncRoot.c	/^canonFilter(struct SyncBaseStruct *base, struct SyncNameAccum *filter) {$/;"	f	file:
capacity	ccnd/ccnd_private.h	/^    unsigned capacity;              \/**< may toss content if there more than$/;"	m	struct:ccnd_handle
cb	sync/SyncActions.c	/^    struct ccn_charbuf *cb;$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::ccn_charbuf	file:
cb	sync/SyncNode.h	/^    struct ccn_charbuf *cb;       \/**< pointer to ccnb encoding *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::ccn_charbuf
cb	sync/SyncTest.c	/^    struct ccn_charbuf *cb;$/;"	m	struct:storeFileStruct	typeref:struct:storeFileStruct::ccn_charbuf	file:
cb	sync/sync_diff.h	/^    struct ccn_charbuf *cb;$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::ccn_charbuf
cbL	sync/SyncActions.c	/^    struct ccn_charbuf *cbL;        \/**< local tree scratch *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::ccn_charbuf	file:
cbR	sync/SyncActions.c	/^    struct ccn_charbuf *cbR;        \/**< remote tree scratch *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::ccn_charbuf	file:
cbX	sync/sync_diff.h	/^    struct ccn_charbuf *cbX;        \/**< "local" tree scratch *\/$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::ccn_charbuf
cbY	sync/sync_diff.h	/^    struct ccn_charbuf *cbY;        \/**< "remote" tree scratch *\/$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::ccn_charbuf
cc	cmd/ccnc.c	/^    struct ccn_closure *cc;     \/* Closure for incoming content *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_closure	file:
ccn	lib/ccn_client.c	/^struct ccn {$/;"	s	file:
ccn	sync/SyncTest.c	/^    struct ccn *ccn;$/;"	m	struct:storeFileStruct	typeref:struct:storeFileStruct::ccn	file:
ccn	sync/sync_api.c	/^    struct ccn *ccn;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::ccn	file:
ccn	sync/sync_plumbing.h	/^    struct ccn *ccn;                \/\/ ccn handle to share$/;"	m	struct:sync_plumbing	typeref:struct:sync_plumbing::ccn
ccnFD	cmd/ccn_fetch_test.c	/^	int ccnFD;$/;"	m	struct:MyParms	file:
ccn_PKEY_assign	include/ccn/openssl_ex.h	39;"	d
ccn_PKEY_assign	lib/ccn_signing.c	/^int ccn_PKEY_assign(EVP_PKEY *pkey, int type, char *key) {$/;"	f
ccn_add_entropy	lib/ccn_signing.c	/^ccn_add_entropy(const void *buf, size_t size, int bits_of_entropy)$/;"	f
ccn_aes_digest	lib/ccn_aes_keystore.c	/^ccn_aes_digest(unsigned char *key, unsigned int keylength, unsigned char *key_digest)$/;"	f	file:
ccn_aes_keystore_create	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_create(void)$/;"	f
ccn_aes_keystore_destroy	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_destroy(struct ccn_keystore **p)$/;"	f	file:
ccn_aes_keystore_digest_algorithm	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_digest_algorithm(struct ccn_keystore *p)$/;"	f	file:
ccn_aes_keystore_file_init	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_file_init(char *filename, const char *password, unsigned char *key, int keylength)$/;"	f
ccn_aes_keystore_init	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_init(struct ccn_keystore *keystore, char *filename, const char *password)$/;"	f
ccn_aes_keystore_key_digest	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_key_digest(struct ccn_keystore *p)$/;"	f	file:
ccn_aes_keystore_key_digest_length	lib/ccn_aes_keystore.c	/^ccn_aes_keystore_key_digest_length(struct ccn_keystore *p)$/;"	f	file:
ccn_age_interest	lib/ccn_client.c	/^ccn_age_interest(struct ccn *h,$/;"	f	file:
ccn_append_interest_bounds	ccnr/ccnr_store.c	/^ccn_append_interest_bounds(const unsigned char *interest_msg,$/;"	f	file:
ccn_append_link_name	lib/ccn_client.c	/^ccn_append_link_name(struct ccn_charbuf *name, const unsigned char *data, size_t data_size)$/;"	f	file:
ccn_append_link_stuff	ccnd/ccnd.c	/^ccn_append_link_stuff(struct ccnd_handle *h,$/;"	f	file:
ccn_append_pubkey_blob	lib/ccn_signing.c	/^ccn_append_pubkey_blob(struct ccn_charbuf *c, const struct ccn_pkey *i_pubkey)$/;"	f
ccn_append_uri_component	lib/ccn_uri.c	/^ccn_append_uri_component(struct ccn_charbuf *c, const char *s, size_t limit, size_t *cont)$/;"	f	file:
ccn_binary_seqfunc	lib/ccn_bulkdata.c	/^ccn_binary_seqfunc(uintmax_t x, void *param, struct ccn_charbuf *resultbuf)$/;"	f
ccn_bloom	lib/ccn_bloom.c	/^struct ccn_bloom {$/;"	s	file:
ccn_bloom_create	lib/ccn_bloom.c	/^ccn_bloom_create(int estimated_members, const unsigned char seed[4])$/;"	f
ccn_bloom_destroy	lib/ccn_bloom.c	/^ccn_bloom_destroy(struct ccn_bloom **bp)$/;"	f
ccn_bloom_from_wire	lib/ccn_bloom.c	/^ccn_bloom_from_wire(const void *data, size_t size)$/;"	f
ccn_bloom_insert	lib/ccn_bloom.c	/^ccn_bloom_insert(struct ccn_bloom *b, const void *key, size_t size)$/;"	f
ccn_bloom_match	lib/ccn_bloom.c	/^ccn_bloom_match(struct ccn_bloom *b, const void *key, size_t size)$/;"	f
ccn_bloom_match_wire	lib/ccn_bloom.c	/^ccn_bloom_match_wire(const struct ccn_bloom_wire *f, const void *key, size_t size)$/;"	f
ccn_bloom_n	lib/ccn_bloom.c	/^ccn_bloom_n(struct ccn_bloom *b)$/;"	f
ccn_bloom_store_wire	lib/ccn_bloom.c	/^ccn_bloom_store_wire(struct ccn_bloom *b, unsigned char *dest, size_t destsize)$/;"	f
ccn_bloom_validate_wire	lib/ccn_bloom.c	/^ccn_bloom_validate_wire(const void *buf, size_t size)$/;"	f
ccn_bloom_wire	include/ccn/bloom.h	/^struct ccn_bloom_wire {$/;"	s
ccn_bloom_wiresize	lib/ccn_bloom.c	/^ccn_bloom_wiresize(struct ccn_bloom *b)$/;"	f
ccn_btnodeid	include/ccn/btree.h	/^typedef unsigned ccn_btnodeid;$/;"	t
ccn_btree	include/ccn/btree.h	/^struct ccn_btree {$/;"	s
ccn_btree_check	lib/ccn_btree.c	/^ccn_btree_check(struct ccn_btree *btree, FILE *outfp) {$/;"	f
ccn_btree_chknode	lib/ccn_btree.c	/^ccn_btree_chknode(struct ccn_btree_node *node)$/;"	f
ccn_btree_close_node	lib/ccn_btree.c	/^ccn_btree_close_node(struct ccn_btree *btree, struct ccn_btree_node *node)$/;"	f
ccn_btree_compare	lib/ccn_btree.c	/^ccn_btree_compare(const unsigned char *key,$/;"	f
ccn_btree_content_cobid	lib/ccn_btree_content.c	/^ccn_btree_content_cobid(struct ccn_btree_node *node, int ndx)$/;"	f
ccn_btree_content_cobsz	lib/ccn_btree_content.c	/^ccn_btree_content_cobsz(struct ccn_btree_node *node, int ndx)$/;"	f
ccn_btree_content_entry	include/ccn/btree_content.h	/^struct ccn_btree_content_entry {$/;"	s
ccn_btree_content_payload	include/ccn/btree_content.h	/^struct ccn_btree_content_payload {$/;"	s
ccn_btree_content_set_cobid	lib/ccn_btree_content.c	/^ccn_btree_content_set_cobid(struct ccn_btree_node *node, int ndx,$/;"	f
ccn_btree_create	lib/ccn_btree.c	/^ccn_btree_create(void)$/;"	f
ccn_btree_delete_entry	lib/ccn_btree.c	/^ccn_btree_delete_entry(struct ccn_btree_node *node, int i)$/;"	f
ccn_btree_destroy	lib/ccn_btree.c	/^ccn_btree_destroy(struct ccn_btree **pbt)$/;"	f
ccn_btree_entry_trailer	include/ccn/btree.h	/^struct ccn_btree_entry_trailer {$/;"	s
ccn_btree_fetchval	lib/ccn_btree.c	/^ccn_btree_fetchval(const unsigned char *p, int size)$/;"	f
ccn_btree_fetchval64	lib/ccn_btree_content.c	/^ccn_btree_fetchval64(const unsigned char *p, int size)$/;"	f	file:
ccn_btree_getnode	lib/ccn_btree.c	/^ccn_btree_getnode(struct ccn_btree *bt,$/;"	f
ccn_btree_grow_a_level	lib/ccn_btree.c	/^ccn_btree_grow_a_level(struct ccn_btree *btree, struct ccn_btree_node *node)$/;"	f	file:
ccn_btree_index_in_parent	lib/ccn_btree.c	/^ccn_btree_index_in_parent(struct ccn_btree_node *parent, ccn_btnodeid nodeid)$/;"	f
ccn_btree_init_node	lib/ccn_btree.c	/^ccn_btree_init_node(struct ccn_btree_node *node,$/;"	f
ccn_btree_insert_content	lib/ccn_btree_content.c	/^ccn_btree_insert_content(struct ccn_btree_node *node, int ndx,$/;"	f
ccn_btree_insert_entry	lib/ccn_btree.c	/^ccn_btree_insert_entry(struct ccn_btree_node *node, int i,$/;"	f
ccn_btree_internal_entry	include/ccn/btree.h	/^struct ccn_btree_internal_entry {$/;"	s
ccn_btree_internal_payload	include/ccn/btree.h	/^struct ccn_btree_internal_payload {$/;"	s
ccn_btree_io	include/ccn/btree.h	/^struct ccn_btree_io {$/;"	s
ccn_btree_io_closefn	include/ccn/btree.h	/^typedef int (*ccn_btree_io_closefn)$/;"	t
ccn_btree_io_destroyfn	include/ccn/btree.h	/^typedef int (*ccn_btree_io_destroyfn)$/;"	t
ccn_btree_io_from_directory	lib/ccn_btree_store.c	/^ccn_btree_io_from_directory(const char *path, struct ccn_charbuf *msgs)$/;"	f
ccn_btree_io_openfn	include/ccn/btree.h	/^typedef int (*ccn_btree_io_openfn)$/;"	t
ccn_btree_io_readfn	include/ccn/btree.h	/^typedef int (*ccn_btree_io_readfn)$/;"	t
ccn_btree_io_writefn	include/ccn/btree.h	/^typedef int (*ccn_btree_io_writefn)$/;"	t
ccn_btree_key_append	lib/ccn_btree.c	/^ccn_btree_key_append(struct ccn_charbuf *dst,$/;"	f
ccn_btree_key_fetch	lib/ccn_btree.c	/^ccn_btree_key_fetch(struct ccn_charbuf *dst,$/;"	f
ccn_btree_lookup	lib/ccn_btree.c	/^ccn_btree_lookup(struct ccn_btree *btree,$/;"	f
ccn_btree_lookup_internal	lib/ccn_btree.c	/^ccn_btree_lookup_internal(struct ccn_btree *btree,$/;"	f
ccn_btree_match_interest	lib/ccn_btree_content.c	/^ccn_btree_match_interest(struct ccn_btree_node *node, int ndx,$/;"	f
ccn_btree_next_leaf	lib/ccn_btree.c	/^ccn_btree_next_leaf(struct ccn_btree *btree,$/;"	f
ccn_btree_node	include/ccn/btree.h	/^struct ccn_btree_node {$/;"	s
ccn_btree_node_getentry	lib/ccn_btree.c	/^ccn_btree_node_getentry(size_t payload_bytes, struct ccn_btree_node *node, int i)$/;"	f
ccn_btree_node_getentrysize	lib/ccn_btree.c	/^ccn_btree_node_getentrysize(struct ccn_btree_node *node)$/;"	f
ccn_btree_node_header	include/ccn/btree.h	/^struct ccn_btree_node_header {$/;"	s
ccn_btree_node_internal_entry	lib/ccn_btree.c	/^ccn_btree_node_internal_entry(struct ccn_btree_node *node, int i)$/;"	f	file:
ccn_btree_node_level	lib/ccn_btree.c	/^int ccn_btree_node_level(struct ccn_btree_node *node)$/;"	f
ccn_btree_node_nent	lib/ccn_btree.c	/^ccn_btree_node_nent(struct ccn_btree_node *node)$/;"	f
ccn_btree_node_payloadsize	lib/ccn_btree.c	/^ccn_btree_node_payloadsize(struct ccn_btree_node *node)$/;"	f
ccn_btree_note_error	lib/ccn_btree.c	/^ccn_btree_note_error(struct ccn_btree *bt, int info)$/;"	f
ccn_btree_oversize	lib/ccn_btree.c	/^ccn_btree_oversize(struct ccn_btree *btree, struct ccn_btree_node *node)$/;"	f
ccn_btree_prepare_for_update	lib/ccn_btree.c	/^ccn_btree_prepare_for_update(struct ccn_btree *bt, struct ccn_btree_node *node)$/;"	f
ccn_btree_prev_leaf	lib/ccn_btree.c	/^ccn_btree_prev_leaf(struct ccn_btree *btree,$/;"	f
ccn_btree_rnode	lib/ccn_btree.c	/^ccn_btree_rnode(struct ccn_btree *bt, ccn_btnodeid nodeid)$/;"	f
ccn_btree_searchnode	lib/ccn_btree.c	/^ccn_btree_searchnode(const unsigned char *key,$/;"	f
ccn_btree_shrink_a_level	lib/ccn_btree.c	/^ccn_btree_shrink_a_level(struct ccn_btree *btree)$/;"	f	file:
ccn_btree_smallest_key_under	lib/ccn_btree.c	/^ccn_btree_smallest_key_under(struct ccn_btree *btree,$/;"	f	file:
ccn_btree_spill	lib/ccn_btree.c	/^ccn_btree_spill(struct ccn_btree *btree, struct ccn_btree_node *node)$/;"	f
ccn_btree_split	lib/ccn_btree.c	/^ccn_btree_split(struct ccn_btree *btree, struct ccn_btree_node *node)$/;"	f
ccn_btree_storeval	lib/ccn_btree.c	/^ccn_btree_storeval(unsigned char *p, int size, unsigned v)$/;"	f
ccn_btree_storeval64	lib/ccn_btree_content.c	/^ccn_btree_storeval64(unsigned char *p, int size, uint_least64_t v)$/;"	f	file:
ccn_btree_unbalance	lib/ccn_btree.c	/^ccn_btree_unbalance(struct ccn_btree *btree, struct ccn_btree_node *node)$/;"	f
ccn_btree_update_cached_parent	lib/ccn_btree.c	/^ccn_btree_update_cached_parent(struct ccn_btree *btree,$/;"	f	file:
ccn_buf_advance	lib/ccn_buf_decoder.c	/^ccn_buf_advance(struct ccn_buf_decoder *d)$/;"	f
ccn_buf_advance_past_element	lib/ccn_buf_decoder.c	/^ccn_buf_advance_past_element(struct ccn_buf_decoder *d)$/;"	f
ccn_buf_check_close	lib/ccn_buf_decoder.c	/^ccn_buf_check_close(struct ccn_buf_decoder *d)$/;"	f
ccn_buf_decoder	include/ccn/ccn.h	/^struct ccn_buf_decoder {$/;"	s
ccn_buf_decoder_start	lib/ccn_buf_decoder.c	/^ccn_buf_decoder_start(struct ccn_buf_decoder *d,$/;"	f
ccn_buf_decoder_start_at_components	lib/ccn_buf_decoder.c	/^ccn_buf_decoder_start_at_components(struct ccn_buf_decoder *d,$/;"	f	file:
ccn_buf_match_attr	lib/ccn_buf_decoder.c	/^ccn_buf_match_attr(struct ccn_buf_decoder *d, const char *s)$/;"	f
ccn_buf_match_blob	lib/ccn_buf_decoder.c	/^ccn_buf_match_blob(struct ccn_buf_decoder *d,$/;"	f
ccn_buf_match_dtag	lib/ccn_buf_decoder.c	/^ccn_buf_match_dtag(struct ccn_buf_decoder *d, enum ccn_dtag dtag)$/;"	f
ccn_buf_match_some_blob	lib/ccn_buf_decoder.c	/^ccn_buf_match_some_blob(struct ccn_buf_decoder *d)$/;"	f
ccn_buf_match_some_dtag	lib/ccn_buf_decoder.c	/^ccn_buf_match_some_dtag(struct ccn_buf_decoder *d)$/;"	f
ccn_buf_match_udata	lib/ccn_buf_decoder.c	/^ccn_buf_match_udata(struct ccn_buf_decoder *d, const char *s)$/;"	f
ccn_cache_key	lib/ccn_client.c	/^ccn_cache_key(struct ccn *h,$/;"	f	file:
ccn_charbuf	include/ccn/charbuf.h	/^struct ccn_charbuf {$/;"	s
ccn_charbuf_append	lib/ccn_charbuf.c	/^ccn_charbuf_append(struct ccn_charbuf *c, const void *p, size_t n)$/;"	f
ccn_charbuf_append_charbuf	lib/ccn_charbuf.c	/^ccn_charbuf_append_charbuf(struct ccn_charbuf *c, const struct ccn_charbuf *in)$/;"	f
ccn_charbuf_append_closer	lib/ccn_buf_encoder.c	/^ccn_charbuf_append_closer(struct ccn_charbuf *c)$/;"	f
ccn_charbuf_append_datetime	lib/ccn_charbuf.c	/^ccn_charbuf_append_datetime(struct ccn_charbuf *c, time_t secs, int nsecs)$/;"	f
ccn_charbuf_append_escaped	lib/ccn_btree.c	/^ccn_charbuf_append_escaped(struct ccn_charbuf *dst, struct ccn_charbuf *src)$/;"	f	file:
ccn_charbuf_append_sockaddr	lib/ccn_sockaddrutil.c	/^ccn_charbuf_append_sockaddr(struct ccn_charbuf *c, const struct sockaddr *sa)$/;"	f
ccn_charbuf_append_string	lib/ccn_charbuf.c	/^ccn_charbuf_append_string(struct ccn_charbuf *c, const char *s)$/;"	f
ccn_charbuf_append_tt	lib/ccn_buf_encoder.c	/^ccn_charbuf_append_tt(struct ccn_charbuf *c, size_t val, enum ccn_tt tt)$/;"	f
ccn_charbuf_append_value	lib/ccn_charbuf.c	/^ccn_charbuf_append_value(struct ccn_charbuf *c, unsigned val, unsigned n)$/;"	f
ccn_charbuf_as_string	lib/ccn_charbuf.c	/^ccn_charbuf_as_string(struct ccn_charbuf *c)$/;"	f
ccn_charbuf_create	lib/ccn_charbuf.c	/^ccn_charbuf_create(void)$/;"	f
ccn_charbuf_create_n	lib/ccn_charbuf.c	/^ccn_charbuf_create_n(size_t n)$/;"	f
ccn_charbuf_destroy	lib/ccn_charbuf.c	/^ccn_charbuf_destroy(struct ccn_charbuf **cbp)$/;"	f
ccn_charbuf_duplicate	cmd/ccnslurp.c	/^ccn_charbuf_duplicate(struct ccn_charbuf *c)$/;"	f	file:
ccn_charbuf_duplicate	lib/ccn_traverse.c	/^ccn_charbuf_duplicate(struct ccn_charbuf *c)$/;"	f	file:
ccn_charbuf_putf	lib/ccn_charbuf.c	/^ccn_charbuf_putf(struct ccn_charbuf *c, const char *fmt, ...)$/;"	f
ccn_charbuf_reserve	lib/ccn_charbuf.c	/^ccn_charbuf_reserve(struct ccn_charbuf *c, size_t n)$/;"	f
ccn_charbuf_reset	lib/ccn_charbuf.c	/^void ccn_charbuf_reset(struct ccn_charbuf *c)$/;"	f
ccn_check_interests	lib/ccn_client.c	/^ccn_check_interests(struct expressed_interest *list)$/;"	f
ccn_check_namebuf	lib/ccn_client.c	/^ccn_check_namebuf(struct ccn *h, struct ccn_charbuf *namebuf, int prefix_comps,$/;"	f	file:
ccn_check_pub_arrival	lib/ccn_client.c	/^ccn_check_pub_arrival(struct ccn *h, struct expressed_interest *interest)$/;"	f	file:
ccn_chk_signing_params	lib/ccn_client.c	/^ccn_chk_signing_params(struct ccn *h,$/;"	f
ccn_clean_all_interests	lib/ccn_client.c	/^ccn_clean_all_interests(struct ccn *h)$/;"	f	file:
ccn_clean_interests_by_prefix	lib/ccn_client.c	/^ccn_clean_interests_by_prefix(struct ccn *h, struct interests_by_prefix *entry)$/;"	f
ccn_closure	include/ccn/ccn.h	/^struct ccn_closure {$/;"	s
ccn_compare_names	lib/ccn_buf_decoder.c	/^ccn_compare_names(const unsigned char *a, size_t asize,$/;"	f
ccn_connect	lib/ccn_client.c	/^ccn_connect(struct ccn *h, const char *name)$/;"	f
ccn_construct_interest	lib/ccn_client.c	/^ccn_construct_interest(struct ccn *h,$/;"	f	file:
ccn_content_get_value	lib/ccn_buf_decoder.c	/^ccn_content_get_value(const unsigned char *data, size_t data_size,$/;"	f
ccn_content_matches_interest	lib/ccn_match.c	/^ccn_content_matches_interest(const unsigned char *content_object,$/;"	f
ccn_content_type	include/ccn/ccn.h	/^enum ccn_content_type {$/;"	g
ccn_cookie	include/ccn/nametree.h	/^typedef unsigned ccn_cookie;$/;"	t
ccn_create	lib/ccn_client.c	/^ccn_create(void)$/;"	f
ccn_create_aes_filename_from_key	lib/ccn_aes_keystore.c	/^ccn_create_aes_filename_from_key(struct ccn_charbuf *filename, unsigned char *key, int keylength) $/;"	f
ccn_create_filename_with_digest_suffix	lib/ccn_aes_keystore.c	/^ccn_create_filename_with_digest_suffix(struct ccn_charbuf *filename, const unsigned char *digest, int digest_len)$/;"	f
ccn_create_keystore_path	lib/ccn_client.c	/^ccn_create_keystore_path(struct ccn *h, char *dir, struct ccn_charbuf **path)$/;"	f
ccn_create_version	lib/ccn_versioning.c	/^ccn_create_version(struct ccn *h, struct ccn_charbuf *name,$/;"	f
ccn_d2i_pubkey	lib/ccn_signing.c	/^ccn_d2i_pubkey(const unsigned char *p, size_t size)$/;"	f
ccn_decimal_seqfunc	lib/ccn_bulkdata.c	/^ccn_decimal_seqfunc(uintmax_t x, void *param, struct ccn_charbuf *resultbuf)$/;"	f
ccn_decoder	cmd/ccn_ccnbtoxml.c	/^struct ccn_decoder {$/;"	s	file:
ccn_decoder_callback	cmd/ccn_ccnbtoxml.c	/^typedef void (*ccn_decoder_callback)($/;"	t	file:
ccn_decoder_create	cmd/ccn_ccnbtoxml.c	/^ccn_decoder_create(int formatting_flags, const struct ccn_dict *dtags)$/;"	f
ccn_decoder_decode	cmd/ccn_ccnbtoxml.c	/^ccn_decoder_decode(struct ccn_decoder *d, unsigned char p[], size_t n)$/;"	f
ccn_decoder_destroy	cmd/ccn_ccnbtoxml.c	/^ccn_decoder_destroy(struct ccn_decoder **dp)$/;"	f
ccn_decoder_pop	cmd/ccn_ccnbtoxml.c	/^ccn_decoder_pop(struct ccn_decoder *d)$/;"	f
ccn_decoder_push	cmd/ccn_ccnbtoxml.c	/^ccn_decoder_push(struct ccn_decoder *d)$/;"	f
ccn_decoder_set_callback	cmd/ccn_ccnbtoxml.c	/^ccn_decoder_set_callback(struct ccn_decoder *d, ccn_decoder_callback c, void *data)$/;"	f
ccn_decoder_stack_item	cmd/ccn_ccnbtoxml.c	/^struct ccn_decoder_stack_item {$/;"	s	file:
ccn_decoder_state	include/ccn/coding.h	/^enum ccn_decoder_state {$/;"	g
ccn_defer_verification	lib/ccn_client.c	/^ccn_defer_verification(struct ccn *h, int defer)$/;"	f
ccn_destroy	lib/ccn_client.c	/^ccn_destroy(struct ccn **hp)$/;"	f
ccn_destroy_dict	lib/ccn_extend_dict.c	/^ccn_destroy_dict(struct ccn_dict **dp)$/;"	f
ccn_destroy_interest	lib/ccn_client.c	/^ccn_destroy_interest(struct ccn *h, struct expressed_interest *i)$/;"	f	file:
ccn_dict	include/ccn/coding.h	/^struct ccn_dict {$/;"	s
ccn_dict_entry	include/ccn/coding.h	/^struct ccn_dict_entry {$/;"	s
ccn_digest	lib/ccn_digest.c	/^struct ccn_digest {$/;"	s	file:
ccn_digest_Content	lib/ccn_client.c	/^ccn_digest_Content(const unsigned char *content_object,$/;"	f	file:
ccn_digest_ContentObject	lib/ccn_match.c	/^ccn_digest_ContentObject(const unsigned char *content_object,$/;"	f
ccn_digest_create	lib/ccn_digest.c	/^ccn_digest_create(enum ccn_digest_id id)$/;"	f
ccn_digest_destroy	lib/ccn_digest.c	/^ccn_digest_destroy(struct ccn_digest **pd)$/;"	f
ccn_digest_final	lib/ccn_digest.c	/^ccn_digest_final(struct ccn_digest *d, unsigned char *result, size_t digest_size)$/;"	f
ccn_digest_getid	lib/ccn_digest.c	/^ccn_digest_getid(struct ccn_digest *d)$/;"	f
ccn_digest_id	include/ccn/digest.h	/^enum ccn_digest_id {$/;"	g
ccn_digest_init	lib/ccn_digest.c	/^ccn_digest_init(struct ccn_digest *d)$/;"	f
ccn_digest_size	lib/ccn_digest.c	/^ccn_digest_size(struct ccn_digest *d)$/;"	f
ccn_digest_update	lib/ccn_digest.c	/^ccn_digest_update(struct ccn_digest *d, const void *data, size_t size)$/;"	f
ccn_disconnect	lib/ccn_client.c	/^ccn_disconnect(struct ccn *h)$/;"	f
ccn_dispatch_message	lib/ccn_client.c	/^ccn_dispatch_message(struct ccn *h, unsigned char *msg, size_t size)$/;"	f
ccn_dtag	include/ccn/coding.h	/^enum ccn_dtag {$/;"	g
ccn_dtag_dict	lib/ccn_dtag_table.c	/^const struct ccn_dict ccn_dtag_dict = {ARRAY_N(ccn_tagdict) - 1, ccn_tagdict};$/;"	v	typeref:struct:ccn_dict
ccn_dump_names	lib/ccn_traverse.c	/^ccn_dump_names(struct ccn *h, struct ccn_charbuf *name_prefix, int local_scope, int allow_stale)$/;"	f
ccn_encode_ContentObject	lib/ccn_buf_encoder.c	/^ccn_encode_ContentObject(struct ccn_charbuf *buf,$/;"	f
ccn_encode_Signature	lib/ccn_buf_encoder.c	/^ccn_encode_Signature(struct ccn_charbuf *buf,$/;"	f	file:
ccn_encode_StatusResponse	lib/ccn_buf_encoder.c	/^ccn_encode_StatusResponse(struct ccn_charbuf *buf,$/;"	f
ccn_encoder	cmd/ccn_xmltoccnb.c	/^struct ccn_encoder {$/;"	s	file:
ccn_encoder_create	cmd/ccn_xmltoccnb.c	/^ccn_encoder_create(FILE *outfile, const struct ccn_dict *dtags)$/;"	f
ccn_encoder_destroy	cmd/ccn_xmltoccnb.c	/^ccn_encoder_destroy(struct ccn_encoder **cbp)$/;"	f
ccn_encoder_stack_item	cmd/ccn_xmltoccnb.c	/^struct ccn_encoder_stack_item {$/;"	s	file:
ccn_evp_sign_init	lib/ccn_signing.c	/^int ccn_evp_sign_init(void *ctx, const void *key, int len, const EVP_MD *md)$/;"	f
ccn_evp_verify_init	lib/ccn_signing.c	/^int ccn_evp_verify_init(void *ctx, const void *key, int len, const EVP_MD *md)$/;"	f
ccn_excluded	lib/ccn_match.c	/^ccn_excluded(const unsigned char *excl,$/;"	f
ccn_express_interest	lib/ccn_client.c	/^ccn_express_interest(struct ccn *h,$/;"	f
ccn_ext_subtype	include/ccn/coding.h	/^enum ccn_ext_subtype {$/;"	g
ccn_extend_dict	lib/ccn_extend_dict.c	/^ccn_extend_dict(const char *dict_file, struct ccn_dict *d, struct ccn_dict **rdp)$/;"	f
ccn_face_instance	include/ccn/face_mgmt.h	/^struct ccn_face_instance {$/;"	s
ccn_face_instance_destroy	lib/ccn_face_mgmt.c	/^ccn_face_instance_destroy(struct ccn_face_instance **pfi)$/;"	f
ccn_face_instance_parse	lib/ccn_face_mgmt.c	/^ccn_face_instance_parse(const unsigned char *p, size_t size)$/;"	f
ccn_fetch	lib/ccn_fetch.c	/^struct ccn_fetch {$/;"	s	file:
ccn_fetch_avail	lib/ccn_fetch.c	/^ccn_fetch_avail(struct ccn_fetch_stream *fs) {$/;"	f
ccn_fetch_buffer	lib/ccn_fetch.c	/^struct ccn_fetch_buffer {$/;"	s	file:
ccn_fetch_close	lib/ccn_fetch.c	/^ccn_fetch_close(struct ccn_fetch_stream *fs) {$/;"	f
ccn_fetch_destroy	lib/ccn_fetch.c	/^ccn_fetch_destroy(struct ccn_fetch *f) {$/;"	f
ccn_fetch_flags	include/ccn/fetch.h	/^} ccn_fetch_flags;$/;"	t	typeref:enum:__anon4
ccn_fetch_flags_None	include/ccn/fetch.h	/^	ccn_fetch_flags_None = 0,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteAddRem	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteAddRem = 2,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteAll	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteAll = 0xffff$/;"	e	enum:__anon4
ccn_fetch_flags_NoteFill	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteFill = 8,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteFinal	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteFinal = 16,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteGlitch	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteGlitch = 1,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteNeed	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteNeed = 4,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteOpenClose	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteOpenClose = 64,$/;"	e	enum:__anon4
ccn_fetch_flags_NoteTimeout	include/ccn/fetch.h	/^	ccn_fetch_flags_NoteTimeout = 32,$/;"	e	enum:__anon4
ccn_fetch_get_ccn	lib/ccn_fetch.c	/^ccn_fetch_get_ccn(struct ccn_fetch *f) {$/;"	f
ccn_fetch_get_context	lib/ccn_fetch.c	/^ccn_fetch_get_context(struct ccn_fetch_stream *fs)$/;"	f
ccn_fetch_new	lib/ccn_fetch.c	/^ccn_fetch_new(struct ccn *h) {$/;"	f
ccn_fetch_next	lib/ccn_fetch.c	/^ccn_fetch_next(struct ccn_fetch *f, struct ccn_fetch_stream *fs) {$/;"	f
ccn_fetch_open	lib/ccn_fetch.c	/^ccn_fetch_open(struct ccn_fetch *f,$/;"	f
ccn_fetch_poll	lib/ccn_fetch.c	/^ccn_fetch_poll(struct ccn_fetch *f) {$/;"	f
ccn_fetch_position	lib/ccn_fetch.c	/^ccn_fetch_position(struct ccn_fetch_stream *fs) {$/;"	f
ccn_fetch_read	lib/ccn_fetch.c	/^ccn_fetch_read(struct ccn_fetch_stream *fs,$/;"	f
ccn_fetch_seek	lib/ccn_fetch.c	/^ccn_fetch_seek(struct ccn_fetch_stream *fs, intmax_t pos) {$/;"	f
ccn_fetch_set_context	lib/ccn_fetch.c	/^ccn_fetch_set_context(struct ccn_fetch_stream *fs, void *context)$/;"	f
ccn_fetch_set_debug	lib/ccn_fetch.c	/^ccn_fetch_set_debug(struct ccn_fetch *f, FILE *debug, ccn_fetch_flags flags) {$/;"	f
ccn_fetch_stream	lib/ccn_fetch.c	/^struct ccn_fetch_stream {$/;"	s	file:
ccn_fetch_tagged_nonNegativeInteger	lib/ccn_buf_decoder.c	/^ccn_fetch_tagged_nonNegativeInteger(enum ccn_dtag tt,$/;"	f
ccn_filewatch	cmd/ccnfilewatch.c	/^ccn_filewatch(const char *path,$/;"	f
ccn_flatname_append_component	lib/ccn_flatname.c	/^ccn_flatname_append_component(struct ccn_charbuf *dst,$/;"	f
ccn_flatname_append_from_ccnb	lib/ccn_flatname.c	/^ccn_flatname_append_from_ccnb(struct ccn_charbuf *dst,$/;"	f
ccn_flatname_charbuf_compare	lib/ccn_flatname.c	/^ccn_flatname_charbuf_compare(struct ccn_charbuf *a, struct ccn_charbuf *b)$/;"	f
ccn_flatname_compare	lib/ccn_flatname.c	/^ccn_flatname_compare(const unsigned char *a, size_t al, const unsigned char *b, size_t bl)$/;"	f
ccn_flatname_from_ccnb	lib/ccn_flatname.c	/^ccn_flatname_from_ccnb(struct ccn_charbuf *dst,$/;"	f
ccn_flatname_ncomps	lib/ccn_flatname.c	/^ccn_flatname_ncomps(const unsigned char *flatname, size_t size)$/;"	f
ccn_flatname_next_comp	lib/ccn_flatname.c	/^ccn_flatname_next_comp(const unsigned char *flatname, size_t size)$/;"	f
ccn_forwarding	ccnd/ccnd_private.h	/^struct ccn_forwarding {$/;"	s
ccn_forwarding	ccnr/ccnr_private.h	/^struct ccn_forwarding {$/;"	s
ccn_forwarding_entry	include/ccn/reg_mgmt.h	/^struct ccn_forwarding_entry {$/;"	s
ccn_forwarding_entry_destroy	lib/ccn_reg_mgmt.c	/^ccn_forwarding_entry_destroy(struct ccn_forwarding_entry **pfe)$/;"	f
ccn_forwarding_entry_parse	lib/ccn_reg_mgmt.c	/^ccn_forwarding_entry_parse(const unsigned char *p, size_t size)$/;"	f
ccn_generate_symmetric_key	lib/ccn_aes_keystore.c	/^ccn_generate_symmetric_key(unsigned char *keybuf, int keylength) $/;"	f
ccn_get	lib/ccn_client.c	/^ccn_get(struct ccn *h,$/;"	f
ccn_get_connect_type	lib/ccn_client.c	/^ccn_get_connect_type(struct ccn *h)$/;"	f
ccn_get_connection_fd	lib/ccn_client.c	/^ccn_get_connection_fd(struct ccn *h)$/;"	f
ccn_get_content_type	lib/ccn_client.c	/^ccn_get_content_type(const unsigned char *ccnb,$/;"	f	file:
ccn_get_header	lib/ccn_header.c	/^ccn_get_header(struct ccn *h, struct ccn_charbuf *name, int timeout)$/;"	f
ccn_get_key_digest_from_suffix	lib/ccn_client.c	/^ccn_get_key_digest_from_suffix(struct ccn *h, char *dir, char *suffix, const char *password,$/;"	f
ccn_get_password	lib/ccn_client.c	/^const char *ccn_get_password(void) $/;"	f
ccn_get_public_key	lib/ccn_client.c	/^ccn_get_public_key(struct ccn *h,$/;"	f
ccn_get_schedule	lib/ccn_client.c	/^ccn_get_schedule(struct ccn *h)$/;"	f
ccn_geterror	lib/ccn_client.c	/^ccn_geterror(struct ccn *h)$/;"	f
ccn_gettime	include/ccn/schedule.h	/^struct ccn_gettime {$/;"	s
ccn_gettime_action	include/ccn/schedule.h	/^typedef void (*ccn_gettime_action)(const struct ccn_gettime *, struct ccn_timeval *);$/;"	t
ccn_grab_buffered_output	lib/ccn_client.c	/^ccn_grab_buffered_output(struct ccn *h)$/;"	f
ccn_gripe	lib/ccn_client.c	/^ccn_gripe(struct expressed_interest *i)$/;"	f	file:
ccn_guest_prefix	lib/ccn_client.c	/^ccn_guest_prefix(struct ccn *h, struct ccn_charbuf *result, int ms)$/;"	f
ccn_handle	libexec/ccndc.h	/^    struct ccn          *ccn_handle;$/;"	m	struct:ccndc_data	typeref:struct:ccndc_data::ccn
ccn_handler	include/ccn/ccn.h	/^typedef enum ccn_upcall_res (*ccn_handler)($/;"	t	typeref:enum:ccn_handler
ccn_header	include/ccn/header.h	/^struct ccn_header {$/;"	s
ccn_header_destroy	lib/ccn_header.c	/^ccn_header_destroy(struct ccn_header **ph)$/;"	f
ccn_header_parse	lib/ccn_header.c	/^ccn_header_parse(const unsigned char *p, size_t size)$/;"	f
ccn_hmac_final	lib/ccn_signing.c	/^int ccn_hmac_final(void *ctx, unsigned char *sigret, unsigned int *siglen, EVP_PKEY *pkey) $/;"	f
ccn_hmac_init	lib/ccn_signing.c	/^int ccn_hmac_init(void *ctx, const void *key, int len, const EVP_MD *md) $/;"	f
ccn_hmac_verify_final	lib/ccn_signing.c	/^int ccn_hmac_verify_final(void *ctx, const unsigned char *sigret, unsigned int siglen, $/;"	f
ccn_indexbuf	include/ccn/indexbuf.h	/^struct ccn_indexbuf {$/;"	s
ccn_indexbuf_append	lib/ccn_indexbuf.c	/^ccn_indexbuf_append(struct ccn_indexbuf *c, const ELEMENT *p, size_t n)$/;"	f
ccn_indexbuf_append_element	lib/ccn_indexbuf.c	/^ccn_indexbuf_append_element(struct ccn_indexbuf *c, ELEMENT v)$/;"	f
ccn_indexbuf_create	lib/ccn_indexbuf.c	/^ccn_indexbuf_create(void)$/;"	f
ccn_indexbuf_destroy	lib/ccn_indexbuf.c	/^ccn_indexbuf_destroy(struct ccn_indexbuf **cbp)$/;"	f
ccn_indexbuf_member	lib/ccn_indexbuf.c	/^ccn_indexbuf_member(struct ccn_indexbuf *x, ELEMENT val)$/;"	f
ccn_indexbuf_move_to_end	lib/ccn_indexbuf.c	/^ccn_indexbuf_move_to_end(struct ccn_indexbuf *x, ELEMENT val)$/;"	f
ccn_indexbuf_move_to_front	lib/ccn_indexbuf.c	/^ccn_indexbuf_move_to_front(struct ccn_indexbuf *x, ELEMENT val)$/;"	f
ccn_indexbuf_obtain	lib/ccn_client.c	/^ccn_indexbuf_obtain(struct ccn *h)$/;"	f	file:
ccn_indexbuf_release	lib/ccn_client.c	/^ccn_indexbuf_release(struct ccn *h, struct ccn_indexbuf *c)$/;"	f	file:
ccn_indexbuf_remove_element	lib/ccn_indexbuf.c	/^ccn_indexbuf_remove_element(struct ccn_indexbuf *x, ELEMENT val)$/;"	f
ccn_indexbuf_remove_first_match	lib/ccn_indexbuf.c	/^ccn_indexbuf_remove_first_match(struct ccn_indexbuf *x, ELEMENT val)$/;"	f
ccn_indexbuf_reserve	lib/ccn_indexbuf.c	/^ccn_indexbuf_reserve(struct ccn_indexbuf *c, size_t n)$/;"	f
ccn_indexbuf_set_insert	lib/ccn_indexbuf.c	/^ccn_indexbuf_set_insert(struct ccn_indexbuf *x, ELEMENT val)$/;"	f
ccn_initiate_ccndid_fetch	lib/ccn_client.c	/^ccn_initiate_ccndid_fetch(struct ccn *h)$/;"	f	file:
ccn_initiate_key_fetch	lib/ccn_client.c	/^ccn_initiate_key_fetch(struct ccn *h,$/;"	f	file:
ccn_initiate_prefix_reg	lib/ccn_client.c	/^ccn_initiate_prefix_reg(struct ccn *h,$/;"	f	file:
ccn_interest_lifetime	lib/ccn_interest.c	/^ccn_interest_lifetime(const unsigned char *msg,$/;"	f
ccn_interest_lifetime_seconds	lib/ccn_interest.c	/^ccn_interest_lifetime_seconds(const unsigned char *msg,$/;"	f
ccn_is_final_block	lib/ccn_client.c	/^ccn_is_final_block(struct ccn_upcall_info *info)$/;"	f
ccn_is_final_pco	lib/ccn_client.c	/^ccn_is_final_pco(const unsigned char *ccnb,$/;"	f
ccn_keystore	lib/ccn_aes_keystore.c	/^struct ccn_keystore {$/;"	s	file:
ccn_keystore	lib/ccn_keystore.c	/^struct ccn_keystore {$/;"	s	file:
ccn_keystore_certificate	lib/ccn_keystore.c	/^ccn_keystore_certificate(struct ccn_keystore *p)$/;"	f
ccn_keystore_create	lib/ccn_keystore.c	/^ccn_keystore_create(void)$/;"	f
ccn_keystore_destroy	lib/ccn_keystore.c	/^ccn_keystore_destroy(struct ccn_keystore **p)$/;"	f
ccn_keystore_digest_algorithm	lib/ccn_keystore.c	/^ccn_keystore_digest_algorithm(struct ccn_keystore *p)$/;"	f
ccn_keystore_file_init	lib/ccn_keystore.c	/^ccn_keystore_file_init(char *filename, char *password,$/;"	f
ccn_keystore_init	lib/ccn_keystore.c	/^ccn_keystore_init(struct ccn_keystore *p, char *filename, char *password)$/;"	f
ccn_keystore_key	lib/ccn_keystore.c	/^ccn_keystore_key(struct ccn_keystore *p)$/;"	f
ccn_keystore_key_digest	lib/ccn_keystore.c	/^ccn_keystore_key_digest(struct ccn_keystore *p)$/;"	f
ccn_keystore_key_digest_length	lib/ccn_keystore.c	/^ccn_keystore_key_digest_length(struct ccn_keystore *p)$/;"	f
ccn_keystore_private_key	lib/ccn_keystore.c	/^ccn_keystore_private_key(struct ccn_keystore *p) {$/;"	f
ccn_keystore_public_key	lib/ccn_keystore.c	/^ccn_keystore_public_key(struct ccn_keystore *p)$/;"	f
ccn_keystore_public_key_digest	lib/ccn_keystore.c	/^ccn_keystore_public_key_digest(struct ccn_keystore *p)$/;"	f
ccn_keystore_public_key_digest_length	lib/ccn_keystore.c	/^ccn_keystore_public_key_digest_length(struct ccn_keystore *p)$/;"	f
ccn_link_state_init	ccnd/ccnd.c	/^ccn_link_state_init(struct ccnd_handle *h, struct face *face)$/;"	f	file:
ccn_load_default_key	lib/ccn_client.c	/^ccn_load_default_key(struct ccn *h,$/;"	f
ccn_load_or_create_default_key	lib/ccn_client.c	/^ccn_load_or_create_default_key(struct ccn *h)$/;"	f	file:
ccn_load_or_create_key	lib/ccn_client.c	/^ccn_load_or_create_key(struct ccn *h,$/;"	f	file:
ccn_load_private_key	lib/ccn_client.c	/^ccn_load_private_key(struct ccn *h,$/;"	f
ccn_load_signing_key	lib/ccn_client.c	/^ccn_load_signing_key(struct ccn *h,$/;"	f
ccn_locate_key	lib/ccn_client.c	/^ccn_locate_key(struct ccn *h,$/;"	f	file:
ccn_marker	include/ccn/ccn.h	/^enum ccn_marker {$/;"	g
ccn_matrix_bounds	include/ccn/matrix.h	/^struct ccn_matrix_bounds {$/;"	s
ccn_merkle_root_hash	lib/ccn_signing.c	/^int ccn_merkle_root_hash(const unsigned char *msg, size_t size,$/;"	f
ccn_name_append	lib/ccn_name_util.c	/^ccn_name_append(struct ccn_charbuf *c, const void *component, size_t n)$/;"	f
ccn_name_append_components	lib/ccn_name_util.c	/^ccn_name_append_components(struct ccn_charbuf *c,$/;"	f
ccn_name_append_flatname	lib/ccn_flatname.c	/^ccn_name_append_flatname(struct ccn_charbuf *dst,$/;"	f
ccn_name_append_nonce	lib/ccn_name_util.c	/^ccn_name_append_nonce(struct ccn_charbuf *c)$/;"	f
ccn_name_append_numeric	lib/ccn_name_util.c	/^ccn_name_append_numeric(struct ccn_charbuf *c,$/;"	f
ccn_name_append_str	lib/ccn_name_util.c	/^ccn_name_append_str(struct ccn_charbuf *c, const char *s)$/;"	f
ccn_name_chop	lib/ccn_name_util.c	/^ccn_name_chop(struct ccn_charbuf *c, struct ccn_indexbuf *components, int n)$/;"	f
ccn_name_comp_get	lib/ccn_name_util.c	/^ccn_name_comp_get(const unsigned char *data,$/;"	f
ccn_name_comp_strcmp	lib/ccn_name_util.c	/^ccn_name_comp_strcmp(const unsigned char *data,$/;"	f
ccn_name_from_uri	lib/ccn_uri.c	/^ccn_name_from_uri(struct ccn_charbuf *c, const char *uri)$/;"	f
ccn_name_init	lib/ccn_name_util.c	/^ccn_name_init(struct ccn_charbuf *c)$/;"	f
ccn_name_last_component_offset	lib/ccn_uri.c	/^ccn_name_last_component_offset(const unsigned char *ccnb, size_t size)$/;"	f	file:
ccn_name_next_sibling	lib/ccn_name_util.c	/^ccn_name_next_sibling(struct ccn_charbuf *c)$/;"	f
ccn_name_split	lib/ccn_name_util.c	/^ccn_name_split(const struct ccn_charbuf *c, struct ccn_indexbuf *components)$/;"	f
ccn_nametree	include/ccn/nametree.h	/^struct ccn_nametree {$/;"	s
ccn_nametree_action	include/ccn/nametree.h	/^typedef void (*ccn_nametree_action)(struct ccn_nametree *, struct ccny *);$/;"	t
ccn_nametree_check	lib/ccn_nametree.c	/^ccn_nametree_check(struct ccn_nametree *h)$/;"	f
ccn_nametree_compare	include/ccn/nametree.h	/^typedef int (*ccn_nametree_compare)(const unsigned char *, size_t,$/;"	t
ccn_nametree_create	lib/ccn_nametree.c	/^ccn_nametree_create(int initial_limit)$/;"	f
ccn_nametree_destroy	lib/ccn_nametree.c	/^ccn_nametree_destroy(struct ccn_nametree **ph)$/;"	f
ccn_nametree_first	lib/ccn_nametree.c	/^ccn_nametree_first(struct ccn_nametree *h)$/;"	f
ccn_nametree_grow	lib/ccn_nametree.c	/^ccn_nametree_grow(struct ccn_nametree *h)$/;"	f
ccn_nametree_last	lib/ccn_nametree.c	/^ccn_nametree_last(struct ccn_nametree *h)$/;"	f
ccn_nametree_limit	lib/ccn_nametree.c	/^ccn_nametree_limit(struct ccn_nametree *h)$/;"	f
ccn_nametree_look_ge	lib/ccn_nametree.c	/^ccn_nametree_look_ge(struct ccn_nametree *h,$/;"	f
ccn_nametree_look_gt	lib/ccn_nametree.c	/^ccn_nametree_look_gt(struct ccn_nametree *h,$/;"	f
ccn_nametree_look_le	lib/ccn_nametree.c	/^ccn_nametree_look_le(struct ccn_nametree *h,$/;"	f
ccn_nametree_look_lt	lib/ccn_nametree.c	/^ccn_nametree_look_lt(struct ccn_nametree *h,$/;"	f
ccn_nametree_lookup	lib/ccn_nametree.c	/^ccn_nametree_lookup(struct ccn_nametree *h,$/;"	f
ccn_nametree_n	lib/ccn_nametree.c	/^ccn_nametree_n(struct ccn_nametree *h)$/;"	f
ccn_note_err	lib/ccn_client.c	/^ccn_note_err(struct ccn *h)$/;"	f	file:
ccn_notify_ccndid_changed	lib/ccn_client.c	/^ccn_notify_ccndid_changed(struct ccn *h)$/;"	f	file:
ccn_output_is_pending	lib/ccn_client.c	/^ccn_output_is_pending(struct ccn *h)$/;"	f
ccn_parse_Collection_next	lib/ccn_buf_decoder.c	/^ccn_parse_Collection_next(struct ccn_buf_decoder *d,$/;"	f
ccn_parse_Collection_start	lib/ccn_buf_decoder.c	/^ccn_parse_Collection_start(struct ccn_buf_decoder *d)$/;"	f
ccn_parse_ContentObject	lib/ccn_buf_decoder.c	/^ccn_parse_ContentObject(const unsigned char *msg, size_t size,$/;"	f
ccn_parse_Exclude	lib/ccn_buf_decoder.c	/^ccn_parse_Exclude(struct ccn_buf_decoder *d)$/;"	f
ccn_parse_KeyName	lib/ccn_buf_decoder.c	/^ccn_parse_KeyName(struct ccn_buf_decoder *d, struct parsed_KeyName *x)$/;"	f	file:
ccn_parse_Link	lib/ccn_buf_decoder.c	/^ccn_parse_Link(struct ccn_buf_decoder *d,$/;"	f
ccn_parse_LinkAuthenticator	lib/ccn_buf_decoder.c	/^ccn_parse_LinkAuthenticator(struct ccn_buf_decoder *d, struct ccn_parsed_Link *pl)$/;"	f
ccn_parse_Name	lib/ccn_buf_decoder.c	/^ccn_parse_Name(struct ccn_buf_decoder *d, struct ccn_indexbuf *components)$/;"	f
ccn_parse_PublisherID	lib/ccn_buf_decoder.c	/^ccn_parse_PublisherID(struct ccn_buf_decoder *d, struct ccn_parsed_interest *pi)$/;"	f
ccn_parse_Signature	lib/ccn_buf_decoder.c	/^ccn_parse_Signature(struct ccn_buf_decoder *d, struct ccn_parsed_ContentObject *x)$/;"	f	file:
ccn_parse_SignedInfo	lib/ccn_buf_decoder.c	/^ccn_parse_SignedInfo(struct ccn_buf_decoder *d, struct ccn_parsed_ContentObject *x)$/;"	f	file:
ccn_parse_interest	lib/ccn_buf_decoder.c	/^ccn_parse_interest(const unsigned char *msg, size_t size,$/;"	f
ccn_parse_nonNegativeInteger	lib/ccn_buf_decoder.c	/^ccn_parse_nonNegativeInteger(struct ccn_buf_decoder *d)$/;"	f
ccn_parse_optional_Any_or_Bloom	lib/ccn_buf_decoder.c	/^ccn_parse_optional_Any_or_Bloom(struct ccn_buf_decoder *d)$/;"	f	file:
ccn_parse_optional_tagged_BLOB	lib/ccn_buf_decoder.c	/^ccn_parse_optional_tagged_BLOB(struct ccn_buf_decoder *d, enum ccn_dtag dtag,$/;"	f
ccn_parse_optional_tagged_UDATA	lib/ccn_buf_decoder.c	/^ccn_parse_optional_tagged_UDATA(struct ccn_buf_decoder *d, enum ccn_dtag dtag)$/;"	f
ccn_parse_optional_tagged_binary_number	lib/ccn_buf_decoder.c	/^ccn_parse_optional_tagged_binary_number(struct ccn_buf_decoder *d, enum ccn_dtag dtag,$/;"	f
ccn_parse_optional_tagged_nonNegativeInteger	lib/ccn_buf_decoder.c	/^ccn_parse_optional_tagged_nonNegativeInteger(struct ccn_buf_decoder *d, enum ccn_dtag dtag)$/;"	f
ccn_parse_required_tagged_BLOB	lib/ccn_buf_decoder.c	/^ccn_parse_required_tagged_BLOB(struct ccn_buf_decoder *d, enum ccn_dtag dtag,$/;"	f
ccn_parse_required_tagged_UDATA	lib/ccn_buf_decoder.c	/^ccn_parse_required_tagged_UDATA(struct ccn_buf_decoder *d, enum ccn_dtag dtag)$/;"	f
ccn_parse_required_tagged_binary_number	lib/ccn_buf_decoder.c	/^ccn_parse_required_tagged_binary_number(struct ccn_buf_decoder *d,$/;"	f
ccn_parse_required_tagged_timestamp	lib/ccn_buf_decoder.c	/^ccn_parse_required_tagged_timestamp(struct ccn_buf_decoder *d, enum ccn_dtag dtag)$/;"	f
ccn_parse_tagged_required_uintmax	lib/ccn_header.c	/^ccn_parse_tagged_required_uintmax(struct ccn_buf_decoder *d, enum ccn_dtag dtag, uintmax_t *result)$/;"	f
ccn_parse_tagged_string	lib/ccn_buf_decoder.c	/^ccn_parse_tagged_string(struct ccn_buf_decoder *d, enum ccn_dtag dtag, struct ccn_charbuf *store)$/;"	f
ccn_parse_timestamp	lib/ccn_buf_decoder.c	/^ccn_parse_timestamp(struct ccn_buf_decoder *d)$/;"	f
ccn_parse_uintmax	lib/ccn_buf_decoder.c	/^ccn_parse_uintmax(struct ccn_buf_decoder *d, uintmax_t *result)$/;"	f
ccn_parsed_ContentObject	include/ccn/ccn.h	/^struct ccn_parsed_ContentObject {$/;"	s
ccn_parsed_Link	include/ccn/ccn.h	/^struct ccn_parsed_Link {$/;"	s
ccn_parsed_Link_offsetid	include/ccn/ccn.h	/^enum ccn_parsed_Link_offsetid {$/;"	g
ccn_parsed_content_object_offsetid	include/ccn/ccn.h	/^enum ccn_parsed_content_object_offsetid {$/;"	g
ccn_parsed_interest	include/ccn/ccn.h	/^struct ccn_parsed_interest {$/;"	s
ccn_parsed_interest_offsetid	include/ccn/ccn.h	/^enum ccn_parsed_interest_offsetid {$/;"	g
ccn_perror	lib/ccn_client.c	/^ccn_perror(struct ccn *h, const char *s)$/;"	f
ccn_pkcs12_digest_algorithm	lib/ccn_keystore.c	/^ccn_pkcs12_digest_algorithm(struct ccn_keystore *p)$/;"	f	file:
ccn_pkcs12_keystore_destroy	lib/ccn_keystore.c	/^ccn_pkcs12_keystore_destroy(struct ccn_keystore **p)$/;"	f	file:
ccn_pkcs12_private_key	lib/ccn_keystore.c	/^ccn_pkcs12_private_key(struct ccn_keystore *p)$/;"	f	file:
ccn_pkcs12_public_key_digest	lib/ccn_keystore.c	/^ccn_pkcs12_public_key_digest(struct ccn_keystore *p)$/;"	f	file:
ccn_pkcs12_public_key_digest_length	lib/ccn_keystore.c	/^ccn_pkcs12_public_key_digest_length(struct ccn_keystore *p)$/;"	f	file:
ccn_process_input	lib/ccn_client.c	/^ccn_process_input(struct ccn *h)$/;"	f	file:
ccn_process_scheduled_operations	lib/ccn_client.c	/^ccn_process_scheduled_operations(struct ccn *h)$/;"	f
ccn_pubid_matches	lib/ccn_match.c	/^ccn_pubid_matches(const unsigned char *content_object,$/;"	f	file:
ccn_pubkey_free	lib/ccn_signing.c	/^ccn_pubkey_free(struct ccn_pkey *i_pubkey)$/;"	f
ccn_pubkey_size	lib/ccn_signing.c	/^ccn_pubkey_size(const struct ccn_pkey *i_pubkey)$/;"	f
ccn_pushout	lib/ccn_client.c	/^ccn_pushout(struct ccn *h)$/;"	f	file:
ccn_put	lib/ccn_client.c	/^ccn_put(struct ccn *h, const void *p, size_t length)$/;"	f
ccn_random_bytes	lib/ccn_signing.c	/^ccn_random_bytes(unsigned char *buf, size_t size)$/;"	f
ccn_ref_tagged_BLOB	lib/ccn_buf_decoder.c	/^ccn_ref_tagged_BLOB(enum ccn_dtag tt,$/;"	f
ccn_ref_tagged_string	lib/ccn_buf_decoder.c	/^ccn_ref_tagged_string(enum ccn_dtag dtag,$/;"	f
ccn_refresh_interest	lib/ccn_client.c	/^ccn_refresh_interest(struct ccn *h, struct expressed_interest *interest)$/;"	f	file:
ccn_reg_closure	lib/ccn_client.c	/^    struct ccn_reg_closure *ccn_reg_closure;$/;"	m	struct:interest_filter	typeref:struct:interest_filter::ccn_reg_closure	file:
ccn_reg_closure	lib/ccn_client.c	/^struct ccn_reg_closure {$/;"	s	file:
ccn_replace_handler	lib/ccn_client.c	/^ccn_replace_handler(struct ccn *h,$/;"	f	file:
ccn_reset_timeout	lib/ccn_fetch.c	/^ccn_reset_timeout(struct ccn_fetch_stream *fs) {$/;"	f
ccn_resolve_version	lib/ccn_versioning.c	/^ccn_resolve_version(struct ccn *h, struct ccn_charbuf *name,$/;"	f
ccn_run	lib/ccn_client.c	/^ccn_run(struct ccn *h, int timeout)$/;"	f
ccn_schedule	lib/ccn_schedule.c	/^struct ccn_schedule {$/;"	s	file:
ccn_schedule_cancel	lib/ccn_schedule.c	/^ccn_schedule_cancel(struct ccn_schedule *sched, struct ccn_scheduled_event *ev)$/;"	f
ccn_schedule_cancelled_event	lib/ccn_schedule.c	/^ccn_schedule_cancelled_event(struct ccn_schedule *sched, void *clienth,$/;"	f	file:
ccn_schedule_create	lib/ccn_schedule.c	/^ccn_schedule_create(void *clienth, const struct ccn_gettime *ccnclock)$/;"	f
ccn_schedule_destroy	lib/ccn_schedule.c	/^ccn_schedule_destroy(struct ccn_schedule **schedp)$/;"	f
ccn_schedule_event	lib/ccn_schedule.c	/^ccn_schedule_event($/;"	f
ccn_schedule_get_gettime	lib/ccn_schedule.c	/^ccn_schedule_get_gettime(struct ccn_schedule *schedp) {$/;"	f
ccn_schedule_heap_item	lib/ccn_schedule.c	/^struct ccn_schedule_heap_item {$/;"	s	file:
ccn_schedule_run	lib/ccn_schedule.c	/^ccn_schedule_run(struct ccn_schedule *sched)$/;"	f
ccn_schedule_run_next	lib/ccn_schedule.c	/^ccn_schedule_run_next(struct ccn_schedule *sched)$/;"	f	file:
ccn_scheduled_action	include/ccn/schedule.h	/^typedef int (*ccn_scheduled_action)($/;"	t
ccn_scheduled_event	include/ccn/schedule.h	/^struct ccn_scheduled_event {$/;"	s
ccn_seqfunc	lib/ccn_bulkdata.c	/^typedef void ccn_seqfunc(uintmax_t x, void *param,$/;"	t	file:
ccn_seqw_batch_end	lib/ccn_seqwriter.c	/^ccn_seqw_batch_end(struct ccn_seqwriter *w)$/;"	f
ccn_seqw_batch_start	lib/ccn_seqwriter.c	/^ccn_seqw_batch_start(struct ccn_seqwriter *w)$/;"	f
ccn_seqw_close	lib/ccn_seqwriter.c	/^ccn_seqw_close(struct ccn_seqwriter *w)$/;"	f
ccn_seqw_create	lib/ccn_seqwriter.c	/^ccn_seqw_create(struct ccn *h, struct ccn_charbuf *name)$/;"	f
ccn_seqw_get_name	lib/ccn_seqwriter.c	/^ccn_seqw_get_name(struct ccn_seqwriter *w, struct ccn_charbuf *nv)$/;"	f
ccn_seqw_possible_interest	lib/ccn_seqwriter.c	/^ccn_seqw_possible_interest(struct ccn_seqwriter *w)$/;"	f
ccn_seqw_set_block_limits	lib/ccn_seqwriter.c	/^ccn_seqw_set_block_limits(struct ccn_seqwriter *w, int l, int h)$/;"	f
ccn_seqw_set_freshness	lib/ccn_seqwriter.c	/^ccn_seqw_set_freshness(struct ccn_seqwriter *w, int freshness)$/;"	f
ccn_seqw_set_key_digest	lib/ccn_seqwriter.c	/^ccn_seqw_set_key_digest(struct ccn_seqwriter *w, const unsigned char *key_digest, int digestlen)$/;"	f
ccn_seqw_write	lib/ccn_seqwriter.c	/^ccn_seqw_write(struct ccn_seqwriter *w, const void *buf, size_t size)$/;"	f
ccn_seqwriter	lib/ccn_seqwriter.c	/^struct ccn_seqwriter {$/;"	s	file:
ccn_set_connect_type	lib/ccn_client.c	/^ccn_set_connect_type(struct ccn *h, const char *name)$/;"	f
ccn_set_interest_filter	lib/ccn_client.c	/^ccn_set_interest_filter(struct ccn *h, struct ccn_charbuf *namebuf,$/;"	f
ccn_set_interest_filter_with_flags	lib/ccn_client.c	/^ccn_set_interest_filter_with_flags(struct ccn *h, struct ccn_charbuf *namebuf,$/;"	f
ccn_set_run_timeout	lib/ccn_client.c	/^ccn_set_run_timeout(struct ccn *h, int timeout)$/;"	f
ccn_set_schedule	lib/ccn_client.c	/^ccn_set_schedule(struct ccn *h, struct ccn_schedule *schedule)$/;"	f
ccn_seterror	lib/ccn_client.c	/^ccn_seterror(struct ccn *h, int error_code)$/;"	f
ccn_setup_sockaddr_in	lib/ccn_setup_sockaddr_un.c	/^ccn_setup_sockaddr_in(const char *name, struct sockaddr *result, int length)$/;"	f
ccn_setup_sockaddr_un	lib/ccn_setup_sockaddr_un.c	/^ccn_setup_sockaddr_un(const char *portstr, struct sockaddr_un *result)$/;"	f
ccn_setup_socket	lib/ccn_sockcreate.c	/^ccn_setup_socket(const struct ccn_sockdescr *descr,$/;"	f
ccn_sigc	lib/ccn_signing.c	/^struct ccn_sigc {$/;"	s	file:
ccn_sigc_create	lib/ccn_signing.c	/^ccn_sigc_create(void)$/;"	f
ccn_sigc_destroy	lib/ccn_signing.c	/^ccn_sigc_destroy(struct ccn_sigc **ctx)$/;"	f
ccn_sigc_final	lib/ccn_signing.c	/^ccn_sigc_final(struct ccn_sigc *ctx, struct ccn_signature *signature, size_t *size, const struct ccn_pkey *priv_key)$/;"	f
ccn_sigc_init	lib/ccn_signing.c	/^ccn_sigc_init(struct ccn_sigc *ctx, const char *digest, const struct ccn_pkey *key)$/;"	f
ccn_sigc_signature_max_size	lib/ccn_signing.c	/^ccn_sigc_signature_max_size(struct ccn_sigc *ctx, const struct ccn_pkey *key)$/;"	f
ccn_sigc_update	lib/ccn_signing.c	/^ccn_sigc_update(struct ccn_sigc *ctx, const void *data, size_t size)$/;"	f
ccn_sign_content	lib/ccn_client.c	/^ccn_sign_content(struct ccn *h,$/;"	f
ccn_signed_info_create	lib/ccn_buf_encoder.c	/^ccn_signed_info_create(struct ccn_charbuf *c,$/;"	f
ccn_signing_params	include/ccn/ccn.h	/^struct ccn_signing_params {$/;"	s
ccn_skeleton_decode	lib/ccn_coding.c	/^ccn_skeleton_decode(struct ccn_skeleton_decoder *d,$/;"	f
ccn_skeleton_decoder	include/ccn/coding.h	/^struct ccn_skeleton_decoder { \/* initialize to all 0 *\/$/;"	s
ccn_sockdescr	include/ccn/sockcreate.h	/^struct ccn_sockdescr {$/;"	s
ccn_sockets	include/ccn/sockcreate.h	/^struct ccn_sockets {$/;"	s
ccn_strategy	ccnd/ccnd_private.h	/^struct ccn_strategy {$/;"	s
ccn_strategy_op	ccnd/ccnd.c	/^enum ccn_strategy_op {$/;"	g	file:
ccn_stuff_interest	ccnd/ccnd.c	/^ccn_stuff_interest(struct ccnd_handle *h,$/;"	f	file:
ccn_tagdict	lib/ccn_dtag_table.c	/^static const struct ccn_dict_entry ccn_tagdict[] = {$/;"	v	typeref:struct:ccn_dict_entry	file:
ccn_timeval	include/ccn/schedule.h	/^struct ccn_timeval {$/;"	s
ccn_traversal	lib/ccn_traverse.c	/^struct ccn_traversal {$/;"	s	file:
ccn_tt	include/ccn/coding.h	/^enum ccn_tt {$/;"	g
ccn_upcall_info	include/ccn/ccn.h	/^struct ccn_upcall_info {$/;"	s
ccn_upcall_kind	include/ccn/ccn.h	/^enum ccn_upcall_kind {$/;"	g
ccn_upcall_res	include/ccn/ccn.h	/^enum ccn_upcall_res {$/;"	g
ccn_update_refresh_us	lib/ccn_client.c	/^ccn_update_refresh_us(struct ccn *h, struct timeval *tv)$/;"	f	file:
ccn_uri_append	lib/ccn_uri.c	/^ccn_uri_append(struct ccn_charbuf *c,$/;"	f
ccn_uri_append_flatname	lib/ccn_flatname.c	/^ccn_uri_append_flatname(struct ccn_charbuf *uri,$/;"	f
ccn_uri_append_mixedescaped	lib/ccn_uri.c	/^ccn_uri_append_mixedescaped(struct ccn_charbuf *c,$/;"	f
ccn_uri_append_percentescaped	lib/ccn_uri.c	/^ccn_uri_append_percentescaped(struct ccn_charbuf *c,$/;"	f
ccn_verify_content	lib/ccn_client.c	/^ccn_verify_content(struct ccn *h,$/;"	f
ccn_verify_signature	lib/ccn_signing.c	/^int ccn_verify_signature(const unsigned char *msg,$/;"	f
ccn_wrappedtime	ccnd/ccnd_private.h	/^typedef uint32_t ccn_wrappedtime;$/;"	t
ccnb	ccnd/ccnd_private.h	/^    unsigned char *ccnb;        \/**< ccnb-encoded ContentObject *\/$/;"	m	struct:content_entry
ccnb_append_Link	lib/ccn_buf_encoder.c	/^ccnb_append_Link(struct ccn_charbuf *buf,$/;"	f
ccnb_append_face_instance	lib/ccn_face_mgmt.c	/^ccnb_append_face_instance(struct ccn_charbuf *c,$/;"	f
ccnb_append_forwarding_entry	lib/ccn_reg_mgmt.c	/^ccnb_append_forwarding_entry(struct ccn_charbuf *c,$/;"	f
ccnb_append_header	lib/ccn_header.c	/^ccnb_append_header(struct ccn_charbuf *c,$/;"	f
ccnb_append_now_blob	lib/ccn_buf_encoder.c	/^ccnb_append_now_blob(struct ccn_charbuf *c, enum ccn_marker marker)$/;"	f
ccnb_append_number	lib/ccn_buf_encoder.c	/^ccnb_append_number(struct ccn_charbuf *c, int nni)$/;"	f
ccnb_append_tagged_binary_number	lib/ccn_buf_encoder.c	/^ccnb_append_tagged_binary_number(struct ccn_charbuf *cb,$/;"	f
ccnb_append_tagged_blob	lib/ccn_buf_encoder.c	/^ccnb_append_tagged_blob(struct ccn_charbuf *c,$/;"	f
ccnb_append_tagged_udata	lib/ccn_buf_encoder.c	/^ccnb_append_tagged_udata(struct ccn_charbuf *c,$/;"	f
ccnb_append_timestamp_blob	lib/ccn_buf_encoder.c	/^ccnb_append_timestamp_blob(struct ccn_charbuf *c,$/;"	f
ccnb_element_begin	lib/ccn_buf_encoder.c	/^ccnb_element_begin(struct ccn_charbuf *c, enum ccn_dtag dtag)$/;"	f
ccnb_element_end	lib/ccn_buf_encoder.c	/^int ccnb_element_end(struct ccn_charbuf *c)$/;"	f
ccnb_tagged_putf	lib/ccn_buf_encoder.c	/^ccnb_tagged_putf(struct ccn_charbuf *c,$/;"	f
ccnbtreetest_main	lib/ccnbtreetest.c	/^ccnbtreetest_main(int argc, char **argv)$/;"	f
ccnbx	cmd/ccnbx.c	/^ccnbx(const char *path, const char *selector, int options) {$/;"	f	file:
ccnd_adjacency_offer_or_commit_req	ccnd/ccnd_internal_client.c	/^ccnd_adjacency_offer_or_commit_req(struct ccnd_handle *ccnd, struct face *face)$/;"	f
ccnd_answer_by_guid	ccnd/ccnd_internal_client.c	/^ccnd_answer_by_guid(struct ccnd_handle *ccnd, struct ccn_upcall_info *info)$/;"	f	file:
ccnd_answer_req	ccnd/ccnd_internal_client.c	/^ccnd_answer_req(struct ccn_closure *selfp,$/;"	f	file:
ccnd_append_excludes	ccnd/ccnd_msg.c	/^ccnd_append_excludes(struct ccn_charbuf *c,$/;"	f
ccnd_append_face_guid	ccnd/ccnd.c	/^ccnd_append_face_guid(struct ccnd_handle *h, struct ccn_charbuf *cb,$/;"	f
ccnd_close_fd	ccnd/ccnd.c	/^ccnd_close_fd(struct ccnd_handle *h, unsigned faceid, int *pfd)$/;"	f	file:
ccnd_collect_stats	ccnd/ccnd_stats.c	/^ccnd_collect_stats(struct ccnd_handle *h, struct ccnd_stats *ans)$/;"	f	file:
ccnd_colorhash	ccnd/ccnd_stats.c	/^ccnd_colorhash(struct ccnd_handle *h)$/;"	f	file:
ccnd_create	ccnd/ccnd.c	/^ccnd_create(const char *progname, ccnd_logger logger, void *loggerdata)$/;"	f
ccnd_debug_ccnb	ccnd/ccnd_msg.c	/^ccnd_debug_ccnb(struct ccnd_handle *h,$/;"	f
ccnd_debug_content	ccnd/ccnd_msg.c	/^ccnd_debug_content(struct ccnd_handle *h,$/;"	f
ccnd_debug_nonce	ccnd/ccnd.c	/^ccnd_debug_nonce(struct ccnd_handle *h, struct face *face, unsigned char *s) {$/;"	f	file:
ccnd_destroy	ccnd/ccnd.c	/^ccnd_destroy(struct ccnd_handle **pccnd)$/;"	f
ccnd_destroy_face	ccnd/ccnd.c	/^ccnd_destroy_face(struct ccnd_handle *h, unsigned faceid)$/;"	f
ccnd_do_solicit	ccnd/ccnd_internal_client.c	/^ccnd_do_solicit(struct ccn_schedule *sched,$/;"	f	file:
ccnd_face_from_faceid	ccnd/ccnd.c	/^ccnd_face_from_faceid(struct ccnd_handle *h, unsigned faceid)$/;"	f
ccnd_face_meter_index	ccnd/ccnd_private.h	/^enum ccnd_face_meter_index {$/;"	g
ccnd_face_status_change	ccnd/ccnd_internal_client.c	/^ccnd_face_status_change(struct ccnd_handle *ccnd, unsigned faceid)$/;"	f
ccnd_faceid_from_guid	ccnd/ccnd.c	/^ccnd_faceid_from_guid(struct ccnd_handle *h,$/;"	f
ccnd_flush_guid_cob	ccnd/ccnd_internal_client.c	/^ccnd_flush_guid_cob(struct ccn_schedule *sched,$/;"	f	file:
ccnd_forget_face_guid	ccnd/ccnd.c	/^ccnd_forget_face_guid(struct ccnd_handle *h, struct face *face)$/;"	f
ccnd_generate_face_guid	ccnd/ccnd.c	/^ccnd_generate_face_guid(struct ccnd_handle *h, struct face *face, int size,$/;"	f
ccnd_get_local_sockname	ccnd/ccnd.c	/^ccnd_get_local_sockname(void)$/;"	f	file:
ccnd_getboundsocket	ccnd/ccnd.c	/^ccnd_getboundsocket(void *dat, struct sockaddr *who, socklen_t wholen)$/;"	f	file:
ccnd_gettime	ccnd/ccnd.c	/^ccnd_gettime(const struct ccn_gettime *self, struct ccn_timeval *result)$/;"	f	file:
ccnd_handle	ccnd/ccnd_private.h	/^struct ccnd_handle {$/;"	s
ccnd_id	ccnd/ccnd_private.h	/^    unsigned char ccnd_id[32];      \/**< sha256 digest of our public key *\/$/;"	m	struct:ccnd_handle
ccnd_id	include/ccn/face_mgmt.h	/^    const unsigned char *ccnd_id;$/;"	m	struct:ccn_face_instance
ccnd_id	include/ccn/reg_mgmt.h	/^    const unsigned char *ccnd_id;$/;"	m	struct:ccn_forwarding_entry
ccnd_id	libexec/ccndc.h	/^    char                ccnd_id[32];       \/\/id of local ccnd$/;"	m	struct:ccndc_data
ccnd_id_size	include/ccn/face_mgmt.h	/^    size_t ccnd_id_size;$/;"	m	struct:ccn_face_instance
ccnd_id_size	include/ccn/reg_mgmt.h	/^    size_t ccnd_id_size;$/;"	m	struct:ccn_forwarding_entry
ccnd_id_size	libexec/ccndc.h	/^    size_t              ccnd_id_size;$/;"	m	struct:ccndc_data
ccnd_init_face_guid_cob	ccnd/ccnd_internal_client.c	/^ccnd_init_face_guid_cob(struct ccnd_handle *ccnd, struct face *face)$/;"	f	file:
ccnd_init_internal_keystore	ccnd/ccnd_internal_client.c	/^ccnd_init_internal_keystore(struct ccnd_handle *ccnd)$/;"	f
ccnd_init_service_ccnb	ccnd/ccnd_internal_client.c	/^ccnd_init_service_ccnb(struct ccnd_handle *ccnd, const char *baseuri, int freshness)$/;"	f	file:
ccnd_internal_client_has_somthing_to_say	ccnd/ccnd.c	/^ccnd_internal_client_has_somthing_to_say(struct ccnd_handle *h)$/;"	f
ccnd_internal_client_refresh	ccnd/ccnd_internal_client.c	/^ccnd_internal_client_refresh(struct ccn_schedule *sched,$/;"	f	file:
ccnd_internal_client_start	ccnd/ccnd_internal_client.c	/^ccnd_internal_client_start(struct ccnd_handle *ccnd)$/;"	f
ccnd_internal_client_stop	ccnd/ccnd_internal_client.c	/^ccnd_internal_client_stop(struct ccnd_handle *ccnd)$/;"	f
ccnd_listen_on	ccnd/ccnd.c	/^ccnd_listen_on(struct ccnd_handle *h, const char *addrs)$/;"	f	file:
ccnd_listen_on_address	ccnd/ccnd.c	/^ccnd_listen_on_address(struct ccnd_handle *h, const char *addr)$/;"	f	file:
ccnd_listen_on_wildcards	ccnd/ccnd.c	/^ccnd_listen_on_wildcards(struct ccnd_handle *h)$/;"	f	file:
ccnd_logger	ccnd/ccnd_private.h	/^typedef int (*ccnd_logger)(void *loggerdata, const char *format, va_list ap);$/;"	t
ccnd_meter	ccnd/ccnd_stats.c	/^struct ccnd_meter {$/;"	s	file:
ccnd_meter_bump	ccnd/ccnd_stats.c	/^ccnd_meter_bump(struct ccnd_handle *h, struct ccnd_meter *m, unsigned amt)$/;"	f
ccnd_meter_create	ccnd/ccnd_stats.c	/^ccnd_meter_create(struct ccnd_handle *h, const char *what)$/;"	f
ccnd_meter_destroy	ccnd/ccnd_stats.c	/^ccnd_meter_destroy(struct ccnd_meter **pm)$/;"	f
ccnd_meter_init	ccnd/ccnd_stats.c	/^ccnd_meter_init(struct ccnd_handle *h, struct ccnd_meter *m, const char *what)$/;"	f
ccnd_meter_rate	ccnd/ccnd_stats.c	/^ccnd_meter_rate(struct ccnd_handle *h, struct ccnd_meter *m)$/;"	f
ccnd_meter_total	ccnd/ccnd_stats.c	/^ccnd_meter_total(struct ccnd_meter *m)$/;"	f
ccnd_msg	ccnd/ccnd_msg.c	/^ccnd_msg(struct ccnd_handle *h, const char *fmt, ...)$/;"	f
ccnd_n_stale	ccnd/ccnd.c	/^ccnd_n_stale(struct ccnd_handle *h)$/;"	f
ccnd_nack	ccnd/ccnd.c	/^ccnd_nack(struct ccnd_handle *h, struct ccn_charbuf *reply_body,$/;"	f	file:
ccnd_new_face_msg	ccnd/ccnd.c	/^ccnd_new_face_msg(struct ccnd_handle *h, struct face *face)$/;"	f	file:
ccnd_notice_push	ccnd/ccnd_internal_client.c	/^ccnd_notice_push(struct ccn_schedule *sched,$/;"	f	file:
ccnd_parse_uri_list	ccnd/ccnd.c	/^ccnd_parse_uri_list(struct ccnd_handle *h, const char *what, const char *uris)$/;"	f	file:
ccnd_plain_nonce	ccnd/ccnd.c	/^ccnd_plain_nonce(struct ccnd_handle *h, struct face *face, unsigned char *s) {$/;"	f	file:
ccnd_reg_ccnx_ccndid	ccnd/ccnd_internal_client.c	/^ccnd_reg_ccnx_ccndid(struct ccnd_handle *ccnd)$/;"	f	file:
ccnd_reg_prefix	ccnd/ccnd.c	/^ccnd_reg_prefix(struct ccnd_handle *h,$/;"	f	file:
ccnd_reg_uri	ccnd/ccnd.c	/^ccnd_reg_uri(struct ccnd_handle *h,$/;"	f
ccnd_reg_uri_list	ccnd/ccnd.c	/^ccnd_reg_uri_list(struct ccnd_handle *h,$/;"	f
ccnd_register_adjacency	ccnd/ccnd_internal_client.c	/^ccnd_register_adjacency(struct ccnd_handle *ccnd, struct face *face,$/;"	f	file:
ccnd_req_destroyface	ccnd/ccnd.c	/^ccnd_req_destroyface(struct ccnd_handle *h,$/;"	f
ccnd_req_guest	ccnd/ccnd_internal_client.c	/^ccnd_req_guest(struct ccn_closure *selfp,$/;"	f	file:
ccnd_req_newface	ccnd/ccnd.c	/^ccnd_req_newface(struct ccnd_handle *h,$/;"	f
ccnd_req_prefix_or_self_reg	ccnd/ccnd.c	/^ccnd_req_prefix_or_self_reg(struct ccnd_handle *h,$/;"	f	file:
ccnd_req_prefixreg	ccnd/ccnd.c	/^ccnd_req_prefixreg(struct ccnd_handle *h,$/;"	f
ccnd_req_selfreg	ccnd/ccnd.c	/^ccnd_req_selfreg(struct ccnd_handle *h,$/;"	f
ccnd_req_unreg	ccnd/ccnd.c	/^ccnd_req_unreg(struct ccnd_handle *h,$/;"	f
ccnd_reseed	ccnd/ccnd.c	/^ccnd_reseed(struct ccnd_handle *h)$/;"	f	file:
ccnd_run	ccnd/ccnd.c	/^ccnd_run(struct ccnd_handle *h)$/;"	f
ccnd_send	ccnd/ccnd.c	/^ccnd_send(struct ccnd_handle *h,$/;"	f
ccnd_set_face_guid	ccnd/ccnd.c	/^ccnd_set_face_guid(struct ccnd_handle *h, struct face *face,$/;"	f
ccnd_setsockopt_v6only	ccnd/ccnd.c	/^ccnd_setsockopt_v6only(struct ccnd_handle *h, int fd)$/;"	f
ccnd_shutdown_listeners	ccnd/ccnd.c	/^ccnd_shutdown_listeners(struct ccnd_handle *h)$/;"	f	file:
ccnd_start_notice	ccnd/ccnd_internal_client.c	/^ccnd_start_notice(struct ccnd_handle *ccnd)$/;"	f	file:
ccnd_stats	ccnd/ccnd_stats.c	/^struct ccnd_stats {$/;"	s	file:
ccnd_stats_handle_http_connection	ccnd/ccnd_stats.c	/^ccnd_stats_handle_http_connection(struct ccnd_handle *h, struct face *face)$/;"	f
ccnd_stats_http_set_debug	ccnd/ccnd_stats.c	/^ccnd_stats_http_set_debug(struct ccnd_handle *h, struct face *face, int level)$/;"	f	file:
ccnd_uri_listen	ccnd/ccnd_internal_client.c	/^ccnd_uri_listen(struct ccnd_handle *ccnd, const char *uri,$/;"	f	file:
ccnd_usage_message	ccnd/ccnd_msg.c	/^const char *ccnd_usage_message =$/;"	v
ccndc_add	libexec/ccndc.c	/^ccndc_add(struct ccndc_data *self,$/;"	f
ccndc_create	libexec/ccndc.c	/^ccndc_create(struct ccndc_data *self,$/;"	f
ccndc_daemonize	libexec/ccndc-srv.c	/^ccndc_daemonize(struct ccndc_data *ccndc)$/;"	f
ccndc_data	libexec/ccndc.h	/^struct ccndc_data$/;"	s
ccndc_del	libexec/ccndc.c	/^ccndc_del(struct ccndc_data *self,$/;"	f
ccndc_destroy	libexec/ccndc.c	/^ccndc_destroy(struct ccndc_data *self,$/;"	f
ccndc_destroy_data	libexec/ccndc.c	/^ccndc_destroy_data(struct ccndc_data **data) {$/;"	f
ccndc_destroyface	libexec/ccndc.c	/^ccndc_destroyface(struct ccndc_data *self,$/;"	f
ccndc_dispatch_cmd	libexec/ccndc.c	/^ccndc_dispatch_cmd(struct ccndc_data *ccndc,$/;"	f
ccndc_do_face_action	libexec/ccndc.c	/^ccndc_do_face_action(struct ccndc_data *self,$/;"	f
ccndc_do_prefix_action	libexec/ccndc.c	/^ccndc_do_prefix_action(struct ccndc_data *self,$/;"	f
ccndc_fatal	libexec/ccndc-log.c	/^ccndc_fatal(int lineno, const char *format, ...)$/;"	f
ccndc_get_ccnd_id	libexec/ccndc.c	/^ccndc_get_ccnd_id(struct ccndc_data *self)$/;"	f
ccndc_initialize_data	libexec/ccndc.c	/^ccndc_initialize_data(void) {$/;"	f
ccndc_note	libexec/ccndc-log.c	/^ccndc_note(int lineno, const char *format, ...)$/;"	f
ccndc_query_srv	libexec/ccndc-srv.c	/^ccndc_query_srv(const unsigned char *domain, int domain_size,$/;"	f
ccndc_renew	libexec/ccndc.c	/^ccndc_renew(struct ccndc_data *self,$/;"	f
ccndc_srv	libexec/ccndc.c	/^ccndc_srv(struct ccndc_data *self,$/;"	f
ccndc_warn	libexec/ccndc-log.c	/^ccndc_warn(int lineno, const char *format, ...)$/;"	f
ccndid	lib/ccn_client.c	/^    struct ccn_charbuf *ccndid;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_charbuf	file:
ccnr	ccnr/ccnr_proto.h	/^    struct ccnr_handle *ccnr;$/;"	m	struct:ccnr_expect_content	typeref:struct:ccnr_expect_content::ccnr_handle
ccnr_acc_in_hwm	ccnr/ccnr_sync.c	/^ccnr_acc_in_hwm(struct ccnr_handle *ccnr, ccnr_accession a, ccnr_hwm hwm)$/;"	f
ccnr_accession	ccnr/ccnr_private.h	/^typedef struct ccnr_accession_rep {unsigned a; unsigned b;} ccnr_accession;$/;"	t	typeref:struct:ccnr_accession_rep
ccnr_accession	ccnr/ccnr_private.h	/^typedef struct intentionally_incomplete *ccnr_accession;$/;"	t	typeref:struct:intentionally_incomplete
ccnr_accession	ccnr/ccnr_private.h	/^typedef uint_least64_t ccnr_accession;$/;"	t
ccnr_accession_compare	ccnr/ccnr_sync.c	/^ccnr_accession_compare(struct ccnr_handle *ccnr, ccnr_accession x, ccnr_accession y)$/;"	f
ccnr_accession_decode	ccnr/ccnr_sync.c	/^ccnr_accession_decode(struct ccnr_handle *ccnr, uintmax_t encoded)$/;"	f
ccnr_accession_encode	ccnr/ccnr_sync.c	/^ccnr_accession_encode(struct ccnr_handle *ccnr, ccnr_accession a)$/;"	f
ccnr_accession_rep	ccnr/ccnr_private.h	/^typedef struct ccnr_accession_rep {unsigned a; unsigned b;} ccnr_accession;$/;"	s
ccnr_answer_req	ccnr/ccnr_internal_client.c	/^ccnr_answer_req(struct ccn_closure *selfp,$/;"	f
ccnr_close_fd	ccnr/ccnr_io.c	/^ccnr_close_fd(struct ccnr_handle *h, unsigned filedesc, int *pfd)$/;"	f
ccnr_collect_stats	ccnr/ccnr_stats.c	/^ccnr_collect_stats(struct ccnr_handle *h, struct ccnr_stats *ans)$/;"	f	file:
ccnr_colorhash	ccnr/ccnr_stats.c	/^ccnr_colorhash(struct ccnr_handle *h)$/;"	f	file:
ccnr_cookie	ccnr/ccnr_private.h	/^typedef unsigned ccnr_cookie;$/;"	t
ccnr_debug_ccnb	ccnr/ccnr_msg.c	/^ccnr_debug_ccnb(struct ccnr_handle *h,$/;"	f
ccnr_debug_content	ccnr/ccnr_store.c	/^ccnr_debug_content(struct ccnr_handle *h,$/;"	f
ccnr_direct_client_refresh	ccnr/ccnr_internal_client.c	/^ccnr_direct_client_refresh(struct ccn_schedule *sched,$/;"	f	file:
ccnr_direct_client_start	ccnr/ccnr_internal_client.c	/^ccnr_direct_client_start(struct ccnr_handle *ccnr)$/;"	f
ccnr_direct_client_stop	ccnr/ccnr_internal_client.c	/^ccnr_direct_client_stop(struct ccnr_handle *ccnr)$/;"	f
ccnr_expect_content	ccnr/ccnr_proto.h	/^struct ccnr_expect_content {$/;"	s
ccnr_face_meter_index	ccnr/ccnr_private.h	/^enum ccnr_face_meter_index {$/;"	g
ccnr_face_status_change	ccnr/ccnr_internal_client.c	/^ccnr_face_status_change(struct ccnr_handle *ccnr, unsigned filedesc)$/;"	f
ccnr_handle	ccnr/ccnr_private.h	/^struct ccnr_handle {$/;"	s
ccnr_hwm	ccnr/ccnr_private.h	/^typedef uintmax_t ccnr_hwm;$/;"	t
ccnr_hwm_compare	ccnr/ccnr_sync.c	/^ccnr_hwm_compare(struct ccnr_handle *ccnr, ccnr_hwm x, ccnr_hwm y)$/;"	f
ccnr_hwm_decode	ccnr/ccnr_sync.c	/^ccnr_hwm_decode(struct ccnr_handle *ccnr, uintmax_t encoded)$/;"	f
ccnr_hwm_encode	ccnr/ccnr_sync.c	/^ccnr_hwm_encode(struct ccnr_handle *ccnr, ccnr_hwm hwm)$/;"	f
ccnr_hwm_merge	ccnr/ccnr_sync.c	/^ccnr_hwm_merge(struct ccnr_handle *ccnr, ccnr_hwm x, ccnr_hwm y)$/;"	f
ccnr_hwm_update	ccnr/ccnr_sync.c	/^ccnr_hwm_update(struct ccnr_handle *ccnr, ccnr_hwm hwm, ccnr_accession a)$/;"	f
ccnr_id	ccnr/ccnr_private.h	/^    unsigned char ccnr_id[32];      \/**< sha256 digest of our public key *\/$/;"	m	struct:ccnr_handle
ccnr_init_policy_cob	ccnr/ccnr_init.c	/^ccnr_init_policy_cob(struct ccnr_handle *ccnr, struct ccn *h,$/;"	f	file:
ccnr_init_policy_link_cob	ccnr/ccnr_init.c	/^ccnr_init_policy_link_cob(struct ccnr_handle *ccnr, struct ccn *h,$/;"	f
ccnr_init_repo_keystore	ccnr/ccnr_internal_client.c	/^ccnr_init_repo_keystore(struct ccnr_handle *ccnr, struct ccn *h)$/;"	f
ccnr_init_service_ccnb	ccnr/ccnr_internal_client.c	/^ccnr_init_service_ccnb(struct ccnr_handle *ccnr, struct ccn *h, const char *baseuri, int freshness)$/;"	f	file:
ccnr_internal_client_refresh	ccnr/ccnr_internal_client.c	/^ccnr_internal_client_refresh(struct ccn_schedule *sched,$/;"	f	file:
ccnr_internal_client_start	ccnr/ccnr_internal_client.c	/^ccnr_internal_client_start(struct ccnr_handle *ccnr)$/;"	f
ccnr_internal_client_stop	ccnr/ccnr_internal_client.c	/^ccnr_internal_client_stop(struct ccnr_handle *ccnr)$/;"	f
ccnr_keyid	ccnr/ccnr_private.h	/^    struct ccn_charbuf *ccnr_keyid; \/**< public key digest in keyid format %C1.M.K.%00... *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_charbuf
ccnr_logger	ccnr/ccnr_private.h	/^typedef int (*ccnr_logger)(void *loggerdata, const char *format, va_list ap);$/;"	t
ccnr_max_accession	ccnr/ccnr_private.h	/^struct ccnr_accession_rep ccnr_max_accession;$/;"	v	typeref:struct:ccnr_accession_rep
ccnr_meter	ccnr/ccnr_stats.c	/^struct ccnr_meter {$/;"	s	file:
ccnr_meter_bump	ccnr/ccnr_stats.c	/^ccnr_meter_bump(struct ccnr_handle *h, struct ccnr_meter *m, unsigned amt)$/;"	f
ccnr_meter_create	ccnr/ccnr_stats.c	/^ccnr_meter_create(struct ccnr_handle *h, const char *what)$/;"	f
ccnr_meter_destroy	ccnr/ccnr_stats.c	/^ccnr_meter_destroy(struct ccnr_meter **pm)$/;"	f
ccnr_meter_init	ccnr/ccnr_stats.c	/^ccnr_meter_init(struct ccnr_handle *h, struct ccnr_meter *m, const char *what)$/;"	f
ccnr_meter_rate	ccnr/ccnr_stats.c	/^ccnr_meter_rate(struct ccnr_handle *h, struct ccnr_meter *m)$/;"	f
ccnr_meter_total	ccnr/ccnr_stats.c	/^ccnr_meter_total(struct ccnr_meter *m)$/;"	f
ccnr_min_accession	ccnr/ccnr_private.h	/^struct ccnr_accession_rep ccnr_min_accession;$/;"	v	typeref:struct:ccnr_accession_rep
ccnr_msg	ccnr/ccnr_msg.c	/^ccnr_msg(struct ccnr_handle *h, const char *fmt, ...)$/;"	f
ccnr_msg_level_from_string	ccnr/ccnr_msg.c	/^ccnr_msg_level_from_string(const char *s)$/;"	f
ccnr_msg_level_from_string	sync/SyncTest.c	/^ccnr_msg_level_from_string(const char *s)$/;"	f
ccnr_notice_push	ccnr/ccnr_internal_client.c	/^ccnr_notice_push(struct ccn_schedule *sched,$/;"	f	file:
ccnr_null_accession	ccnr/ccnr_private.h	/^struct ccnr_accession_rep ccnr_null_accession;$/;"	v	typeref:struct:ccnr_accession_rep
ccnr_parsed_policy	ccnr/ccnr_proto.h	/^struct ccnr_parsed_policy {$/;"	s
ccnr_parsed_policy_create	ccnr/ccnr_init.c	/^ccnr_parsed_policy_create(void)$/;"	f
ccnr_parsed_policy_destroy	ccnr/ccnr_init.c	/^ccnr_parsed_policy_destroy(struct ccnr_parsed_policy **ppp)$/;"	f
ccnr_r_io_fdholder_from_fd	ccnr/ccnr_io.c	/^ccnr_r_io_fdholder_from_fd(struct ccnr_handle *h, unsigned filedesc)$/;"	f
ccnr_stats	ccnr/ccnr_stats.c	/^struct ccnr_stats {$/;"	s	file:
ccnr_stats_handle_http_connection	ccnr/ccnr_stats.c	/^ccnr_stats_handle_http_connection(struct ccnr_handle *h, struct fdholder *fdholder)$/;"	f
ccnr_stats_http_set_debug	ccnr/ccnr_stats.c	/^ccnr_stats_http_set_debug(struct ccnr_handle *h, struct fdholder *fdholder, int level)$/;"	f	file:
ccnr_uri_listen	ccnr/ccnr_internal_client.c	/^ccnr_uri_listen(struct ccnr_handle *ccnr, struct ccn *ccn, const char *uri,$/;"	f
ccnr_usage_message	ccnr/ccnr_main.c	/^static const char *ccnr_usage_message =$/;"	v	file:
ccnr_vmsg	ccnr/ccnr_msg.c	/^ccnr_vmsg(struct ccnr_handle *h, const char *fmt, va_list ap)$/;"	f
ccns	include/ccn/sync.h	/^    struct ccns_handle *ccns;$/;"	m	struct:ccns_name_closure	typeref:struct:ccns_name_closure::ccns_handle
ccns_callback	include/ccn/sync.h	/^typedef int (*ccns_callback)(struct ccns_name_closure *nc,$/;"	t
ccns_close	sync/sync_api.c	/^ccns_close(struct ccns_handle **sh,$/;"	f
ccns_delete_slice	sync/sync_api.c	/^ccns_delete_slice(struct ccn *h, struct ccn_charbuf *name) {$/;"	f
ccns_handle	sync/sync_api.c	/^struct ccns_handle {$/;"	s	file:
ccns_name_closure	include/ccn/sync.h	/^struct ccns_name_closure {$/;"	s
ccns_open	sync/sync_api.c	/^ccns_open(struct ccn *h,$/;"	f
ccns_read_slice	sync/sync_api.c	/^ccns_read_slice(struct ccn *h, struct ccn_charbuf *name,$/;"	f
ccns_slice	sync/sync_api.c	/^struct ccns_slice {$/;"	s	file:
ccns_slice_add_clause	sync/sync_api.c	/^ccns_slice_add_clause(struct ccns_slice *s, struct ccn_charbuf *c) {$/;"	f
ccns_slice_create	sync/sync_api.c	/^ccns_slice_create() {$/;"	f
ccns_slice_destroy	sync/sync_api.c	/^ccns_slice_destroy(struct ccns_slice **sp) {$/;"	f
ccns_slice_name	sync/sync_api.c	/^ccns_slice_name(struct ccn_charbuf *nm, struct ccns_slice *s)$/;"	f
ccns_slice_set_topo_prefix	sync/sync_api.c	/^ccns_slice_set_topo_prefix(struct ccns_slice *s,$/;"	f
ccns_write_slice	sync/sync_api.c	/^ccns_write_slice(struct ccn *h,$/;"	f
ccnxchat_state	cmd/ccnc.c	/^struct ccnxchat_state {$/;"	s	file:
ccny	include/ccn/nametree.h	/^struct ccny {$/;"	s
ccny_cookie	lib/ccn_nametree.c	/^ccny_cookie(struct ccny *y)$/;"	f
ccny_create	lib/ccn_nametree.c	/^ccny_create(unsigned randombits, size_t payload_size)$/;"	f
ccny_destroy	lib/ccn_nametree.c	/^ccny_destroy(struct ccn_nametree *h, struct ccny **py)$/;"	f
ccny_enroll	lib/ccn_nametree.c	/^ccny_enroll(struct ccn_nametree *h, struct ccny *y)$/;"	f
ccny_from_cookie	lib/ccn_nametree.c	/^ccny_from_cookie(struct ccn_nametree *h, ccn_cookie cookie)$/;"	f
ccny_info	lib/ccn_nametree.c	/^ccny_info(struct ccny *y)$/;"	f
ccny_key	lib/ccn_nametree.c	/^ccny_key(struct ccny *y)$/;"	f
ccny_keylen	lib/ccn_nametree.c	/^ccny_keylen(struct ccny *y)$/;"	f
ccny_next	lib/ccn_nametree.c	/^ccny_next(struct ccny *y)$/;"	f
ccny_payload	lib/ccn_nametree.c	/^ccny_payload(struct ccny *y)$/;"	f
ccny_prev	lib/ccn_nametree.c	/^ccny_prev(struct ccny *y)$/;"	f
ccny_remove	lib/ccn_nametree.c	/^ccny_remove(struct ccn_nametree *h, struct ccny *y)$/;"	f
ccny_set_info	lib/ccn_nametree.c	/^ccny_set_info(struct ccny *y, unsigned info)$/;"	f
ccny_set_key	lib/ccn_nametree.c	/^ccny_set_key(struct ccny *y, const unsigned char *key, size_t size)$/;"	f
ccny_set_key_fields	lib/ccn_nametree.c	/^ccny_set_key_fields(struct ccny *y, unsigned char *key, unsigned size)$/;"	f
ccny_set_payload	lib/ccn_nametree.c	/^ccny_set_payload(struct ccny *y, void *payload)$/;"	f
ccny_skiplist_findbefore	lib/ccn_nametree.c	/^ccny_skiplist_findbefore(struct ccn_nametree *h,$/;"	f	file:
ccny_skiplist_insert	lib/ccn_nametree.c	/^ccny_skiplist_insert(struct ccn_nametree *h, struct ccny *y)$/;"	f	file:
ccny_skiplist_remove	lib/ccn_nametree.c	/^ccny_skiplist_remove(struct ccn_nametree *h, struct ccny *y)$/;"	f	file:
ce	include/ccn/btree_content.h	/^    struct ccn_btree_content_payload ce;$/;"	m	struct:ccn_btree_content_entry	typeref:struct:ccn_btree_content_entry::ccn_btree_content_payload
ce	sync/SyncActions.h	/^    struct SyncHashCacheEntry *ce;$/;"	m	struct:SyncActionData	typeref:struct:SyncActionData::SyncHashCacheEntry
ce	sync/SyncUtil.h	/^    struct SyncHashCacheEntry *ce;$/;"	m	struct:SyncHashInfoList	typeref:struct:SyncHashInfoList::SyncHashCacheEntry
ce	sync/sync_api.c	/^    struct SyncHashCacheEntry *ce;$/;"	m	struct:hash_list	typeref:struct:hash_list::SyncHashCacheEntry	file:
ceCurrent	sync/SyncPrivate.h	/^    struct SyncHashCacheEntry *ceCurrent; \/*< entry for current root hash (may be NULL) *\/$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncHashCacheEntry
ceStart	sync/SyncActions.c	/^    struct SyncHashCacheEntry *ceStart; \/*< entry for start hash (may be NULL) *\/$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncHashCacheEntry	file:
ceStart	sync/SyncPrivate.h	/^    struct SyncHashCacheEntry *ceStart; \/*< entry for start hash (may be NULL) *\/$/;"	m	struct:SyncRootDeltas	typeref:struct:SyncRootDeltas::SyncHashCacheEntry
ceStart	sync/sync_diff.h	/^    struct SyncHashCacheEntry *ceStart; \/*< entry for start hash (may be NULL) *\/$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncHashCacheEntry
ceStop	sync/SyncActions.c	/^    struct SyncHashCacheEntry *ceStop;  \/*< entry for end hash *\/$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncHashCacheEntry	file:
ceStop	sync/SyncPrivate.h	/^    struct SyncHashCacheEntry *ceStop;  \/*< entry for end hash *\/$/;"	m	struct:SyncRootDeltas	typeref:struct:SyncRootDeltas::SyncHashCacheEntry
ceStop	sync/sync_diff.h	/^    struct SyncHashCacheEntry *ceStop;  \/*< entry for end hash *\/$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncHashCacheEntry
certificate	lib/ccn_keystore.c	/^    X509 *certificate;$/;"	m	struct:ccn_keystore	file:
ch	sync/SyncRoot.h	/^    struct SyncHashCacheHead *ch;         \/**< cache head *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncHashCacheHead
changeloglevel	libexec/udplink.c	/^changeloglevel(int s) {$/;"	f
charbuf_obtain	ccnd/ccnd.c	/^charbuf_obtain(struct ccnd_handle *h)$/;"	f	file:
charbuf_release	ccnd/ccnd.c	/^charbuf_release(struct ccnd_handle *h, struct ccn_charbuf *c)$/;"	f	file:
chat_main	cmd/ccnc.c	/^chat_main(int argc, char **argv)$/;"	f	file:
check	include/ccn/nametree.h	/^    ccn_nametree_action check; \/**< called to check client structures *\/$/;"	m	struct:ccn_nametree
check_ccndid	ccnd/ccnd.c	/^check_ccndid(struct ccnd_handle *h,$/;"	f	file:
check_comm_file	ccnd/ccnd.c	/^check_comm_file(struct ccnd_handle *h)$/;"	f	file:
check_dgram_faces	ccnd/ccnd.c	/^check_dgram_faces(struct ccnd_handle *h)$/;"	f	file:
check_face_instance_ccndid	ccnd/ccnd.c	/^check_face_instance_ccndid(struct ccnd_handle *h,$/;"	f	file:
check_forward_to	ccnd/ccnd.c	/^check_forward_to(struct ccnd_handle *h, struct ccn_indexbuf **ip)$/;"	f	file:
check_forwarding_entry_ccndid	ccnd/ccnd.c	/^check_forwarding_entry_ccndid(struct ccnd_handle *h,$/;"	f	file:
check_nameprefix_entries	ccnd/ccnd.c	/^check_nameprefix_entries(struct ccnd_handle *h)$/;"	f	file:
check_offer_matches_my_solicit	ccnd/ccnd_internal_client.c	/^check_offer_matches_my_solicit(struct ccnd_handle *ccnd, struct face *face,$/;"	f	file:
check_structure_size	lib/ccnbtreetest.c	/^check_structure_size(const char *what, int sz)$/;"	f	file:
chface	ccnd/ccnd_private.h	/^    struct ccn_indexbuf *chface;    \/**< faceids w\/ recent status changes *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_indexbuf
chface	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *chface;    \/**< faceids w\/ recent status changes *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_indexbuf
child	include/ccn/btree.h	/^    unsigned char child[4];     \/**< nodeid of a child *\/$/;"	m	struct:ccn_btree_internal_payload
children	ccnd/ccnd_private.h	/^    int children;                \/**< number of children *\/$/;"	m	struct:nameprefix_entry
children	ccnr/ccnr_private.h	/^    int children;                \/**< number of children *\/$/;"	m	struct:nameprefix_entry
chkres	cmd/ccnbasicconfig.c	/^chkres(int res, int lineno)$/;"	f	file:
chooseNextHash	sync/sync_api.c	/^chooseNextHash(struct ccns_handle *ch) {$/;"	f	file:
chooseRemoteHash	sync/SyncActions.c	/^chooseRemoteHash(struct SyncRootStruct *root) {$/;"	f	file:
choose_content_delay_class	ccnd/ccnd.c	/^choose_content_delay_class(struct ccnd_handle *h, unsigned faceid, int content_flags)$/;"	f	file:
choose_content_delay_class	ccnr/ccnr_sendq.c	/^choose_content_delay_class(struct ccnr_handle *h, unsigned filedesc, int content_flags)$/;"	f	file:
choose_face_delay	ccnd/ccnd.c	/^choose_face_delay(struct ccnd_handle *h, struct face *face, enum cq_delay_class c)$/;"	f	file:
choose_face_delay	ccnr/ccnr_sendq.c	/^choose_face_delay(struct ccnr_handle *h, struct fdholder *fdholder, enum cq_delay_class c)$/;"	f	file:
choose_limit	ccnr/ccnr_store.c	/^choose_limit(unsigned l, unsigned m)$/;"	f	file:
cl	lib/ccn_seqwriter.c	/^    struct ccn_closure cl;$/;"	m	struct:ccn_seqwriter	typeref:struct:ccn_seqwriter::ccn_closure	file:
clauses	sync/sync_api.c	/^    struct ccn_charbuf **clauses; \/\/ contents defined in documentation, need utils$/;"	m	struct:ccns_slice	typeref:struct:ccns_slice::ccn_charbuf	file:
clean	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *clean;$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_scheduled_event
clean	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *clean;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
clean	include/ccn/btree.h	/^    unsigned clean;             \/**< Number of stable buffered bytes at front *\/$/;"	m	struct:ccn_btree_node
clean_guest	ccnd/ccnd_internal_client.c	/^clean_guest(struct ccn_schedule *sched,$/;"	f	file:
cleanreq	include/ccn/btree.h	/^    int cleanreq;               \/**< if nonzero, cleaning might be needed *\/$/;"	m	struct:ccn_btree
cleanup_at_exit	ccnd/ccnd.c	/^cleanup_at_exit(void)$/;"	f	file:
cleanup_content_entry	ccnr/ccnr_store.c	/^cleanup_content_entry(struct ccnr_handle *h, struct content_entry *content)$/;"	f	file:
cleanup_evp_ctx	lib/ccn_signing.c	/^static void cleanup_evp_ctx(struct ccn_sigc *sigc) {$/;"	f	file:
cleanup_func	lib/ccn_signing.c	/^    void (*cleanup_func)(struct ccn_sigc *ctx);$/;"	m	struct:ccn_sigc	file:
cleanup_hmac_ctx	lib/ccn_signing.c	/^static void cleanup_hmac_ctx(struct ccn_sigc *sigc) {$/;"	f	file:
cleanup_se	ccnr/ccnr_sync.c	/^cleanup_se(struct ccnr_handle *ccnr, struct sync_enumeration_state *md)$/;"	f	file:
client	lib/ccn_bulkdata.c	/^    struct ccn_closure *client;     \/* client-supplied upcall for delivery *\/$/;"	m	struct:bulkdata	typeref:struct:bulkdata::ccn_closure	file:
client	sync/IndexSorter.h	/^    void *client;                    \/\/ client data for the sorting function$/;"	m	struct:IndexSorter_Struct
client_data	sync/sync_diff.h	/^    void *client_data;$/;"	m	struct:sync_diff_data
client_data	sync/sync_diff.h	/^    void *client_data;$/;"	m	struct:sync_update_data
client_data	sync/sync_plumbing.h	/^    void *client_data;$/;"	m	struct:sync_plumbing
client_handle	sync/SyncActions.h	/^    void *client_handle;$/;"	m	struct:SyncActionData
client_methods	sync/SyncTest.c	/^struct sync_plumbing_client_methods client_methods = {$/;"	v	typeref:struct:sync_plumbing_client_methods
client_methods	sync/sync_api.c	/^static struct sync_plumbing_client_methods client_methods = {$/;"	v	typeref:struct:sync_plumbing_client_methods	file:
client_methods	sync/sync_plumbing.h	/^    struct sync_plumbing_client_methods *client_methods;$/;"	m	struct:sync_plumbing	typeref:struct:sync_plumbing::sync_plumbing_client_methods
clienth	lib/ccn_schedule.c	/^    void *clienth;$/;"	m	struct:ccn_schedule	file:
clock	lib/ccn_schedule.c	/^    const struct ccn_gettime *clock;$/;"	m	struct:ccn_schedule	typeref:struct:ccn_schedule::ccn_gettime	file:
close_fd	ccnd/ccnd.c	/^close_fd(int *pfd)$/;"	f	file:
close_fd	ccnr/ccnr_io.c	/^close_fd(int *pfd)$/;"	f	file:
closed	lib/ccn_seqwriter.c	/^    unsigned char closed;$/;"	m	struct:ccn_seqwriter	file:
closed	sync/SyncPrivate.h	/^    int closed;                         \/*< 1 if coding is complete *\/$/;"	m	struct:SyncRootDeltas
closure	cmd/ccncatchunks2.c	/^    struct ccn_closure closure;     \/* closure per slot *\/$/;"	m	struct:ooodata	typeref:struct:ooodata::ccn_closure	file:
closure	lib/ccn_bulkdata.c	/^    struct ccn_closure closure;     \/* our closure for getting matching data *\/$/;"	m	struct:pending	typeref:struct:pending::ccn_closure	file:
closure	lib/ccn_client.c	/^    struct ccn_closure closure;$/;"	m	struct:simple_get_data	typeref:struct:simple_get_data::ccn_closure	file:
clue	include/ccn/btree.h	/^    char clue[16]; \/* unused except for debugging\/logging *\/$/;"	m	struct:ccn_btree_io
co_bytes_recvd	cmd/ccncatchunks2.c	/^    intmax_t co_bytes_recvd;$/;"	m	struct:mydata	file:
cob	ccnd/ccnd_private.h	/^    struct ccn_charbuf *cob;$/;"	m	struct:guest_entry	typeref:struct:guest_entry::ccn_charbuf
cob	ccnr/ccnr_private.h	/^    struct ccn_charbuf *cob[ENUM_N_COBS];$/;"	m	struct:enum_state	typeref:struct:enum_state::ccn_charbuf
cob	ccnr/ccnr_store.c	/^    struct ccn_charbuf *cob;    \/**< may contain ContentObject, or be NULL *\/$/;"	m	struct:content_entry	typeref:struct:content_entry::ccn_charbuf	file:
cob	cmd/ccnc.c	/^    struct ccn_charbuf *cob;    \/* Buffer for ContentObject *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
cob	cmd/ccnc.c	/^    struct ccn_charbuf *cob;    \/* Buffer for ContentObject*\/$/;"	m	struct:cs_entry	typeref:struct:cs_entry::ccn_charbuf	file:
cob	cmd/ccnlibtest.c	/^    struct ccn_charbuf *cob[MINI_STORE_LIMIT];$/;"	m	struct:mini_store	typeref:struct:mini_store::ccn_charbuf	file:
cob	sync/SyncPrivate.h	/^    struct ccn_charbuf *cob;            \/*< signed response buffer *\/$/;"	m	struct:SyncRootDeltas	typeref:struct:SyncRootDeltas::ccn_charbuf
cob0	lib/ccn_seqwriter.c	/^    struct ccn_charbuf *cob0;$/;"	m	struct:ccn_seqwriter	typeref:struct:ccn_seqwriter::ccn_charbuf	file:
cob_count	ccnr/ccnr_private.h	/^    unsigned long cob_count;  \/**< count of accessioned content objects in memory *\/$/;"	m	struct:ccnr_handle
cob_deferred	ccnr/ccnr_private.h	/^    int cob_deferred[ENUM_N_COBS];$/;"	m	struct:enum_state
cob_limit	ccnr/ccnr_private.h	/^    unsigned long cob_limit;  \/**< trim when we get beyond this *\/$/;"	m	struct:ccnr_handle
cob_matches	cmd/ccnlibtest.c	/^cob_matches(struct ccn_upcall_info *info, struct ccn_charbuf *cob)$/;"	f
cobid	include/ccn/btree_content.h	/^    unsigned char cobid[8];     \/**< Where the actual ContentObject is *\/$/;"	m	struct:ccn_btree_content_payload
cobsz	include/ccn/btree_content.h	/^    unsigned char cobsz[4];     \/**< Size in bytes of ContentObject *\/$/;"	m	struct:ccn_btree_content_payload
code	sync/SyncBase.h	/^    enum SyncErrCode code;$/;"	m	struct:SyncErrStruct	typeref:enum:SyncErrStruct::SyncErrCode
coding	sync/SyncPrivate.h	/^    struct ccn_charbuf *coding;         \/*< coding for updates *\/$/;"	m	struct:SyncRootDeltas	typeref:struct:SyncRootDeltas::ccn_charbuf
col_max	include/ccn/matrix.h	/^    unsigned col_max;$/;"	m	struct:ccn_matrix_bounds
col_min	include/ccn/matrix.h	/^    unsigned col_min;$/;"	m	struct:ccn_matrix_bounds
collect_face_meter_html	ccnd/ccnd_stats.c	/^collect_face_meter_html(struct ccnd_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_face_meter_html	ccnr/ccnr_stats.c	/^collect_face_meter_html(struct ccnr_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_faces_html	ccnd/ccnd_stats.c	/^collect_faces_html(struct ccnd_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_faces_html	ccnr/ccnr_stats.c	/^collect_faces_html(struct ccnr_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_faces_xml	ccnd/ccnd_stats.c	/^collect_faces_xml(struct ccnd_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_faces_xml	ccnr/ccnr_stats.c	/^collect_faces_xml(struct ccnr_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_forwarding_html	ccnd/ccnd_stats.c	/^collect_forwarding_html(struct ccnd_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_forwarding_html	ccnr/ccnr_stats.c	/^collect_forwarding_html(struct ccnr_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_forwarding_xml	ccnd/ccnd_stats.c	/^collect_forwarding_xml(struct ccnd_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_forwarding_xml	ccnr/ccnr_stats.c	/^collect_forwarding_xml(struct ccnr_handle *h, struct ccn_charbuf *b)$/;"	f	file:
collect_meter_xml	ccnd/ccnd_stats.c	/^collect_meter_xml(struct ccnd_handle *h, struct ccn_charbuf *b, struct ccnd_meter *m)$/;"	f	file:
collect_meter_xml	ccnr/ccnr_stats.c	/^collect_meter_xml(struct ccnr_handle *h, struct ccn_charbuf *b, struct ccnr_meter *m)$/;"	f	file:
collect_stats_html	ccnd/ccnd_stats.c	/^collect_stats_html(struct ccnd_handle *h)$/;"	f	file:
collect_stats_html	ccnr/ccnr_stats.c	/^collect_stats_html(struct ccnr_handle *h)$/;"	f	file:
collect_stats_xml	ccnd/ccnd_stats.c	/^collect_stats_xml(struct ccnd_handle *h)$/;"	f	file:
collect_stats_xml	ccnr/ccnr_stats.c	/^collect_stats_xml(struct ccnr_handle *h)$/;"	f	file:
comm_file_ok	ccnd/ccnd.c	/^comm_file_ok(void)$/;"	f	file:
comp	sync/SyncActions.h	/^    struct SyncCompareData *comp;$/;"	m	struct:SyncActionData	typeref:struct:SyncActionData::SyncCompareData
compare	include/ccn/nametree.h	/^    ccn_nametree_compare compare; \/**< for comparison *\/$/;"	m	struct:ccn_nametree
compare	sync/SyncRoot.h	/^    void *compare;                        \/**< data for doing sync tree comparison *\/$/;"	m	struct:SyncRootStruct
compareAction	sync/sync_diff.c	/^compareAction(struct ccn_schedule *sched,$/;"	f	file:
compareAssumeBad	sync/SyncActions.c	/^static int compareAssumeBad = 20;       \/\/ secs since last fetch OK to assume compare failed$/;"	v	file:
compare_lexical	lib/ccn_btree.c	/^compare_lexical(struct ccn_charbuf *a, struct ccn_charbuf *b)$/;"	f	file:
comparesBusy	sync/SyncPrivate.h	/^    int comparesBusy;           \/*< # of roots doing compares *\/$/;"	m	struct:SyncPrivate
comparesDone	sync/SyncPrivate.h	/^    uint64_t comparesDone;          \/*< number of sync tree compares completed *\/$/;"	m	struct:SyncRootStats
comparisonFailed	sync/SyncActions.c	/^comparisonFailed(struct SyncCompareData *data, char *why, int line) {$/;"	f	file:
comparisonFailed	sync/sync_diff.c	/^comparisonFailed(struct sync_diff_data *sdd, char *why, int line) {$/;"	f	file:
components	cmd/dataresponsetest.c	/^        struct ccn_indexbuf *components;$/;"	m	struct:handlerstate::handlerstateitem	typeref:struct:handlerstate::handlerstateitem::ccn_indexbuf	file:
comps	ccnr/ccnr_sync.c	/^    struct ccn_indexbuf *comps;$/;"	m	struct:sync_enumeration_state	typeref:struct:sync_enumeration_state::ccn_indexbuf	file:
comps	lib/encodedecodetest.c	/^    char * comps[];$/;"	m	struct:path	file:
comps	sync/SyncPrivate.h	/^    struct ccn_indexbuf *comps;     \/*< used by SyncNotifyContent *\/$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::ccn_indexbuf
compsbuf	lib/ccn_client.c	/^    struct ccn_indexbuf *compsbuf;$/;"	m	struct:simple_get_data	typeref:struct:simple_get_data::ccn_indexbuf	file:
connect_type	lib/ccn_client.c	/^    struct ccn_charbuf *connect_type;   \/* text representing connection to ccnd *\/$/;"	m	struct:ccn	typeref:struct:ccn::ccn_charbuf	file:
constructCommandPrefix	sync/SyncActions.c	/^constructCommandPrefix(struct SyncRootStruct *root,$/;"	f	file:
constructCommandPrefix	sync/sync_diff.c	/^constructCommandPrefix(struct SyncRootStruct *root,$/;"	f	file:
consume_interest	ccnd/ccnd.c	/^consume_interest(struct ccnd_handle *h, struct interest_entry *ie)$/;"	f	file:
consume_matching_interests	ccnd/ccnd.c	/^consume_matching_interests(struct ccnd_handle *h,$/;"	f	file:
consumed	cmd/ccnc.c	/^    int consumed;               \/* Set when this interest is consumed *\/$/;"	m	struct:pit_entry	file:
content	ccnr/ccnr_private.h	/^    struct content_entry *content;$/;"	m	struct:content_by_accession_entry	typeref:struct:content_by_accession_entry::content_entry
content	ccnr/ccnr_private.h	/^    struct content_entry *content;$/;"	m	struct:enum_state	typeref:struct:enum_state::content_entry
content	sync/SyncNode.h	/^    struct ccn_charbuf *content;  \/**< the signed content node (may be NULL) *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::ccn_charbuf
contentFetchBusy	sync/SyncActions.c	/^    int contentFetchBusy;           \/**< number of busy content fetches *\/$/;"	m	struct:SyncCompareData	file:
contentFetchBytes	sync/SyncPrivate.h	/^    uint64_t contentFetchBytes;     \/*< number of bytes for content objects *\/$/;"	m	struct:SyncRootStats
contentFetchFailed	sync/SyncActions.c	/^    int contentFetchFailed;         \/**< number of failed content fetches *\/$/;"	m	struct:SyncCompareData	file:
contentFetchFailed	sync/SyncPrivate.h	/^    uint64_t contentFetchFailed;    \/*< number of content object response failures *\/$/;"	m	struct:SyncRootStats
contentFetchReceived	sync/SyncPrivate.h	/^    uint64_t contentFetchReceived;  \/*< number of content objects received *\/$/;"	m	struct:SyncRootStats
contentFetchSent	sync/SyncPrivate.h	/^    uint64_t contentFetchSent;      \/*< number of content fetch interests sent *\/$/;"	m	struct:SyncRootStats
contentFetchTimeout	sync/SyncPrivate.h	/^    uint64_t contentFetchTimeout;   \/*< number of content object response timeouts *\/$/;"	m	struct:SyncRootStats
contentPos	sync/SyncActions.c	/^    int contentPos;                 \/**< position of next content to fetch *\/$/;"	m	struct:SyncCompareData	file:
content_accessions	ccnd/ccnd_private.h	/^    unsigned long content_accessions;$/;"	m	struct:ccnd_handle
content_by_accession_entry	ccnr/ccnr_private.h	/^struct content_by_accession_entry {$/;"	s
content_by_accession_tab	ccnr/ccnr_private.h	/^    struct hashtb *content_by_accession_tab; \/**< keyed by accession *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::hashtb
content_by_cookie	ccnr/ccnr_private.h	/^    struct content_entry **content_by_cookie; \/**< cookie-to-content table *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::content_entry
content_ccnb	include/ccn/ccn.h	/^    const unsigned char *content_ccnb;$/;"	m	struct:ccn_upcall_info
content_ccnb	lib/ccn_bulkdata.c	/^    unsigned char *content_ccnb;    \/* the content that has arrived *\/$/;"	m	struct:pending	file:
content_comps	include/ccn/ccn.h	/^    struct ccn_indexbuf *content_comps;$/;"	m	struct:ccn_upcall_info	typeref:struct:ccn_upcall_info::ccn_indexbuf
content_dequeuex	ccnd/ccnd.c	/^content_dequeuex(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
content_digest	include/ccn/header.h	/^    struct ccn_charbuf *content_digest;$/;"	m	struct:ccn_header	typeref:struct:ccn_header::ccn_charbuf
content_dups_recvd	ccnd/ccnd_private.h	/^    unsigned long content_dups_recvd;$/;"	m	struct:ccnd_handle
content_dups_recvd	ccnr/ccnr_private.h	/^    unsigned long content_dups_recvd;$/;"	m	struct:ccnr_handle
content_enqueuex	ccnd/ccnd.c	/^content_enqueuex(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
content_entry	ccnd/ccnd_private.h	/^struct content_entry {$/;"	s
content_entry	ccnr/ccnr_store.c	/^struct content_entry {$/;"	s	file:
content_finalize	ccnd/ccnd.c	/^content_finalize(struct ccn_nametree *ntree, struct ccny *y)$/;"	f	file:
content_from_accession	ccnd/ccnd.c	/^content_from_accession(struct ccnd_handle *h, ccn_cookie accession)$/;"	f	file:
content_from_accession_hits	ccnr/ccnr_private.h	/^    unsigned long content_from_accession_hits;$/;"	m	struct:ccnr_handle
content_from_accession_misses	ccnr/ccnr_private.h	/^    unsigned long content_from_accession_misses;$/;"	m	struct:ccnr_handle
content_items_sent	ccnd/ccnd_private.h	/^    unsigned long content_items_sent;$/;"	m	struct:ccnd_handle
content_items_sent	ccnr/ccnr_private.h	/^    unsigned long content_items_sent;$/;"	m	struct:ccnr_handle
content_matches_prefix	ccnd/ccnd.c	/^content_matches_prefix(struct ccnd_handle *h,$/;"	f	file:
content_next	ccnd/ccnd.c	/^content_next(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
content_preremove	ccnd/ccnd.c	/^content_preremove(struct ccn_nametree *ntree, struct ccny *y)$/;"	f	file:
content_queue	ccnd/ccnd_private.h	/^struct content_queue {$/;"	s
content_queue	ccnr/ccnr_private.h	/^struct content_queue {$/;"	s
content_queue_create	ccnd/ccnd.c	/^content_queue_create(struct ccnd_handle *h, struct face *face, enum cq_delay_class c)$/;"	f	file:
content_queue_create	ccnr/ccnr_sendq.c	/^content_queue_create(struct ccnr_handle *h, struct fdholder *fdholder, enum cq_delay_class c)$/;"	f	file:
content_queue_destroy	ccnd/ccnd.c	/^content_queue_destroy(struct ccnd_handle *h, struct content_queue **pq)$/;"	f	file:
content_received	cmd/ccnsendchunks.c	/^    int content_received;$/;"	m	struct:mydata	file:
content_sender	ccnd/ccnd.c	/^content_sender(struct ccn_schedule *sched,$/;"	f	file:
content_sender	ccnr/ccnr_sendq.c	/^content_sender(struct ccn_schedule *sched,$/;"	f	file:
content_sent	cmd/ccnsendchunks.c	/^    int content_sent;$/;"	m	struct:mydata	file:
content_size	lib/ccn_bulkdata.c	/^    size_t content_size;$/;"	m	struct:pending	file:
content_tree	ccnd/ccnd_private.h	/^    struct ccn_nametree *content_tree; \/**< content store *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_nametree
content_tree_trim	ccnd/ccnd.c	/^content_tree_trim(struct ccnd_handle *h) {$/;"	f
contents	cmd/dataresponsetest.c	/^        unsigned char *contents;$/;"	m	struct:handlerstate::handlerstateitem	file:
context	lib/ccn_fetch.c	/^	void *context;			\/\/ caller's context$/;"	m	struct:ccn_fetch_stream	file:
context	lib/ccn_signing.c	/^    EVP_MD_CTX context;$/;"	m	struct:ccn_sigc	file:
cookie	ccnr/ccnr_private.h	/^    ccnr_cookie cookie;      \/**< newest used cookie number *\/$/;"	m	struct:ccnr_handle
cookie	ccnr/ccnr_store.c	/^    ccnr_cookie cookie;         \/**< for in-memory references *\/$/;"	m	struct:content_entry	file:
cookie	ccnr/ccnr_sync.c	/^    ccnr_cookie cookie; \/**< Resumption point *\/$/;"	m	struct:sync_enumeration_state	file:
cookie	include/ccn/nametree.h	/^    ccn_cookie cookie;      \/**< cookie for this entry *\/$/;"	m	struct:ccny
cookie	include/ccn/nametree.h	/^    ccn_cookie cookie;      \/**< newest used cookie number *\/$/;"	m	struct:ccn_nametree
cookie_limit	ccnr/ccnr_private.h	/^    unsigned cookie_limit;          \/**< content_by_cookie size(power of 2)*\/$/;"	m	struct:ccnr_handle
cookiemask	include/ccn/nametree.h	/^    unsigned cookiemask;    \/**< one less than a power of two *\/$/;"	m	struct:ccn_nametree
copyFilter	sync/SyncRoot.c	/^copyFilter(struct SyncNameAccum *filter) {$/;"	f	file:
corrupt	include/ccn/btree.h	/^    unsigned corrupt;           \/**< Structure is not to be trusted *\/$/;"	m	struct:ccn_btree_node
count	cmd/dataresponsetest.c	/^    int count;$/;"	m	struct:handlerstate	file:
count	include/ccn/coding.h	/^    int count;              \/**< Count of elements in the table *\/$/;"	m	struct:ccn_dict
count	include/ccn/header.h	/^    uintmax_t count;$/;"	m	struct:ccn_header
count	include/ccn/sync.h	/^    uint64_t count;$/;"	m	struct:ccns_name_closure
count	lib/encodedecodetest.c	/^    int count;$/;"	m	struct:path	file:
count	sync/SyncTreeWorker.h	/^    ssize_t count;$/;"	m	struct:SyncTreeWorkerEntry
count_lmc_found	ccnr/ccnr_private.h	/^    unsigned long count_lmc_found;$/;"	m	struct:ccnr_handle
count_lmc_found_iters	ccnr/ccnr_private.h	/^    unsigned long count_lmc_found_iters;$/;"	m	struct:ccnr_handle
count_lmc_notfound	ccnr/ccnr_private.h	/^    unsigned long count_lmc_notfound;$/;"	m	struct:ccnr_handle
count_lmc_notfound_iters	ccnr/ccnr_private.h	/^    unsigned long count_lmc_notfound_iters;$/;"	m	struct:ccnr_handle
count_rmc_found	ccnr/ccnr_private.h	/^    unsigned long count_rmc_found;$/;"	m	struct:ccnr_handle
count_rmc_found_iters	ccnr/ccnr_private.h	/^    unsigned long count_rmc_found_iters;$/;"	m	struct:ccnr_handle
count_rmc_notfound	ccnr/ccnr_private.h	/^    unsigned long count_rmc_notfound;$/;"	m	struct:ccnr_handle
count_rmc_notfound_iters	ccnr/ccnr_private.h	/^    unsigned long count_rmc_notfound_iters;$/;"	m	struct:ccnr_handle
counter	cmd/ccnls.c	/^    long *counter;$/;"	m	struct:upcalldata	file:
counter	cmd/ccnslurp.c	/^    long *counter;$/;"	m	struct:upcalldata	file:
counter	lib/ccn_traverse.c	/^    long *counter;$/;"	m	struct:ccn_traversal	file:
cq_delay_class	ccnd/ccnd_private.h	/^enum cq_delay_class {$/;"	g
cq_delay_class	ccnr/ccnr_private.h	/^enum cq_delay_class {$/;"	g
create_command_from_command_line	libexec/ccndc-main.c	/^create_command_from_command_line(int argc, char **argv)$/;"	f
create_derived_key	lib/ccn_aes_keystore.c	/^create_derived_key(const char *key, unsigned int keylength, unsigned char *salt, $/;"	f	file:
create_local_listener	ccnd/ccnd.c	/^create_local_listener(struct ccnd_handle *h, const char *sockname, int backlog)$/;"	f	file:
create_passive_templ	cmd/ccnslurp.c	/^create_passive_templ(void)$/;"	f	file:
cs	cmd/ccnc.c	/^    struct cs_entry cs[CS_LIMIT];$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::cs_entry	file:
cs_entry	cmd/ccnc.c	/^struct cs_entry {$/;"	s	file:
ctx_to_use	lib/ccn_signing.c	/^    void *ctx_to_use;$/;"	m	struct:ccn_sigc	file:
ctype	include/ccn/btree_content.h	/^    unsigned char ctype[3];     \/**< Type *\/$/;"	m	struct:ccn_btree_content_payload
currentHash	sync/SyncRoot.h	/^    struct ccn_charbuf *currentHash;      \/**< current top-level cache hash *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::ccn_charbuf
currentSize	sync/SyncPrivate.h	/^    size_t currentSize;$/;"	m	struct:SyncRootPrivate
curwindow	cmd/ccncatchunks2.c	/^    unsigned curwindow;$/;"	m	struct:mydata	file:
cvt_a_date	cmd/ccntimefromdatetime.c	/^cvt_a_date(char *s)$/;"	f	file:
data	include/ccn/btree.h	/^    void *data;$/;"	m	struct:ccn_btree_io
data	include/ccn/ccn.h	/^    void *data;         \/**< for client use *\/$/;"	m	struct:ccn_closure
data	include/ccn/hashtb.h	/^    void *data;$/;"	m	struct:hashtb_enumerator
data	include/ccn/nametree.h	/^    void *data;             \/**< for client use *\/$/;"	m	struct:ccn_nametree
data	include/ccn/schedule.h	/^    void *data;                \/* for private use by gettime *\/$/;"	m	struct:ccn_gettime
data	include/ccn/sync.h	/^    void *data;$/;"	m	struct:ccns_name_closure
data	sync/SyncUtil.h	/^    intmax_t data;$/;"	m	struct:SyncNameAccumEntry
data	sync/sync_diff.h	/^    void *data;$/;"	m	struct:sync_diff_add_closure
data	sync/sync_diff.h	/^    void *data;$/;"	m	struct:sync_diff_get_closure
data	sync/sync_diff.h	/^    void *data;$/;"	m	struct:sync_done_closure
data_pause_microsec	ccnd/ccnd_private.h	/^    unsigned data_pause_microsec;   \/**< tunable, see choose_face_delay() *\/$/;"	m	struct:ccnd_handle
datasize	include/ccn/hashtb.h	/^    size_t datasize;$/;"	m	struct:hashtb_enumerator
dd	lib/ccn_schedule.c	/^static char dd[] = "ABDEFGHI";$/;"	v	file:
debug	ccnd/ccnd_private.h	/^    int debug;                      \/**< For controlling debug output *\/$/;"	m	struct:ccnd_handle
debug	ccnr/ccnr_private.h	/^    int debug;                      \/**< For controlling debug output *\/$/;"	m	struct:ccnr_handle
debug	cmd/ccn_fetch_test.c	/^	FILE *debug;$/;"	m	struct:MyParms	file:
debug	cmd/ccnc.c	/^    int debug;$/;"	m	struct:__anon3	file:
debug	cmd/ccnsnew.c	/^    const char *debug;$/;"	m	struct:mydata	file:
debug	lib/ccn_fetch.c	/^	FILE *debug;$/;"	m	struct:ccn_fetch	file:
debug	sync/SyncBase.h	/^    int debug;                      \/\/ higher gives more output, 0 gives none$/;"	m	struct:SyncBaseStruct
debug	sync/sync_api.c	/^    int debug;$/;"	m	struct:ccns_handle	file:
debugFlags	lib/ccn_fetch.c	/^	ccn_fetch_flags debugFlags;$/;"	m	struct:ccn_fetch	file:
debug_logger	cmd/ccnc.c	/^debug_logger(struct ccnxchat_state *st, int lineno, struct ccn_charbuf *ccnb)$/;"	f	file:
debugspace	cmd/ccnsnew.c	/^    char debugspace[1];$/;"	m	struct:mydata	file:
decode_message	lib/encodedecodetest.c	/^decode_message(struct ccn_charbuf *message, struct path * name_path, char *data, size_t len,$/;"	f
decoder	ccnd/ccnd_private.h	/^    struct ccn_skeleton_decoder decoder;$/;"	m	struct:face	typeref:struct:face::ccn_skeleton_decoder
decoder	ccnr/ccnr_private.h	/^    struct ccn_skeleton_decoder decoder;$/;"	m	struct:fdholder	typeref:struct:fdholder::ccn_skeleton_decoder
decoder	include/ccn/ccn.h	/^    struct ccn_skeleton_decoder decoder;$/;"	m	struct:ccn_buf_decoder	typeref:struct:ccn_buf_decoder::ccn_skeleton_decoder
decoder	lib/ccn_client.c	/^    struct ccn_skeleton_decoder decoder;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_skeleton_decoder	file:
defaultMethods	sync/SyncBase.c	/^struct sync_plumbing_sync_methods defaultMethods = {$/;"	v	typeref:struct:sync_plumbing_sync_methods
default_pubid	lib/ccn_client.c	/^    struct ccn_charbuf *default_pubid;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_charbuf	file:
defer_verification	lib/ccn_client.c	/^    int defer_verification;     \/* Client wants to do its own verification *\/$/;"	m	struct:ccn	file:
deferred	lib/hashtb.c	/^    struct node *deferred;      \/* deferred cleanup *\/$/;"	m	struct:hashtb	typeref:struct:hashtb::node	file:
delinkActionData	sync/SyncActions.c	/^delinkActionData(struct SyncActionData *data) {$/;"	f	file:
delink_fetch_data	sync/sync_api.c	/^delink_fetch_data(struct ccns_handle *ch, struct sync_diff_fetch_data *fd) {$/;"	f	file:
deliver_content	lib/ccn_bulkdata.c	/^deliver_content(struct ccn *h, struct bulkdata *b)$/;"	f	file:
delivered	cmd/ccncatchunks2.c	/^    intmax_t delivered;$/;"	m	struct:mydata	file:
delivered_bytes	cmd/ccncatchunks2.c	/^    intmax_t delivered_bytes;$/;"	m	struct:mydata	file:
deltas	sync/SyncActions.c	/^    struct SyncRootDeltas *deltas;$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncRootDeltas	file:
deltasCount	sync/SyncPrivate.h	/^    int deltasCount;                    \/*< number of names in coding *\/$/;"	m	struct:SyncRootDeltas
deltasHead	sync/SyncPrivate.h	/^    struct SyncRootDeltas *deltasHead;  \/*< pointer to eldest update *\/$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncRootDeltas
deltasLimit	sync/SyncPrivate.h	/^    int deltasLimit;            \/*< # of bytes permitted for RootAdvise delta mode *\/$/;"	m	struct:SyncPrivate
deltasTail	sync/SyncPrivate.h	/^    struct SyncRootDeltas *deltasTail;  \/*< pointer to youngest update *\/$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncRootDeltas
descr	include/ccn/face_mgmt.h	/^    struct ccn_sockdescr descr;$/;"	m	struct:ccn_face_instance	typeref:struct:ccn_face_instance::ccn_sockdescr
descr	include/ccn/schedule.h	/^    char descr[8];$/;"	m	struct:ccn_gettime
destroyActionData	sync/SyncActions.c	/^destroyActionData(struct SyncActionData *data) {$/;"	f	file:
destroyCompareData	sync/SyncActions.c	/^destroyCompareData(struct SyncCompareData *data) {$/;"	f	file:
destroy_func	include/ccn/keystore.h	/^    void (*destroy_func)(struct ccn_keystore **p);$/;"	m	struct:keystore_header_st
destroy_multifilt_array	lib/ccn_client.c	/^destroy_multifilt_array(struct ccn *h, struct multifilt_item **ap, int n)$/;"	f	file:
dgram_faces	ccnd/ccnd_private.h	/^    struct hashtb *dgram_faces;     \/**< keyed by sockaddr *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
dict	include/ccn/coding.h	/^    const struct ccn_dict_entry *dict; \/**< the table entries *\/$/;"	m	struct:ccn_dict	typeref:struct:ccn_dict::ccn_dict_entry
dict_lookup	cmd/ccn_xmltoccnb.c	/^dict_lookup(const char *key, const struct ccn_dict_entry *dict, int n)$/;"	f	file:
dict_name_from_number	cmd/ccn_ccnbtoxml.c	/^dict_name_from_number(int ndx, const struct ccn_dict_entry *dict, int n)$/;"	f	file:
diff_data	sync/sync_api.c	/^    struct sync_diff_data *diff_data;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::sync_diff_data	file:
diff_data	sync/sync_diff.h	/^    struct sync_diff_data *diff_data;$/;"	m	struct:sync_diff_add_closure	typeref:struct:sync_diff_add_closure::sync_diff_data
diff_data	sync/sync_diff.h	/^    struct sync_diff_data *diff_data;$/;"	m	struct:sync_diff_fetch_data	typeref:struct:sync_diff_fetch_data::sync_diff_data
diff_data	sync/sync_diff.h	/^    struct sync_diff_data *diff_data;$/;"	m	struct:sync_diff_get_closure	typeref:struct:sync_diff_get_closure::sync_diff_data
digest	include/ccn/ccn.h	/^    unsigned char digest[32];	\/* Computed only when needed *\/$/;"	m	struct:ccn_parsed_ContentObject
digest	sync/SyncTest.c	/^    int digest;$/;"	m	struct:SyncTestParms	file:
digest_algorithm	lib/ccn_aes_keystore.c	/^    char *digest_algorithm;$/;"	m	struct:ccn_keystore	file:
digest_algorithm	lib/ccn_keystore.c	/^    char *digest_algorithm;$/;"	m	struct:ccn_keystore	file:
digest_algorithm_func	include/ccn/keystore.h	/^    const char *(*digest_algorithm_func)(struct ccn_keystore *p);$/;"	m	struct:keystore_header_st
digest_bytes	include/ccn/ccn.h	/^    int digest_bytes;$/;"	m	struct:ccn_parsed_ContentObject
digest_func	include/ccn/keystore.h	/^    const unsigned char *(*digest_func)(struct ccn_keystore *p);$/;"	m	struct:keystore_header_st
digest_length_func	include/ccn/keystore.h	/^    ssize_t (*digest_length_func)(struct ccn_keystore *p);$/;"	m	struct:keystore_header_st
digestlen	lib/ccn_seqwriter.c	/^    unsigned int digestlen;$/;"	m	struct:ccn_seqwriter	file:
direct_client	ccnr/ccnr_private.h	/^    struct ccn *direct_client;      \/**< this talks directly with ccnd *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn
direct_client_refresh	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *direct_client_refresh;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
directory	ccnr/ccnr_private.h	/^    const char *directory;           \/**< the repository directory *\/$/;"	m	struct:ccnr_handle
dirpath	lib/ccn_btree_store.c	/^    struct ccn_charbuf *dirpath;$/;"	m	struct:bts_data	typeref:struct:bts_data::ccn_charbuf	file:
display_the_content	cmd/ccnc.c	/^display_the_content(struct ccnxchat_state *st, struct ccn_upcall_info *info)$/;"	f	file:
doComparison	sync/SyncActions.c	/^doComparison(struct SyncCompareData *data) {$/;"	f	file:
doComparison	sync/sync_diff.c	/^doComparison(struct sync_diff_data *sdd) {$/;"	f	file:
doPreload	sync/SyncActions.c	/^doPreload(struct SyncCompareData *data) {$/;"	f	file:
doPreload	sync/sync_diff.c	/^doPreload(struct sync_diff_data *sdd,$/;"	f	file:
do_character_data	cmd/ccn_xmltoccnb.c	/^do_character_data(void *ud, const XML_Char *s, int len)$/;"	f	file:
do_deferred_write	ccnd/ccnd.c	/^do_deferred_write(struct ccnd_handle *h, int fd)$/;"	f	file:
do_end_element	cmd/ccn_xmltoccnb.c	/^do_end_element(void *ud, const XML_Char *name)$/;"	f	file:
do_processing_instructions	cmd/ccn_xmltoccnb.c	/^do_processing_instructions(void *ud, const XML_Char *target, const XML_Char *data)$/;"	f	file:
do_propagate	ccnd/ccnd.c	/^do_propagate(struct ccn_schedule *sched,$/;"	f	file:
do_start_element	cmd/ccn_xmltoccnb.c	/^do_start_element(void *ud, const XML_Char *name,$/;"	f	file:
done	ccnr/ccnr_proto.h	/^    int done;$/;"	m	struct:ccnr_expect_content
done	cmd/ccnsimplecat.c	/^    int *done;$/;"	m	struct:mydata	file:
done	sync/sync_diff.h	/^    int (* done)(struct sync_done_closure *dc);$/;"	m	struct:sync_done_closure
done_closure	sync/sync_diff.h	/^    struct sync_done_closure *done_closure;$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::sync_done_closure
drop_nonlocal_interest	ccnd/ccnd.c	/^drop_nonlocal_interest(struct ccnd_handle *h, struct nameprefix_entry *npe,$/;"	f	file:
dst	cmd/ccn_fetch_test.c	/^	string dst;$/;"	m	struct:MyParms	file:
dtag_lookup	cmd/ccnbx.c	/^dtag_lookup(const char *key)$/;"	f	file:
dummy	cmd/ccncatchunks2.c	/^    int dummy;$/;"	m	struct:mydata	file:
dump_udp_packet	cmd/ccndumppcap.c	/^dump_udp_packet(pcap_dumper_t *dump_file, $/;"	f	file:
dups	cmd/ccncatchunks2.c	/^    intmax_t dups;$/;"	m	struct:mydata	file:
e	lib/ccnbtreetest.c	/^    struct ccn_btree_internal_entry e[2];$/;"	m	struct:root_example	typeref:struct:root_example::ccn_btree_internal_entry	file:
e	lib/ccnbtreetest.c	/^    struct entry_example e[3];$/;"	m	struct:node_example	typeref:struct:node_example::entry_example	file:
each_round	sync/sync_api.c	/^each_round(struct ccn_schedule *sched,$/;"	f	file:
echo	cmd/ccnc.c	/^    int echo;                   \/* to see own output *\/$/;"	m	struct:ccnxchat_state	file:
echo	cmd/ccnc.c	/^    int echo;$/;"	m	struct:__anon3	file:
element_index	include/ccn/coding.h	/^    size_t element_index;   \/**< Starting index of most-recent element *\/$/;"	m	struct:ccn_skeleton_decoder
emit_bytes	cmd/ccn_xmltoccnb.c	/^emit_bytes(struct ccn_encoder *u, const void *p, size_t length)$/;"	f	file:
emit_closer	cmd/ccn_xmltoccnb.c	/^emit_closer(struct ccn_encoder *u)$/;"	f	file:
emit_name	cmd/ccn_xmltoccnb.c	/^emit_name(struct ccn_encoder *u, enum ccn_tt tt, const void *name)$/;"	f	file:
emit_tt	cmd/ccn_xmltoccnb.c	/^emit_tt(struct ccn_encoder *u, size_t numval, enum ccn_tt tt)$/;"	f	file:
emit_xchars	cmd/ccn_xmltoccnb.c	/^emit_xchars(struct ccn_encoder *u, const XML_Char *xchars)$/;"	f	file:
empty	sync/IndexSorter.h	/^    IndexSorter_Index empty;        \/\/ the empty index$/;"	m	struct:IndexSorter_Struct
encode_message	lib/encodedecodetest.c	/^encode_message(struct ccn_charbuf *message, struct path * name_path,$/;"	f
encode_sample_test	lib/encodedecodetest.c	/^encode_sample_test(const struct ccn_pkey *signing_key, const struct ccn_pkey *verification_key, $/;"	f
encrypted_key	include/ccn/aeskeystoreasn1.h	/^    ASN1_OCTET_STRING *encrypted_key;$/;"	m	struct:AESKeystore_info_st
end	cmd/ccn_xmltoccnb.c	/^    size_t end;$/;"	m	struct:ccn_encoder_stack_item	file:
endName	lib/ccn_buf_decoder.c	/^    int endName;$/;"	m	struct:parsed_KeyName	file:
endPublisherID	lib/ccn_buf_decoder.c	/^    int endPublisherID;$/;"	m	struct:parsed_KeyName	file:
enroll_face	ccnd/ccnd.c	/^enroll_face(struct ccnd_handle *h, struct face *face)$/;"	f	file:
ensureRemoteEntry	sync/SyncActions.c	/^ensureRemoteEntry(struct SyncCompareData *data,$/;"	f	file:
entdx	include/ccn/btree.h	/^    unsigned char entdx[2];     \/**< index of this entry within the node *\/$/;"	m	struct:ccn_btree_entry_trailer
entryForHash	sync/sync_diff.c	/^entryForHash(struct SyncRootStruct *root, struct ccn_charbuf *hash) {$/;"	f	file:
entryTime	sync/SyncActions.c	/^    int64_t entryTime;$/;"	m	struct:SyncUpdateData	file:
entryTime	sync/sync_diff.h	/^    int64_t entryTime;$/;"	m	struct:sync_update_data
entry_example	lib/ccnbtreetest.c	/^struct entry_example {$/;"	s	file:
ents	sync/SyncHashCache.h	/^    struct SyncHashCacheEntry **ents;   \/**< the vector of hash chains *\/$/;"	m	struct:SyncHashCacheHead	typeref:struct:SyncHashCacheHead::SyncHashCacheEntry
ents	sync/SyncUtil.h	/^    struct SyncNameAccumEntry *ents;$/;"	m	struct:SyncNameAccum	typeref:struct:SyncNameAccum::SyncNameAccumEntry
ents	sync/SyncUtil.h	/^    struct SyncNodeComposite **ents;$/;"	m	struct:SyncNodeAccum	typeref:struct:SyncNodeAccum::SyncNodeComposite
entsz	include/ccn/btree.h	/^    unsigned char entsz[1];     \/**< entry size in CCN_BT_SIZE_UNITS *\/$/;"	m	struct:ccn_btree_entry_trailer
enum_state	ccnr/ccnr_private.h	/^struct enum_state {$/;"	s
enum_state_tab	ccnr/ccnr_private.h	/^    struct hashtb *enum_state_tab;  \/**< keyed by enumeration interest *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::hashtb
eof	cmd/ccnc.c	/^    int eof;                    \/* true if we have encountered eof *\/$/;"	m	struct:ccnxchat_state	file:
epochmax	lib/ccn_schedule.c	/^static const heapmicros epochmax = ((heapmicros)(~0))\/2;$/;"	v	file:
err	lib/ccn_client.c	/^    int err;                    \/* pos => errno value, neg => other *\/$/;"	m	struct:ccn	file:
err	sync/SyncNode.h	/^    int err;              \/**< any error saved here *\/$/;"	m	struct:SyncNodeComposite
errList	sync/SyncActions.c	/^    struct SyncActionData *errList; \/**< actions that had errors for this compare *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::SyncActionData	file:
errList	sync/SyncBase.h	/^    struct SyncErrStruct *errList;  \/\/ private data for Sync$/;"	m	struct:SyncBaseStruct	typeref:struct:SyncBaseStruct::SyncErrStruct
errline	lib/ccn_client.c	/^    int errline;$/;"	m	struct:ccn	file:
errors	include/ccn/btree.h	/^    int errors;                 \/**< counter for detected errors *\/$/;"	m	struct:ccn_btree
errsQueued	sync/SyncActions.c	/^    int errsQueued;                 \/**< names added during this comparison *\/$/;"	m	struct:SyncCompareData	file:
es_active_state	ccnr/ccnr_private.h	/^enum es_active_state {$/;"	g
establish_min_recv_bufsize	ccnd/ccnd.c	/^establish_min_recv_bufsize(struct ccnd_handle *h, int fd, int minsize)$/;"	f	file:
establish_min_send_bufsize	ccnr/ccnr_init.c	/^establish_min_send_bufsize(struct ccnr_handle *h, int fd, int minsize)$/;"	f	file:
ev	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *ev; \/**< for time-based strategy event *\/$/;"	m	struct:ccn_strategy	typeref:struct:ccn_strategy::ccn_scheduled_event
ev	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *ev; \/**< next interest timeout *\/$/;"	m	struct:interest_entry	typeref:struct:interest_entry::ccn_scheduled_event
ev	lib/ccn_schedule.c	/^    struct ccn_scheduled_event *ev;$/;"	m	struct:ccn_schedule_heap_item	typeref:struct:ccn_schedule_heap_item::ccn_scheduled_event	file:
ev	sync/SyncActions.c	/^    struct ccn_scheduled_event *ev; \/**< progress event *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::ccn_scheduled_event	file:
ev	sync/sync_api.c	/^    struct ccn_scheduled_event *ev;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::ccn_scheduled_event	file:
ev	sync/sync_diff.h	/^    struct ccn_scheduled_event *ev; \/**< progress event *\/$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::ccn_scheduled_event
ev	sync/sync_diff.h	/^    struct ccn_scheduled_event *ev; \/**< progress event *\/$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::ccn_scheduled_event
evdata	include/ccn/schedule.h	/^    void *evdata;$/;"	m	struct:ccn_scheduled_event
event_time	lib/ccn_schedule.c	/^    heapmicros event_time;$/;"	m	struct:ccn_schedule_heap_item	file:
evint	include/ccn/schedule.h	/^    intptr_t evint;$/;"	m	struct:ccn_scheduled_event
ex1	lib/ccnbtreetest.c	/^} ex1 = {$/;"	v	typeref:struct:node_example
ex2	lib/ccnbtreetest.c	/^struct node_example ex2 = {$/;"	v	typeref:struct:node_example
ex_index	ccnd/ccnd_private.h	/^    struct ccn_nametree *ex_index;  \/**< for speedy adds to expiry queue *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_nametree
ex_index_cmp	ccnd/ccnd.c	/^ex_index_cmp(const unsigned char *a, size_t alen,$/;"	f	file:
example_btree_small	lib/ccnbtreetest.c	/^example_btree_small(void)$/;"	f
excl	cmd/ccncatchunks2.c	/^    struct excludestuff *excl;$/;"	m	struct:mydata	typeref:struct:mydata::excludestuff	file:
excl	cmd/ccnls.c	/^    struct ccn_charbuf **excl; \/* Array of n_excl items *\/$/;"	m	struct:upcalldata	typeref:struct:upcalldata::ccn_charbuf	file:
excl	cmd/ccnslurp.c	/^    struct ccn_charbuf **excl; \/* Array of n_excl items *\/$/;"	m	struct:upcalldata	typeref:struct:upcalldata::ccn_charbuf	file:
excl	lib/ccn_traverse.c	/^    struct ccn_charbuf **excl; \/* Array of n_excl items *\/$/;"	m	struct:ccn_traversal	typeref:struct:ccn_traversal::ccn_charbuf	file:
existingRootOp	sync/SyncTest.c	/^existingRootOp(struct SyncTestParms *parms,$/;"	f	file:
expect_complete	ccnr/ccnr_proto.h	/^    ccn_handler expect_complete;$/;"	m	struct:ccnr_expect_content
expected_res	lib/encodedecodetest.c	/^expected_res(int res, char code)$/;"	f
expires	ccnd/ccnd_private.h	/^    int expires;                 \/**< time remaining, in seconds *\/$/;"	m	struct:ccn_forwarding
expires	ccnr/ccnr_private.h	/^    int expires;                 \/**< time remaining, in seconds *\/$/;"	m	struct:ccn_forwarding
expiry	ccnd/ccnd_private.h	/^    ccn_wrappedtime expiry;         \/** when this should expire *\/$/;"	m	struct:nonce_entry
expiry	ccnd/ccnd_private.h	/^    ccn_wrappedtime expiry;         \/**< when entry expires *\/$/;"	m	struct:pit_face_item
expiry	cmd/ccnc.c	/^    unsigned short expiry;      \/* Wrapped time that this object expires *\/$/;"	m	struct:pit_entry	file:
expiry	lib/ccn_client.c	/^    struct timeval expiry;       \/* Time that refresh will be needed *\/$/;"	m	struct:interest_filter	typeref:struct:interest_filter::timeval	file:
express_bulkdata_interest	lib/ccn_bulkdata.c	/^express_bulkdata_interest(struct ccn *h, struct pending *p)$/;"	f	file:
express_interest	cmd/ccnc.c	/^express_interest(struct ccnxchat_state *st)$/;"	f	file:
express_my_interest	cmd/ccnslurp.c	/^express_my_interest(struct ccn *h,$/;"	f	file:
express_my_interest	lib/ccn_traverse.c	/^express_my_interest(struct ccn *h,$/;"	f	file:
expressed_interest	lib/ccn_client.c	/^struct expressed_interest {$/;"	s	file:
extractBuf	sync/SyncActions.c	/^extractBuf(struct ccn_charbuf *cb, struct SyncNodeComposite *nc, struct SyncNodeElem *ne) {$/;"	f	file:
extractBuf	sync/sync_diff.c	/^extractBuf(struct ccn_charbuf *cb, struct SyncNodeComposite *nc, struct SyncNodeElem *ne) {$/;"	f	file:
extractDeltas	sync/SyncActions.c	/^extractDeltas(struct SyncRootStruct *root, struct ccn_upcall_info *info) {$/;"	f	file:
extractNode	sync/SyncActions.c	/^extractNode(struct SyncRootStruct *root, struct ccn_upcall_info *info) {$/;"	f	file:
extractNode	sync/sync_api.c	/^extractNode(struct SyncRootStruct *root, struct ccn_upcall_info *info) {$/;"	f	file:
extract_bounds	ccnd/ccnd_internal_client.c	/^extract_bounds(const unsigned char *ccnb, struct ccn_parsed_interest *pi,$/;"	f	file:
extsize	include/ccn/hashtb.h	/^    size_t extsize;$/;"	m	struct:hashtb_enumerator
extsize	lib/hashtb.c	/^    size_t extsize;$/;"	m	struct:node	file:
extsz	include/ccn/btree.h	/^    unsigned char extsz[1];     \/**< Header extension size (CCN_BT_SIZE_UNITS)*\/$/;"	m	struct:ccn_btree_node_header
f	cmd/ccn_fetch_test.c	/^	struct ccn_fetch *f;$/;"	m	struct:MyParms	typeref:struct:MyParms::ccn_fetch	file:
fSize	sync/SyncTest.c	/^    intmax_t fSize;$/;"	m	struct:SyncTestParms	file:
fSize	sync/SyncTest.c	/^    off_t fSize;$/;"	m	struct:storeFileStruct	file:
face	ccnd/ccnd_private.h	/^struct face {$/;"	s
face0	ccnd/ccnd_private.h	/^    struct face *face0;             \/**< special face for internal client *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::face
face0	ccnr/ccnr_private.h	/^    struct fdholder *face0;         \/**< special fdholder for internal client *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::fdholder
face_from_faceid	ccnd/ccnd.c	/^face_from_faceid(struct ccnd_handle *h, unsigned faceid)$/;"	f	file:
face_gen	ccnd/ccnd_private.h	/^    unsigned face_gen;              \/**< faceid generation number *\/$/;"	m	struct:ccnd_handle
face_gen	ccnr/ccnr_private.h	/^    unsigned face_gen;              \/**< filedesc generation number *\/$/;"	m	struct:ccnr_handle
face_limit	ccnd/ccnd_private.h	/^    unsigned face_limit;            \/**< current number of face slots *\/$/;"	m	struct:ccnd_handle
face_limit	ccnr/ccnr_private.h	/^    unsigned face_limit;            \/**< current number of fdholder slots *\/$/;"	m	struct:ccnr_handle
face_rover	ccnd/ccnd_private.h	/^    unsigned face_rover;            \/**< for faceid allocation *\/$/;"	m	struct:ccnd_handle
face_rover	ccnr/ccnr_private.h	/^    unsigned face_rover;            \/**< for filedesc allocation *\/$/;"	m	struct:ccnr_handle
face_send_queue_insert	ccnd/ccnd.c	/^face_send_queue_insert(struct ccnd_handle *h,$/;"	f	file:
faceid	ccnd/ccnd_private.h	/^    unsigned faceid;                \/** originating face *\/$/;"	m	struct:nonce_entry
faceid	ccnd/ccnd_private.h	/^    unsigned faceid;                \/**< face id *\/$/;"	m	struct:pit_face_item
faceid	ccnd/ccnd_private.h	/^    unsigned faceid;             \/**< locally unique number identifying face *\/$/;"	m	struct:ccn_forwarding
faceid	ccnd/ccnd_private.h	/^    unsigned faceid;            \/**< internal face id *\/$/;"	m	struct:face
faceid	include/ccn/face_mgmt.h	/^    unsigned faceid;$/;"	m	struct:ccn_face_instance
faceid	include/ccn/reg_mgmt.h	/^    unsigned faceid;$/;"	m	struct:ccn_forwarding_entry
faceid_by_guid	ccnd/ccnd_private.h	/^    struct hashtb *faceid_by_guid;  \/**< keyed by guid *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
faceid_from_fd	ccnd/ccnd.c	/^faceid_from_fd(struct ccnd_handle *h, int fd)$/;"	f	file:
faces_by_faceid	ccnd/ccnd_private.h	/^    struct face **faces_by_faceid;  \/**< array with face_limit elements *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::face
faces_by_fd	ccnd/ccnd_private.h	/^    struct hashtb *faces_by_fd;     \/**< keyed by fd *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
fatal	cmd/ccnc.c	/^fatal(int lineno, int val)$/;"	f	file:
fatal	lib/ccnbtreetest.c	/^fatal(const char *fn, int lineno)$/;"	f	file:
fatal	lib/nametreetest.c	/^fatal(const char *fn, int lineno)$/;"	f	file:
fauxError	sync/SyncActions.c	/^fauxError(struct SyncBaseStruct *base) {$/;"	f	file:
fauxErrorTrigger	sync/SyncPrivate.h	/^    int fauxErrorTrigger;$/;"	m	struct:SyncPrivate
fd	lib/ccn_btree_store.c	/^    int fd;$/;"	m	struct:bts_node_state	file:
fdholder	ccnr/ccnr_private.h	/^struct fdholder {$/;"	s
fdholder_by_fd	ccnr/ccnr_private.h	/^    struct fdholder **fdholder_by_fd;  \/**< array with face_limit elements *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::fdholder
fds	ccnd/ccnd_private.h	/^    struct pollfd *fds;             \/**< used for poll system call *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::pollfd
fds	ccnr/ccnr_private.h	/^    struct pollfd *fds;             \/**< used for poll system call *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::pollfd
fenceSeconds	sync/SyncActions.c	/^static int fenceSeconds = 2;            \/\/ seconds between setting the fence$/;"	v	file:
fetchLifetime	sync/SyncPrivate.h	/^    int fetchLifetime;          \/*< seconds for node fetch interest lifetime *\/$/;"	m	struct:SyncPrivate
fetchQ	sync/sync_diff.h	/^    struct sync_diff_fetch_data *fetchQ; \/**< cache entries being fetched *\/$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::sync_diff_fetch_data
fetch_data	sync/sync_api.c	/^    struct sync_diff_fetch_data *fetch_data;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::sync_diff_fetch_data	file:
fgen	ccnd/ccnd_private.h	/^    int fgen;                    \/**< used to decide when forward_to is stale *\/$/;"	m	struct:nameprefix_entry
fgen	ccnr/ccnr_private.h	/^    int fgen;                    \/**< used to decide when forward_to is stale *\/$/;"	m	struct:nameprefix_entry
fgen	ccnr/ccnr_private.h	/^    int fgen;                   \/**< decide if outbound is stale *\/$/;"	m	struct:propagating_entry
file	sync/SyncBase.h	/^    char * file;$/;"	m	struct:SyncErrStruct
file	sync/SyncTest.c	/^    FILE *file;$/;"	m	struct:storeFileStruct	file:
fileName	cmd/ccn_fetch_test.c	/^	string fileName;$/;"	m	struct:TestElemStruct	file:
fileSize	lib/ccn_fetch.c	/^	intmax_t fileSize;		\/\/ the file size (< 0 if unassigned)$/;"	m	struct:ccn_fetch_stream	file:
filedesc	ccnr/ccnr_private.h	/^    unsigned filedesc;             \/**< locally unique number identifying fdholder *\/$/;"	m	struct:ccn_forwarding
filedesc	ccnr/ccnr_private.h	/^    unsigned filedesc;            \/**< origin of the interest, dest for matches *\/$/;"	m	struct:propagating_entry
filedesc	ccnr/ccnr_private.h	/^    unsigned filedesc;          \/**< file descriptor *\/$/;"	m	struct:fdholder
filename	cmd/dataresponsetest.c	/^        char *filename;$/;"	m	struct:handlerstate::handlerstateitem	file:
fileprefix	cmd/ccn_ccnbtoxml.c	/^    char *fileprefix;$/;"	m	struct:callback_state	file:
fill_holes	cmd/ccncatchunks2.c	/^fill_holes(struct ccn_schedule *sched, void *clienth, $/;"	f	file:
fillout	lib/lned.c	/^fillout(char ch, int k)$/;"	f	file:
filter	sync/SyncRoot.h	/^    struct SyncNameAccum *filter;         \/**< filter clauses *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncNameAccum
filters	sync/SyncPrivate.h	/^    struct SyncNameAccumList *filters;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncNameAccumList
final	ccnr/ccnr_proto.h	/^    intmax_t final;$/;"	m	struct:ccnr_expect_content
final256	lib/ccn_signing.c	/^static int final256(EVP_MD_CTX *ctx,unsigned char *md)$/;"	f	file:
finalSeg	lib/ccn_fetch.c	/^	seg_t finalSeg;			\/\/ final segment number (< 0 if not known yet)$/;"	m	struct:ccn_fetch_stream	file:
finalSegLen	lib/ccn_fetch.c	/^	int finalSegLen;		\/\/ final segment length$/;"	m	struct:ccn_fetch_stream	file:
final_func	lib/ccn_signing.c	/^    int (*final_func)(void *ctx, unsigned char *sigret, unsigned int *siglen, EVP_PKEY *pkey);$/;"	m	struct:ccn_sigc	file:
finalize	include/ccn/hashtb.h	/^    hashtb_finalize_proc finalize; \/* default is NULL *\/$/;"	m	struct:hashtb_param
finalize	include/ccn/nametree.h	/^    ccn_nametree_action finalize; \/**< called from destroy *\/$/;"	m	struct:ccn_nametree
finalize_accession	ccnr/ccnr_store.c	/^finalize_accession(struct hashtb_enumerator *e)$/;"	f	file:
finalize_data	include/ccn/hashtb.h	/^    void *finalize_data;           \/* default is NULL *\/$/;"	m	struct:hashtb_param
finalize_face	ccnd/ccnd.c	/^finalize_face(struct hashtb_enumerator *e)$/;"	f	file:
finalize_guest	ccnd/ccnd.c	/^finalize_guest(struct hashtb_enumerator *e)$/;"	f	file:
finalize_interest	ccnd/ccnd.c	/^finalize_interest(struct hashtb_enumerator *e)$/;"	f	file:
finalize_interest_filter	lib/ccn_client.c	/^finalize_interest_filter(struct hashtb_enumerator *e)$/;"	f	file:
finalize_keystore	lib/ccn_client.c	/^finalize_keystore(struct hashtb_enumerator *e)$/;"	f	file:
finalize_nameprefix	ccnd/ccnd.c	/^finalize_nameprefix(struct hashtb_enumerator *e)$/;"	f	file:
finalize_node	lib/ccn_btree.c	/^finalize_node(struct hashtb_enumerator *e)$/;"	f	file:
finalize_nonce	ccnd/ccnd.c	/^finalize_nonce(struct hashtb_enumerator *e)$/;"	f	file:
finalize_pkey	lib/ccn_client.c	/^finalize_pkey(struct hashtb_enumerator *e)$/;"	f	file:
finally	lib/hashtbtest.c	/^finally(struct hashtb_enumerator *e)$/;"	f	file:
finalslot	cmd/ccncatchunks2.c	/^    unsigned finalslot;$/;"	m	struct:mydata	file:
findAndDeleteRoot	sync/SyncActions.c	/^findAndDeleteRoot(struct SyncBaseStruct *base, char *here,$/;"	f	file:
find_fetch_data	sync/sync_api.c	/^find_fetch_data(struct ccns_handle *ch, struct SyncHashCacheEntry *ce) {$/;"	f	file:
find_first_match_candidate	ccnd/ccnd.c	/^find_first_match_candidate(struct ccnd_handle *h,$/;"	f	file:
finish_openudata	cmd/ccn_xmltoccnb.c	/^finish_openudata(struct ccn_encoder *u)$/;"	f	file:
first	lib/ccn_bulkdata.c	/^    struct pending *first;          \/* start of list of pending items *\/$/;"	m	struct:bulkdata	typeref:struct:bulkdata::pending	file:
flags	ccnd/ccnd_private.h	/^    int flags;                  \/**< CCN_FACE_* face flags *\/$/;"	m	struct:face
flags	ccnd/ccnd_private.h	/^    int flags;                  \/**< see defines below *\/$/;"	m	struct:content_entry
flags	ccnd/ccnd_private.h	/^    unsigned flags;              \/**< CCN_FORW_* - c.f. <ccn\/reg_mgnt.h> *\/$/;"	m	struct:ccn_forwarding
flags	ccnd/ccnd_private.h	/^    unsigned flags;              \/**< CCN_FORW_* flags about namespace *\/$/;"	m	struct:nameprefix_entry
flags	ccnr/ccnr_private.h	/^    int flags;                  \/**< CCNR_FACE_* fdholder flags *\/$/;"	m	struct:fdholder
flags	ccnr/ccnr_private.h	/^    unsigned flags;              \/**< CCN_FORW_* - c.f. <ccn\/reg_mgnt.h> *\/$/;"	m	struct:ccn_forwarding
flags	ccnr/ccnr_private.h	/^    unsigned flags;              \/**< CCN_FORW_* flags about namespace *\/$/;"	m	struct:nameprefix_entry
flags	ccnr/ccnr_private.h	/^    unsigned flags;             \/**< CCN_PR_xxx *\/$/;"	m	struct:propagating_entry
flags	ccnr/ccnr_store.c	/^    int flags;                  \/**< see below - use accessor functions *\/$/;"	m	struct:content_entry	file:
flags	cmd/ccnslurp.c	/^    int flags;$/;"	m	struct:upcalldata	file:
flags	include/ccn/btree_content.h	/^    unsigned char flags[1];     \/**< CCN_RCFLAG_* *\/$/;"	m	struct:ccn_btree_content_payload
flags	include/ccn/reg_mgmt.h	/^    int flags;$/;"	m	struct:ccn_forwarding_entry
flags	lib/ccn_client.c	/^    int flags;$/;"	m	struct:interest_filter	file:
flags	lib/ccn_client.c	/^    int flags;$/;"	m	struct:simple_get_data	file:
flags	lib/ccn_traverse.c	/^    int flags;$/;"	m	struct:ccn_traversal	file:
flatname	ccnr/ccnr_store.c	/^    struct ccn_charbuf *flatname; \/**< for skiplist, et. al. *\/$/;"	m	struct:content_entry	typeref:struct:content_entry::ccn_charbuf	file:
flood	ccnd/ccnd_private.h	/^    int flood;                      \/**< Internal control for auto-reg *\/$/;"	m	struct:ccnd_handle
flood	ccnr/ccnr_private.h	/^    int flood;                      \/**< Internal control for auto-reg *\/$/;"	m	struct:ccnr_handle
formatCacheEntry	sync/sync_diff.c	/^formatCacheEntry(struct SyncRootStruct *root, char *dst, int lim,$/;"	f	file:
formatStats	sync/SyncActions.c	/^formatStats(struct SyncRootStruct *root, struct ccn_charbuf *cb) {$/;"	f	file:
formatStats	sync/SyncTest.c	/^formatStats(struct SyncTestParms *parms) {$/;"	f	file:
formatting_flags	cmd/ccn_ccnbtoxml.c	/^    int formatting_flags;$/;"	m	struct:ccn_decoder	file:
forw_flags	lib/ccn_client.c	/^    int forw_flags;$/;"	m	struct:multifilt_item	file:
forward_to	ccnd/ccnd_private.h	/^    struct ccn_indexbuf *forward_to; \/**< faceids to forward to *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ccn_indexbuf
forward_to	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *forward_to; \/**< faceids to forward to *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ccn_indexbuf
forward_to_gen	ccnd/ccnd_private.h	/^    unsigned forward_to_gen;        \/**< for forward_to updates *\/$/;"	m	struct:ccnd_handle
forward_to_gen	ccnr/ccnr_private.h	/^    unsigned forward_to_gen;        \/**< for forward_to updates *\/$/;"	m	struct:ccnr_handle
forwarding	ccnd/ccnd_private.h	/^    struct ccn_forwarding *forwarding; \/**< detailed forwarding info *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ccn_forwarding
forwarding	ccnr/ccnr_private.h	/^    struct ccn_forwarding *forwarding; \/**< detailed forwarding info *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ccn_forwarding
fragment	cmd/ccn_ccnbtoxml.c	/^    int fragment;$/;"	m	struct:callback_state	file:
freeFetchData	sync/sync_diff.c	/^freeFetchData(struct sync_diff_fetch_data *fd) {$/;"	f	file:
freeString	lib/ccn_fetch.c	/^freeString(char * s) {$/;"	f	file:
free_fetch_data	sync/sync_api.c	/^free_fetch_data(struct ccns_handle *ch, struct sync_diff_fetch_data *fd) {$/;"	f	file:
freelow	include/ccn/btree.h	/^    unsigned freelow;           \/**< Index of first unused byte of free space *\/$/;"	m	struct:ccn_btree_node
freshLimit	sync/SyncUtil.c	/^static int freshLimit = 30;             \/\/ freshness limit, in seconds$/;"	v	file:
freshness	cmd/ccnc.c	/^    int freshness;              \/* to set FreshnessSeconds *\/$/;"	m	struct:ccnxchat_state	file:
freshness	cmd/ccnc.c	/^    int freshness;$/;"	m	struct:__anon3	file:
freshness	include/ccn/ccn.h	/^    int freshness;$/;"	m	struct:ccn_signing_params
freshness	lib/ccn_seqwriter.c	/^    int freshness;$/;"	m	struct:ccn_seqwriter	file:
fs	cmd/ccn_fetch_test.c	/^	struct ccn_fetch_stream *fs;$/;"	m	struct:TestElemStruct	typeref:struct:TestElemStruct::ccn_fetch_stream	file:
fs	lib/ccn_fetch.c	/^	struct ccn_fetch_stream *fs;$/;"	m	struct:localClosure	typeref:struct:localClosure::ccn_fetch_stream	file:
fstate	cmd/ccn_splitccnb.c	/^struct fstate {$/;"	s	file:
fstate	cmd/ccnhexdumpdata.c	/^struct fstate {$/;"	s	file:
full	include/ccn/btree.h	/^    int full;                   \/**< split internal nodes bigger than this *\/$/;"	m	struct:ccn_btree
full0	include/ccn/btree.h	/^    int full0;                  \/**< split leaf nodes bigger than this *\/$/;"	m	struct:ccn_btree
genTestRootRepos	sync/SyncTest.c	/^genTestRootRepos(struct SyncTestParms *parms) {$/;"	f	file:
genTestRootRouting	sync/SyncTest.c	/^genTestRootRouting(struct SyncTestParms *parms) {$/;"	f	file:
generate_cob	cmd/ccnc.c	/^generate_cob(struct ccnxchat_state *st)$/;"	f	file:
generate_new_data	cmd/ccnc.c	/^generate_new_data(struct ccnxchat_state *st)$/;"	f	file:
get	sync/sync_diff.h	/^    int (* get)(struct sync_diff_get_closure *gc,$/;"	m	struct:sync_diff_get_closure
getCmdStr	sync/SyncActions.c	/^getCmdStr(enum SyncRegisterActionKind kind) {$/;"	f	file:
getEnvLimited	sync/SyncBase.c	/^getEnvLimited(char *key, int lo, int hi, int def) {$/;"	f	file:
getFile	sync/SyncTest.c	/^getFile(struct SyncTestParms *parms, char *src, char *dst) {$/;"	f	file:
getKindStr	sync/SyncActions.c	/^getKindStr(enum SyncRegisterActionKind kind) {$/;"	f	file:
get_closure	sync/sync_diff.h	/^    struct sync_diff_get_closure *get_closure;$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::sync_diff_get_closure
get_dgram_source	ccnd/ccnd.c	/^get_dgram_source(struct ccnd_handle *h, struct face *face,$/;"	f	file:
get_fib_npe	ccnd/ccnd.c	/^get_fib_npe(struct ccnd_handle *h, struct interest_entry *ie)$/;"	f
get_key_from_aes_keystore	lib/ccn_aes_keystore.c	/^get_key_from_aes_keystore(struct ccn_keystore *ks) $/;"	f	file:
get_my_data	cmd/ccnslurp.c	/^static struct upcalldata *get_my_data(struct ccn_closure *selfp)$/;"	f	file:
get_my_data	lib/ccn_traverse.c	/^static struct ccn_traversal *get_my_data(struct ccn_closure *selfp)$/;"	f	file:
get_outbound_faces	ccnd/ccnd.c	/^get_outbound_faces(struct ccnd_handle *h,$/;"	f	file:
gettime	include/ccn/schedule.h	/^    ccn_gettime_action gettime;$/;"	m	struct:ccn_gettime
gettime	sync/sync_api.c	/^gettime(const struct ccn_gettime *self, struct ccn_timeval *result) {$/;"	f	file:
globalNullString	lib/ccn_fetch.c	/^static char *globalNullString = "";$/;"	v	file:
global_h	ccnr/ccnr_main.c	/^static struct ccnr_handle *global_h = NULL;$/;"	v	typeref:struct:ccnr_handle	file:
global_prefix_offset	ccnr/ccnr_proto.h	/^    int global_prefix_offset;$/;"	m	struct:ccnr_parsed_policy
gt	lib/ccn_schedule.c	/^static struct ccn_gettime gt = {"getTOD", &my_gettime, 1000000, NULL};$/;"	v	typeref:struct:ccn_gettime	file:
guest_entry	ccnd/ccnd_private.h	/^struct guest_entry {$/;"	s
guest_tab	ccnd/ccnd_private.h	/^    struct hashtb *guest_tab;       \/**< keyed by faceid *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
guid	ccnd/ccnd_private.h	/^    const unsigned char *guid;  \/**< guid name for channel, shared w\/ peers *\/$/;"	m	struct:face
guid_cob	ccnd/ccnd_private.h	/^    struct ccn_charbuf *guid_cob; \/**< content object publishing face guid *\/$/;"	m	struct:face	typeref:struct:face::ccn_charbuf
h	cmd/ccnc.c	/^    struct ccn *h;              \/* Backlink to ccn handle *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn	file:
h	cmd/ccncatchunks2.c	/^    struct ccn *h;$/;"	m	struct:mydata	typeref:struct:mydata::ccn	file:
h	include/ccn/ccn.h	/^    struct ccn *h;              \/**< The ccn library handle *\/$/;"	m	struct:ccn_upcall_info	typeref:struct:ccn_upcall_info::ccn
h	lib/ccn_fetch.c	/^	struct ccn *h;$/;"	m	struct:ccn_fetch	typeref:struct:ccn_fetch::ccn	file:
h	lib/ccn_seqwriter.c	/^    struct ccn *h;$/;"	m	struct:ccn_seqwriter	typeref:struct:ccn_seqwriter::ccn	file:
handle_ccndid_response	lib/ccn_client.c	/^handle_ccndid_response(struct ccn_closure *selfp,$/;"	f	file:
handle_fatal_signal	ccnd/ccnd.c	/^handle_fatal_signal(int sig)$/;"	f	file:
handle_key	lib/ccn_client.c	/^handle_key(struct ccn_closure *selfp,$/;"	f	file:
handle_multifilt	lib/ccn_client.c	/^handle_multifilt(struct ccn_closure *selfp,$/;"	f	file:
handle_prefix_reg_reply	lib/ccn_client.c	/^handle_prefix_reg_reply($/;"	f	file:
handle_send_error	ccnd/ccnd.c	/^handle_send_error(struct ccnd_handle *h, int errnum, struct face *face,$/;"	f	file:
handle_send_error	ccnr/ccnr_io.c	/^handle_send_error(struct ccnr_handle *h, int errnum, struct fdholder *fdholder,$/;"	f	file:
handle_signal	ccnr/ccnr_main.c	/^handle_signal(int sig)$/;"	f	file:
handle_simple_incoming_content	lib/ccn_client.c	/^handle_simple_incoming_content($/;"	f	file:
handlerstate	cmd/dataresponsetest.c	/^struct handlerstate {$/;"	s	file:
handlerstateitem	cmd/dataresponsetest.c	/^    struct handlerstateitem {$/;"	s	struct:handlerstate	file:
hash	lib/hashtb.c	/^    size_t hash;$/;"	m	struct:node	file:
hash	sync/SyncActions.h	/^    struct ccn_charbuf *hash;$/;"	m	struct:SyncActionData	typeref:struct:SyncActionData::ccn_charbuf
hash	sync/SyncHashCache.h	/^    struct ccn_charbuf *hash;           \/**< hash used to reach this entry *\/$/;"	m	struct:SyncHashCacheEntry	typeref:struct:SyncHashCacheEntry::ccn_charbuf
hash	sync/SyncNode.h	/^    struct ccn_charbuf *hash;     \/**< combined hash (no tag, requires SyncEndComposite) *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::ccn_charbuf
hashL	sync/SyncActions.c	/^    struct ccn_charbuf *hashL;      \/**< hash for root of local sync tree *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::ccn_charbuf	file:
hashR	sync/SyncActions.c	/^    struct ccn_charbuf *hashR;      \/**< hash for root of remote sync tree *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::ccn_charbuf	file:
hashSeen	sync/sync_api.c	/^    struct SyncHashInfoList *hashSeen;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncHashInfoList	file:
hashSplitTrigger	sync/SyncActions.c	/^static int hashSplitTrigger = 17;       \/\/ trigger for splitting based on hash (n\/255)$/;"	v	file:
hashSplitTrigger	sync/sync_diff.c	/^static int hashSplitTrigger = 17;       \/\/ trigger for splitting based on hash (n\/255)$/;"	v	file:
hashX	sync/sync_diff.h	/^    struct ccn_charbuf *hashX;$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::ccn_charbuf
hashY	sync/sync_diff.h	/^    struct ccn_charbuf *hashY;$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::ccn_charbuf
hash_cache_entry	sync/sync_diff.h	/^    struct SyncHashCacheEntry *hash_cache_entry;$/;"	m	struct:sync_diff_fetch_data	typeref:struct:sync_diff_fetch_data::SyncHashCacheEntry
hash_list	sync/sync_api.c	/^struct hash_list {$/;"	s	file:
hashes	include/ccn/merklepathasn1.h	/^    STACK_OF(ASN1_OCTET_STRING) *hashes;$/;"	m	struct:MP_info_st
hashtb	lib/hashtb.c	/^struct hashtb {$/;"	s	file:
hashtb_create	lib/hashtb.c	/^hashtb_create(size_t item_size, const struct hashtb_param *param)$/;"	f
hashtb_delete	lib/hashtb.c	/^hashtb_delete(struct hashtb_enumerator *hte)$/;"	f
hashtb_destroy	lib/hashtb.c	/^hashtb_destroy(struct hashtb **htp)$/;"	f
hashtb_end	lib/hashtb.c	/^hashtb_end(struct hashtb_enumerator *hte)$/;"	f
hashtb_enumerator	include/ccn/hashtb.h	/^struct hashtb_enumerator {$/;"	s
hashtb_finalize_proc	include/ccn/hashtb.h	/^typedef void (*hashtb_finalize_proc)(struct hashtb_enumerator *);$/;"	t
hashtb_get_param	lib/hashtb.c	/^hashtb_get_param(struct hashtb *ht, struct hashtb_param *param)$/;"	f
hashtb_hash	lib/hashtb.c	/^hashtb_hash(const unsigned char *key, size_t key_size)$/;"	f
hashtb_lookup	lib/hashtb.c	/^hashtb_lookup(struct hashtb *ht, const void *key, size_t keysize)$/;"	f
hashtb_n	lib/hashtb.c	/^hashtb_n(struct hashtb *ht)$/;"	f
hashtb_next	lib/hashtb.c	/^hashtb_next(struct hashtb_enumerator *hte)$/;"	f
hashtb_param	include/ccn/hashtb.h	/^struct hashtb_param {$/;"	s
hashtb_rehash	lib/hashtb.c	/^hashtb_rehash(struct hashtb *ht, unsigned n_buckets)$/;"	f
hashtb_seek	lib/hashtb.c	/^hashtb_seek(struct hashtb_enumerator *hte, const void *key, size_t keysize, size_t extsize)$/;"	f
hashtb_start	lib/hashtb.c	/^hashtb_start(struct hashtb *ht, struct hashtb_enumerator *hte)$/;"	f
hdr	lib/ccnbtreetest.c	/^    struct ccn_btree_node_header hdr;$/;"	m	struct:node_example	typeref:struct:node_example::ccn_btree_node_header	file:
hdr	lib/ccnbtreetest.c	/^    struct ccn_btree_node_header hdr;$/;"	m	struct:root_example	typeref:struct:root_example::ccn_btree_node_header	file:
head	include/ccn/nametree.h	/^    struct ccny *head;      \/**< head for skiplist, etc. *\/$/;"	m	struct:ccn_nametree	typeref:struct:ccn_nametree::ccny
head	sync/SyncHashCache.h	/^    struct SyncHashCacheHead *head;     \/**< the parent head *\/$/;"	m	struct:SyncHashCacheEntry	typeref:struct:SyncHashCacheEntry::SyncHashCacheHead
header	lib/ccn_aes_keystore.c	/^    keystore_header header;	\/\/ All keystores must begin with this$/;"	m	struct:ccn_keystore	file:
header	lib/ccn_keystore.c	/^    keystore_header header;	\/\/ All keystores must begin with this$/;"	m	struct:ccn_keystore	file:
headx	ccnd/ccnd_private.h	/^    struct content_entry *headx;    \/**< list head for expiry queue *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::content_entry
heap	lib/ccn_schedule.c	/^    struct ccn_schedule_heap_item *heap;$/;"	m	struct:ccn_schedule	typeref:struct:ccn_schedule::ccn_schedule_heap_item	file:
heap_height	lib/ccn_schedule.c	/^    int heap_height;    \/* this is validated just before use *\/$/;"	m	struct:ccn_schedule	file:
heap_insert	lib/ccn_schedule.c	/^heap_insert(struct ccn_schedule_heap_item *heap, heapmicros micros,$/;"	f	file:
heap_limit	lib/ccn_schedule.c	/^    int heap_limit;$/;"	m	struct:ccn_schedule	file:
heap_n	lib/ccn_schedule.c	/^    int heap_n;$/;"	m	struct:ccn_schedule	file:
heap_sift	lib/ccn_schedule.c	/^heap_sift(struct ccn_schedule_heap_item *heap, int n)$/;"	f	file:
heapmicros	lib/ccn_schedule.c	/^typedef uintptr_t heapmicros;$/;"	t	file:
heartbeatMicros	sync/SyncPrivate.h	/^    int heartbeatMicros;        \/*< microseconds between action heartbeats *\/$/;"	m	struct:SyncPrivate
heldRAInterest	sync/SyncRoot.h	/^    struct ccn_charbuf *heldRAInterest;   \/**< received ra interest *\/ $/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::ccn_charbuf
help	cmd/ccn_fetch_test.c	/^static char *help = "usage: ccn_fetch_test {switch | ccnName}*\\n\\$/;"	v	file:
hex_string	cmd/ccnsyncwatch.c	/^hex_string(unsigned char *s, size_t l)$/;"	f
hex_value	cmd/ccnsyncwatch.c	/^int hex_value(char c)$/;"	f
hexit	lib/ccn_uri.c	/^hexit(int c)$/;"	f	file:
hmac_context	lib/ccn_signing.c	/^    HMAC_CTX hmac_context;$/;"	m	struct:ccn_sigc	file:
hole_filled	cmd/ccncatchunks2.c	/^hole_filled(struct ccn_closure *selfp,$/;"	f	file:
holefiller	cmd/ccncatchunks2.c	/^    struct ccn_scheduled_event *holefiller;$/;"	m	struct:mydata	typeref:struct:mydata::ccn_scheduled_event	file:
holes	cmd/ccncatchunks2.c	/^    intmax_t holes;$/;"	m	struct:mydata	file:
ht	include/ccn/hashtb.h	/^    struct hashtb *ht;$/;"	m	struct:hashtb_enumerator	typeref:struct:hashtb_enumerator::hashtb
id	lib/ccn_digest.c	/^    enum ccn_digest_id id;$/;"	m	struct:ccn_digest	typeref:enum:ccn_digest::ccn_digest_id	file:
id	lib/ccn_fetch.c	/^	char *id;$/;"	m	struct:ccn_fetch_stream	file:
ie	include/ccn/btree.h	/^    struct ccn_btree_internal_payload ie;$/;"	m	struct:ccn_btree_internal_entry	typeref:struct:ccn_btree_internal_entry::ccn_btree_internal_payload
ie_head	ccnd/ccnd_private.h	/^    struct ielinks ie_head;      \/**< list head for interest entries *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ielinks
ie_next_usec	ccnd/ccnd.c	/^ie_next_usec(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
ielinks	ccnd/ccnd_private.h	/^struct ielinks {$/;"	s
if_nametoindex	libexec/udplink.c	/^unsigned if_nametoindex(const char *ifname) { $/;"	f
imcoming_bulkdata	lib/ccn_bulkdata.c	/^imcoming_bulkdata(struct ccn_closure *selfp,$/;"	f
inbuf	ccnd/ccnd_private.h	/^    struct ccn_charbuf *inbuf;$/;"	m	struct:face	typeref:struct:face::ccn_charbuf
inbuf	ccnr/ccnr_private.h	/^    struct ccn_charbuf *inbuf;  \/** Buffered input data *\/$/;"	m	struct:fdholder	typeref:struct:fdholder::ccn_charbuf
inbuf	lib/ccn_client.c	/^    struct ccn_charbuf *inbuf;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_charbuf	file:
incob	cmd/ccnc.c	/^    struct ccn_charbuf *incob;  \/* Most recent incoming ContentObject *\/    $/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
incoming_adjacency	ccnd/ccnd_internal_client.c	/^incoming_adjacency(struct ccn_closure *selfp,$/;"	f	file:
incoming_content	cmd/ccnbuzz.c	/^incoming_content($/;"	f	file:
incoming_content	cmd/ccnc.c	/^incoming_content(struct ccn_closure *selfp,$/;"	f	file:
incoming_content	cmd/ccncatchunks.c	/^incoming_content($/;"	f
incoming_content	cmd/ccncatchunks2.c	/^incoming_content(struct ccn_closure *selfp,$/;"	f
incoming_content	cmd/ccnlibtest.c	/^incoming_content(struct ccn_closure *selfp,$/;"	f
incoming_content	cmd/ccnls.c	/^incoming_content($/;"	f
incoming_content	cmd/ccnrm.c	/^incoming_content($/;"	f
incoming_content	cmd/ccnsendchunks.c	/^incoming_content($/;"	f
incoming_content	cmd/ccnsimplecat.c	/^incoming_content(struct ccn_closure *selfp,$/;"	f
incoming_content	cmd/ccnslurp.c	/^incoming_content($/;"	f	file:
incoming_content	cmd/ccnsnew.c	/^incoming_content(struct ccn_closure *selfp,$/;"	f	file:
incoming_content	lib/ccn_traverse.c	/^incoming_content($/;"	f	file:
incoming_content_action	cmd/ccnlibtest.c	/^static struct ccn_closure incoming_content_action[N_POOLS];$/;"	v	typeref:struct:ccn_closure	file:
incoming_content_action	cmd/ccnrm.c	/^static struct ccn_closure incoming_content_action = {$/;"	v	typeref:struct:ccn_closure	file:
incoming_interest	cmd/ccnc.c	/^incoming_interest(struct ccn_closure *selfp,$/;"	f	file:
incoming_interest	cmd/ccnpoke.c	/^incoming_interest($/;"	f
incoming_interest	cmd/ccnsendchunks.c	/^incoming_interest($/;"	f
incoming_interest	cmd/ccnsnew.c	/^incoming_interest(struct ccn_closure *selfp,$/;"	f	file:
incoming_interest	libexec/ccndc-srv.c	/^incoming_interest(struct ccn_closure *selfp,$/;"	f
index	ccnr/ccnr_sync.c	/^    int index; \/**< Index into ccnr->active_enum *\/$/;"	m	struct:sync_enumeration_state	file:
index	include/ccn/coding.h	/^    int index;              \/**< matches enum ccn_dtag above *\/$/;"	m	struct:ccn_dict_entry
index	include/ccn/coding.h	/^    ssize_t index;          \/**< Number of bytes processed *\/$/;"	m	struct:ccn_skeleton_decoder
index	sync/SyncHashCache.h	/^    uintmax_t index;                    \/**< assigned by order of creation *\/$/;"	m	struct:SyncHashCacheEntry
index_cleaner	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *index_cleaner; \/**< writes out btree nodes *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
indexbuf_obtain	ccnd/ccnd.c	/^indexbuf_obtain(struct ccnd_handle *h)$/;"	f	file:
indexbuf_release	ccnd/ccnd.c	/^indexbuf_release(struct ccnd_handle *h, struct ccn_indexbuf *c)$/;"	f	file:
indexes	sync/IndexSorter.h	/^    IndexSorter_Index *indexes;        \/\/ the storage for the indexes$/;"	m	struct:IndexSorter_Struct
info	include/ccn/nametree.h	/^    unsigned info;          \/**< for client use *\/$/;"	m	struct:ccny
init256	lib/ccn_signing.c	/^static int init256(EVP_MD_CTX *ctx)$/;"	f	file:
initLen	sync/SyncActions.c	/^    int initLen;$/;"	m	struct:SyncUpdateData	file:
initWorkerFromHash	sync/sync_diff.c	/^initWorkerFromHash(struct SyncRootStruct *root,$/;"	f	file:
init_all_chars_mixed_encoded	lib/encodedecodetest.c	/^static void init_all_chars_mixed_encoded(void) {$/;"	f	file:
init_all_chars_percent_encoded	lib/encodedecodetest.c	/^static void init_all_chars_percent_encoded(void) {$/;"	f	file:
init_face_flags	ccnd/ccnd.c	/^init_face_flags(struct ccnd_handle *h, struct face *face, int setflags)$/;"	f	file:
init_face_flags	ccnr/ccnr_io.c	/^init_face_flags(struct ccnr_handle *h, struct fdholder *fdholder, int setflags)$/;"	f	file:
init_func	lib/ccn_signing.c	/^    int (*init_func)(void *ctx, const void *key, int len, const EVP_MD *md);$/;"	m	struct:ccn_sigc	file:
init_ver_exclusion	cmd/ccnc.c	/^init_ver_exclusion(struct ccnxchat_state *st)$/;"	f	file:
initialize	cmd/ccnc.c	/^initialize(struct ccnxchat_state *st, struct ccn_charbuf *basename)$/;"	f	file:
initialized	include/ccn/keystore.h	/^    int initialized;$/;"	m	struct:keystore_header_st
inputName	sync/SyncTest.c	/^    char *inputName;$/;"	m	struct:SyncTestParms	file:
input_processed	cmd/ccn_xmltoccnb.c	/^    size_t input_processed;$/;"	m	struct:base64_decoder	file:
intdata	include/ccn/ccn.h	/^    intptr_t intdata;   \/**< for client use *\/$/;"	m	struct:ccn_closure
interest	ccnr/ccnr_private.h	/^    struct ccn_charbuf *interest;$/;"	m	struct:enum_state	typeref:struct:enum_state::ccn_charbuf
interest	ccnr/ccnr_sync.c	/^    struct ccn_charbuf *interest;$/;"	m	struct:sync_enumeration_state	typeref:struct:sync_enumeration_state::ccn_charbuf	file:
interest	lib/ccn_fetch.c	/^	struct ccn_charbuf *interest;		\/\/ interest template$/;"	m	struct:ccn_fetch_stream	typeref:struct:ccn_fetch_stream::ccn_charbuf	file:
interest_ccnb	include/ccn/ccn.h	/^    const unsigned char *interest_ccnb;$/;"	m	struct:ccn_upcall_info
interest_comps	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *interest_comps;$/;"	m	struct:enum_state	typeref:struct:enum_state::ccn_indexbuf
interest_comps	include/ccn/ccn.h	/^    struct ccn_indexbuf *interest_comps;$/;"	m	struct:ccn_upcall_info	typeref:struct:ccn_upcall_info::ccn_indexbuf
interest_entry	ccnd/ccnd_private.h	/^struct interest_entry {$/;"	s
interest_faceid	ccnd/ccnd_private.h	/^    unsigned interest_faceid;       \/**< for self_reg internal client *\/$/;"	m	struct:ccnd_handle
interest_faceid	ccnr/ccnr_private.h	/^    unsigned interest_faceid;       \/**< for self_reg internal client *\/$/;"	m	struct:ccnr_handle
interest_filter	lib/ccn_client.c	/^    struct interest_filter *interest_filter; \/* Backlink *\/$/;"	m	struct:ccn_reg_closure	typeref:struct:ccn_reg_closure::interest_filter	file:
interest_filter	lib/ccn_client.c	/^struct interest_filter { \/* keyed by components of name *\/$/;"	s	file:
interest_filters	lib/ccn_client.c	/^    struct hashtb *interest_filters;$/;"	m	struct:ccn	typeref:struct:ccn::hashtb	file:
interest_handler	cmd/dataresponsetest.c	/^interest_handler(struct ccn_closure *selfp,$/;"	f
interest_msg	ccnd/ccnd_private.h	/^    const unsigned char *interest_msg; \/**< pending interest message *\/$/;"	m	struct:interest_entry
interest_msg	ccnr/ccnr_private.h	/^    unsigned char *interest_msg; \/**< pending interest message *\/$/;"	m	struct:propagating_entry
interest_msg	lib/ccn_client.c	/^    unsigned char *interest_msg; \/* the interest message as sent *\/$/;"	m	struct:expressed_interest	file:
interest_tab	ccnd/ccnd_private.h	/^    struct hashtb *interest_tab;    \/**< keyed by interest msg sans Nonce *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
interestbuf	lib/ccn_client.c	/^    struct ccn_charbuf *interestbuf;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_charbuf	file:
interests_accepted	ccnd/ccnd_private.h	/^    unsigned long interests_accepted;$/;"	m	struct:ccnd_handle
interests_accepted	ccnr/ccnr_private.h	/^    unsigned long interests_accepted;$/;"	m	struct:ccnr_handle
interests_by_prefix	lib/ccn_client.c	/^    struct hashtb *interests_by_prefix;$/;"	m	struct:ccn	typeref:struct:ccn::hashtb	file:
interests_by_prefix	lib/ccn_client.c	/^struct interests_by_prefix { \/* keyed by components of name prefix *\/$/;"	s	file:
interests_dropped	ccnd/ccnd_private.h	/^    unsigned long interests_dropped;$/;"	m	struct:ccnd_handle
interests_dropped	ccnr/ccnr_private.h	/^    unsigned long interests_dropped;$/;"	m	struct:ccnr_handle
interests_possibly_pending	lib/ccn_seqwriter.c	/^    unsigned char interests_possibly_pending;$/;"	m	struct:ccn_seqwriter	file:
interests_sent	ccnd/ccnd_private.h	/^    unsigned long interests_sent;$/;"	m	struct:ccnd_handle
interests_sent	ccnr/ccnr_private.h	/^    unsigned long interests_sent;$/;"	m	struct:ccnr_handle
interests_sent	cmd/ccncatchunks2.c	/^    intmax_t interests_sent;$/;"	m	struct:mydata	file:
interests_stuffed	ccnd/ccnd_private.h	/^    unsigned long interests_stuffed;$/;"	m	struct:ccnd_handle
interests_stuffed	ccnr/ccnr_private.h	/^    unsigned long interests_stuffed;$/;"	m	struct:ccnr_handle
internal_client	ccnd/ccnd_private.h	/^    struct ccn *internal_client;    \/**< internal client *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn
internal_client	ccnr/ccnr_private.h	/^    struct ccn *internal_client;    \/**< internal client *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn
internal_client_refresh	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *internal_client_refresh;$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_scheduled_event
internal_client_refresh	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *internal_client_refresh;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
io	include/ccn/btree.h	/^    struct ccn_btree_io *io;    \/**< storage layer *\/$/;"	m	struct:ccn_btree	typeref:struct:ccn_btree::ccn_btree_io
io	lib/ccn_btree_store.c	/^    struct ccn_btree_io *io;$/;"	m	struct:bts_data	typeref:struct:bts_data::ccn_btree_io	file:
iodata	include/ccn/btree.h	/^    void *iodata;               \/**< Private use by ccn_btree_io methods *\/$/;"	m	struct:ccn_btree_node
ipproto	include/ccn/sockcreate.h	/^    int ipproto; \/**< as per http:\/\/www.iana.org\/assignments\/protocol-numbers -$/;"	m	struct:ccn_sockdescr
ipv4_faceid	ccnd/ccnd_private.h	/^    unsigned ipv4_faceid;           \/**< wildcard IPv4, bound to port *\/$/;"	m	struct:ccnd_handle
ipv6_faceid	ccnd/ccnd_private.h	/^    unsigned ipv6_faceid;           \/**< wildcard IPv6, bound to port *\/$/;"	m	struct:ccnd_handle
isCovered	sync/SyncActions.c	/^isCovered(struct SyncHashCacheEntry *ce) {$/;"	f	file:
isCovered	sync/sync_diff.c	/^isCovered(struct SyncHashCacheEntry *ce) {$/;"	f	file:
is_base64binary	cmd/ccn_xmltoccnb.c	/^    int is_base64binary;$/;"	m	struct:ccn_encoder	file:
is_ccnb_name	ccnd/ccndsmoketest.c	/^is_ccnb_name(const char *s)$/;"	f	file:
is_hexBinary	cmd/ccn_xmltoccnb.c	/^    int is_hexBinary;$/;"	m	struct:ccn_encoder	file:
is_left	lib/ccn_signing.c	306;"	d	file:
is_pending_on	ccnd/ccnd.c	/^is_pending_on(struct ccnd_handle *h, struct interest_entry *ie, unsigned faceid)$/;"	f	file:
is_stale	ccnd/ccnd.c	/^is_stale(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
is_text	cmd/ccn_xmltoccnb.c	/^    int is_text;$/;"	m	struct:ccn_encoder	file:
is_text_encodable	cmd/ccn_ccnbtoxml.c	/^is_text_encodable(unsigned char p[], size_t start, size_t length)$/;"	f	file:
is_uri_reserved	lib/ccn_uri.c	/^is_uri_reserved(const unsigned char ch)$/;"	f	file:
iserial	ccnd/ccnd_private.h	/^    unsigned iserial;               \/**< interest serial number (for logs) *\/$/;"	m	struct:ccnd_handle
item_size	lib/hashtb.c	/^    size_t item_size;           \/* Size of client's per-entry data *\/$/;"	m	struct:hashtb	file:
items	cmd/dataresponsetest.c	/^    } *items;$/;"	m	struct:handlerstate	typeref:struct:handlerstate::handlerstateitem	file:
ixBase	sync/SyncActions.c	/^    IndexSorter_Base ixBase;$/;"	m	struct:SyncUpdateData	file:
ixPos	sync/SyncActions.c	/^    IndexSorter_Index ixPos;$/;"	m	struct:SyncUpdateData	file:
junk	cmd/ccncatchunks2.c	/^    intmax_t junk;$/;"	m	struct:mydata	file:
key	ccnd/ccnd_private.h	/^    const unsigned char *key;       \/** owned by hashtb *\/$/;"	m	struct:nonce_entry
key	include/ccn/hashtb.h	/^    const void *key;        \/* Key concatenated with extension data *\/$/;"	m	struct:hashtb_enumerator
key	include/ccn/nametree.h	/^    unsigned char *key;     \/**< for skiplist, et. al. *\/$/;"	m	struct:ccny
key_digest	lib/ccn_aes_keystore.c	/^    unsigned char key_digest[SHA256_DIGEST_LENGTH];$/;"	m	struct:ccn_keystore	file:
key_digest	lib/ccn_seqwriter.c	/^    unsigned char key_digest[32];$/;"	m	struct:ccn_seqwriter	file:
key_digest_length	lib/ccn_aes_keystore.c	/^    ssize_t key_digest_length;$/;"	m	struct:ccn_keystore	file:
key_func	include/ccn/keystore.h	/^    const struct ccn_pkey *(*key_func)(struct ccn_keystore *p);$/;"	m	struct:keystore_header_st	typeref:struct:keystore_header_st::key_func
key_len	lib/ccn_signing.c	/^    int key_len;$/;"	m	struct:ccn_sigc	file:
keyfetch	ccnr/ccnr_proto.h	/^    ccnr_cookie keyfetch;$/;"	m	struct:ccnr_expect_content
keylen	include/ccn/nametree.h	/^    unsigned keylen;        \/**< size of key, in bytes *\/$/;"	m	struct:ccny
keys	lib/ccn_client.c	/^    struct hashtb *keys;    \/* public keys, by pubid *\/$/;"	m	struct:ccn	typeref:struct:ccn::hashtb	file:
keysize	include/ccn/hashtb.h	/^    size_t keysize;$/;"	m	struct:hashtb_enumerator
keysize	lib/hashtb.c	/^    size_t keysize;$/;"	m	struct:node	file:
keystore_header	include/ccn/keystore.h	/^} keystore_header;$/;"	t	typeref:struct:keystore_header_st
keystore_header_st	include/ccn/keystore.h	/^typedef struct keystore_header_st {$/;"	s
keystores	lib/ccn_client.c	/^    struct hashtb *keystores;   \/* unlocked private keys *\/$/;"	m	struct:ccn	typeref:struct:ccn::hashtb	file:
kickCompare	sync/SyncActions.c	/^kickCompare(struct SyncCompareData *scd, struct SyncActionData *action) {$/;"	f	file:
kickCompare	sync/sync_diff.c	/^kickCompare(struct sync_diff_data *sdd, int micros) {$/;"	f	file:
kickHeartBeat	sync/SyncActions.c	/^kickHeartBeat(struct SyncRootStruct *root, int micros) {$/;"	f	file:
kickUpdate	sync/sync_diff.c	/^kickUpdate(struct sync_update_data *ud, int micros) {$/;"	f	file:
kind	sync/SyncActions.h	/^    enum SyncRegisterActionKind kind;$/;"	m	struct:SyncActionData	typeref:enum:SyncActionData::SyncRegisterActionKind
kind	sync/SyncNode.h	/^    SyncElemKind kind;  \/**< leaf\/composite flag *\/$/;"	m	struct:SyncNodeElem
kind	sync/SyncNode.h	/^    SyncNodeKind kind;    \/**< kind bits *\/$/;"	m	struct:SyncNodeComposite
koff0	include/ccn/btree.h	/^    unsigned char koff0[4];     \/**< offset of piece 0 of the key *\/$/;"	m	struct:ccn_btree_entry_trailer
koff1	include/ccn/btree.h	/^    unsigned char koff1[4];     \/**< offset of piece 1 *\/$/;"	m	struct:ccn_btree_entry_trailer
ksiz0	include/ccn/btree.h	/^    unsigned char ksiz0[2];     \/**< size of piece 0 of the key *\/$/;"	m	struct:ccn_btree_entry_trailer
ksiz1	include/ccn/btree.h	/^    unsigned char ksiz1[2];     \/**< size of piece 1 *\/$/;"	m	struct:ccn_btree_entry_trailer
lagL	sync/SyncActions.c	/^    struct ccn_charbuf *lagL;       \/**< local lag name *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::ccn_charbuf	file:
lagMatch	sync/SyncActions.c	/^    int *lagMatch;                  \/**< lagging # of matching components *\/$/;"	m	struct:SyncCompareData	file:
lastAdvise	sync/SyncPrivate.h	/^    int64_t lastAdvise;$/;"	m	struct:SyncRootPrivate
lastCacheClean	sync/SyncPrivate.h	/^    int64_t lastCacheClean;$/;"	m	struct:SyncPrivate
lastCompareMicros	sync/SyncPrivate.h	/^    uint64_t lastCompareMicros;     \/*< last elapsed compare time (microsecs) *\/$/;"	m	struct:SyncRootStats
lastEnter	sync/SyncActions.c	/^    int64_t lastEnter;            \/**< time marker for last compare step entry *\/$/;"	m	struct:SyncCompareData	file:
lastEnter	sync/sync_diff.h	/^    int64_t lastEnter;              \/**< time marker for last compare step entry *\/$/;"	m	struct:sync_diff_data
lastFenceTime	sync/SyncPrivate.h	/^    int64_t lastFenceTime;$/;"	m	struct:SyncPrivate
lastFenceVal	sync/SyncPrivate.h	/^    uint64_t lastFenceVal;$/;"	m	struct:SyncPrivate
lastFetchOK	sync/SyncActions.c	/^    int64_t lastFetchOK;          \/**< time marker for last successul node\/content fetch *\/$/;"	m	struct:SyncCompareData	file:
lastFetchOK	sync/sync_diff.h	/^    int64_t lastFetchOK;            \/**< time marker for last successul node fetch *\/$/;"	m	struct:sync_diff_data
lastHashChange	sync/SyncPrivate.h	/^    int64_t lastHashChange;$/;"	m	struct:SyncRootPrivate
lastIndex	sync/SyncHashCache.h	/^    uintmax_t lastIndex;                \/**< assigned by order of creation *\/$/;"	m	struct:SyncHashCacheHead
lastLocalFetch	sync/SyncHashCache.h	/^    int64_t lastLocalFetch;             \/**< time when local entry last fetched *\/$/;"	m	struct:SyncHashCacheEntry
lastLocalSent	sync/SyncPrivate.h	/^    struct SyncHashCacheEntry *lastLocalSent;$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncHashCacheEntry
lastMark	sync/SyncActions.c	/^    int64_t lastMark;             \/**< time marker for stall determination *\/$/;"	m	struct:SyncCompareData	file:
lastMark	sync/sync_diff.h	/^    int64_t lastMark;               \/**< time marker for stall determination *\/$/;"	m	struct:sync_diff_data
lastRemoteFetch	sync/SyncHashCache.h	/^    int64_t lastRemoteFetch;            \/**< time when remote entry last fetched *\/$/;"	m	struct:SyncHashCacheEntry
lastReplied	sync/SyncUtil.h	/^    int64_t lastReplied;$/;"	m	struct:SyncHashInfoList
lastRootId	sync/SyncBase.h	/^    unsigned lastRootId;            \/\/ last root id assigned (0 is not used)$/;"	m	struct:SyncBaseStruct
lastSeen	sync/SyncUtil.h	/^    int64_t lastSeen;$/;"	m	struct:SyncHashInfoList
lastSeen	sync/sync_api.c	/^    int64_t lastSeen;$/;"	m	struct:hash_list	file:
lastStable	sync/SyncPrivate.h	/^    int64_t lastStable;$/;"	m	struct:SyncRootPrivate
lastUpdate	sync/SyncPrivate.h	/^    int64_t lastUpdate;$/;"	m	struct:SyncRootPrivate
lastUpdateMicros	sync/SyncPrivate.h	/^    uint64_t lastUpdateMicros;      \/*< last elapsed update time (microsecs) *\/$/;"	m	struct:SyncRootStats
lastUsed	sync/SyncHashCache.h	/^    int64_t lastUsed;                   \/**< time when entry last used in compare *\/$/;"	m	struct:SyncHashCacheEntry
last_ce	sync/sync_api.c	/^    struct SyncHashCacheEntry *last_ce;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncHashCacheEntry	file:
lastcheck	cmd/ccncatchunks2.c	/^    intmax_t lastcheck;$/;"	m	struct:mydata	file:
lasttime	lib/ccn_client.c	/^    struct timeval lasttime;     \/* time most recently expressed *\/$/;"	m	struct:expressed_interest	typeref:struct:expressed_interest::timeval	file:
lasttime	lib/ccn_schedule.c	/^    struct ccn_timeval lasttime; \/* actual time when we last checked  *\/$/;"	m	struct:ccn_schedule	typeref:struct:ccn_schedule::ccn_timeval	file:
lastupdate	ccnd/ccnd_stats.c	/^    unsigned lastupdate;$/;"	m	struct:ccnd_meter	file:
lastupdate	ccnr/ccnr_stats.c	/^    unsigned lastupdate;$/;"	m	struct:ccnr_meter	file:
lastuse_sec	ccnr/ccnr_private.h	/^    long lastuse_sec;$/;"	m	struct:enum_state
lastuse_usec	ccnr/ccnr_private.h	/^    unsigned lastuse_usec;$/;"	m	struct:enum_state
leafCount	sync/SyncNode.h	/^    unsigned leafCount;   \/**< leaf count (includes this node) *\/$/;"	m	struct:SyncNodeComposite
len	lib/ccn_fetch.c	/^	int len;			\/\/ the number of valid bytes$/;"	m	struct:ccn_fetch_buffer	file:
len	sync/IndexSorter.h	/^    IndexSorter_Index len;            \/\/ # of indexes currently valid$/;"	m	struct:IndexSorter_Struct
len	sync/SyncHashCache.h	/^    size_t len;                         \/**< number of entries *\/$/;"	m	struct:SyncHashCacheHead
len	sync/SyncUtil.h	/^    int len;$/;"	m	struct:SyncNameAccum
len	sync/SyncUtil.h	/^    int len;$/;"	m	struct:SyncNodeAccum
length	include/ccn/charbuf.h	/^    size_t length;$/;"	m	struct:ccn_charbuf
length	include/ccn/header.h	/^    uintmax_t length;$/;"	m	struct:ccn_header
level	include/ccn/btree.h	/^    unsigned char level[1];     \/**< Level within the tree *\/$/;"	m	struct:ccn_btree_node_header
level	include/ccn/btree.h	/^    unsigned char level[1];     \/**< leaf nodes are at level 0 *\/$/;"	m	struct:ccn_btree_entry_trailer
level	sync/SyncTreeWorker.h	/^    int level;$/;"	m	struct:SyncTreeWorkerHead
lfd	lib/ccn_btree_store.c	/^    int lfd;$/;"	m	struct:bts_data	file:
lg_bits	include/ccn/bloom.h	/^    unsigned char lg_bits;  \/* 13 maximum (8 kilobits), 3 minimum (one byte) *\/$/;"	m	struct:ccn_bloom_wire
life	sync/SyncTest.c	/^    int life;$/;"	m	struct:SyncTestParms	file:
lifetime	ccnr/ccnr_private.h	/^    long lifetime;$/;"	m	struct:enum_state
lifetime	include/ccn/face_mgmt.h	/^    int lifetime;$/;"	m	struct:ccn_face_instance
lifetime	include/ccn/reg_mgmt.h	/^    int lifetime;$/;"	m	struct:ccn_forwarding_entry
lifetime	libexec/ccndc.h	/^    int                 lifetime;$/;"	m	struct:ccndc_data
lifetime_us	lib/ccn_client.c	/^    int lifetime_us;             \/* interest lifetime in microseconds *\/$/;"	m	struct:expressed_interest	file:
lim	sync/IndexSorter.h	/^    IndexSorter_Index lim;            \/\/ the current storage limit for indexes$/;"	m	struct:IndexSorter_Struct
lim	sync/SyncTreeWorker.h	/^    int lim;$/;"	m	struct:SyncTreeWorkerHead
lim	sync/SyncUtil.h	/^    int lim;$/;"	m	struct:SyncNameAccum
lim	sync/SyncUtil.h	/^    int lim;$/;"	m	struct:SyncNodeAccum
limit	include/ccn/charbuf.h	/^    size_t limit;$/;"	m	struct:ccn_charbuf
limit	include/ccn/indexbuf.h	/^    size_t limit;$/;"	m	struct:ccn_indexbuf
limit	include/ccn/nametree.h	/^    int limit;              \/**< recommended maximum n *\/$/;"	m	struct:ccn_nametree
line	sync/SyncBase.h	/^    int line;$/;"	m	struct:SyncErrStruct
lineout	cmd/ccnc.c	/^    struct ccn_charbuf *lineout; \/* For building output line *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
link	cmd/ccn_ccnbtoxml.c	/^    struct ccn_decoder_stack_item *link;$/;"	m	struct:ccn_decoder_stack_item	typeref:struct:ccn_decoder_stack_item::ccn_decoder_stack_item	file:
link	cmd/ccn_xmltoccnb.c	/^    struct ccn_encoder_stack_item *link;$/;"	m	struct:ccn_encoder_stack_item	typeref:struct:ccn_encoder_stack_item::ccn_encoder_stack_item	file:
link	lib/hashtb.c	/^    struct node* link;$/;"	m	struct:node	typeref:struct:node::node	file:
linkActionData	sync/SyncActions.c	/^linkActionData(struct SyncRootStruct *root, struct SyncActionData *data) {$/;"	f	file:
link_interest_entry_to_nameprefix	ccnd/ccnd.c	/^link_interest_entry_to_nameprefix(struct ccnd_handle *h,$/;"	f	file:
list	lib/ccn_client.c	/^    struct expressed_interest *list;$/;"	m	struct:interests_by_prefix	typeref:struct:interests_by_prefix::expressed_interest	file:
ll	ccnd/ccnd_private.h	/^    struct ielinks ll;$/;"	m	struct:interest_entry	typeref:struct:interest_entry::ielinks
ll	ccnd/ccnd_private.h	/^    struct ncelinks ll;             \/** doubly-linked *\/$/;"	m	struct:nonce_entry	typeref:struct:nonce_entry::ncelinks
lned_run	lib/lned.c	/^lned_run(int argc, char** argv, const char *prompt, int (*worker)(int, char**))$/;"	f
load_policy	ccnr/ccnr_init.c	/^load_policy(struct ccnr_handle *ccnr)$/;"	f	file:
localClosure	lib/ccn_fetch.c	/^struct localClosure {$/;"	s	file:
localConnect	lib/ccn_fetch.c	/^	int localConnect;$/;"	m	struct:ccn_fetch	file:
localFreeEntry	sync/SyncHashCache.c	/^localFreeEntry(struct SyncHashCacheEntry *ce) {$/;"	f	file:
localHostPrefix	sync/SyncPrivate.h	/^    struct ccn_charbuf *localHostPrefix;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::ccn_charbuf
localMade	sync/SyncPrivate.h	/^    struct SyncHashInfoList *localMade;$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncHashInfoList
localStore	sync/SyncTest.c	/^localStore(struct SyncTestParms *parms,$/;"	f	file:
local_flags	sync/sync_api.c	/^enum local_flags {$/;"	g	file:
local_name_offset	ccnr/ccnr_proto.h	/^    int local_name_offset;$/;"	m	struct:ccnr_parsed_policy
local_scope	lib/ccn_traverse.c	/^local_scope(struct ccn_charbuf *templ)$/;"	f	file:
local_scope_rm_template	cmd/ccnrm.c	/^local_scope_rm_template(void)$/;"	f
local_scope_template	libexec/ccndc.h	/^    struct ccn_charbuf  *local_scope_template; \/\/ scope 1 template$/;"	m	struct:ccndc_data	typeref:struct:ccndc_data::ccn_charbuf
localif_for_mcast_addrinfo	libexec/udplink.c	/^    struct addrinfo *localif_for_mcast_addrinfo;$/;"	m	struct:options	typeref:struct:options::addrinfo	file:
localport	libexec/udplink.c	/^    char localport[8];$/;"	m	struct:options	file:
localsockname	libexec/udplink.c	/^    const char *localsockname;$/;"	m	struct:options	file:
logbreak	ccnd/ccnd_private.h	/^    int logbreak;                   \/**< see ccn_msg() *\/$/;"	m	struct:ccnd_handle
logbreak	ccnr/ccnr_private.h	/^    int logbreak;                   \/**< see ccnr_msg() *\/$/;"	m	struct:ccnr_handle
logger	ccnd/android_main.c	/^logger(void *loggerdata, const char *format, va_list ap)$/;"	f	file:
logger	ccnd/ccnd_private.h	/^    ccnd_logger logger;             \/**< For debug output *\/$/;"	m	struct:ccnd_handle
logger	ccnr/android_main.c	/^logger(void *loggerdata, const char *format, va_list ap)$/;"	f	file:
logger	ccnr/ccnr_private.h	/^    ccnr_logger logger;             \/**< For debug output *\/$/;"	m	struct:ccnr_handle
loggerdata	ccnd/ccnd_private.h	/^    void *loggerdata;               \/**< Passed to logger *\/$/;"	m	struct:ccnd_handle
loggerdata	ccnr/ccnr_private.h	/^    void *loggerdata;               \/**< Passed to logger *\/$/;"	m	struct:ccnr_handle
loggerproc	ccnd/ccnd.c	/^typedef void (*loggerproc)(void *, const char *, ...);$/;"	t	file:
logging	cmd/dataresponsetest.c	/^    int logging;$/;"	m	struct:options	file:
logging	libexec/udplink.c	/^    int logging;$/;"	m	struct:options	file:
logpid	ccnd/ccnd_private.h	/^    int logpid;                     \/**< see ccn_msg() *\/$/;"	m	struct:ccnd_handle
logpid	ccnr/ccnr_private.h	/^    int logpid;                     \/**< see ccnr_msg() *\/$/;"	m	struct:ccnr_handle
logstream	cmd/ccncatchunks2.c	/^static FILE* logstream = NULL;$/;"	v	file:
logtime	ccnd/ccnd_private.h	/^    unsigned long logtime;          \/**< see ccn_msg() *\/$/;"	m	struct:ccnd_handle
logtime	ccnr/ccnr_private.h	/^    unsigned long logtime;          \/**< see ccnr_msg() *\/$/;"	m	struct:ccnr_handle
longHash	sync/SyncNode.h	/^    struct SyncLongHashStruct longHash;  \/**< space for accumulated hash *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::SyncLongHashStruct
luser	cmd/ccnc.c	/^    struct ccn_charbuf *luser;   \/* user's name *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
magic	ccnr/ccnr_sync.c	/^    int magic; \/**< for sanity check - should be se_cookie *\/$/;"	m	struct:sync_enumeration_state	file:
magic	cmd/ccnls.c	/^    int magic; \/* 856372 *\/$/;"	m	struct:upcalldata	file:
magic	cmd/ccnslurp.c	/^    int magic; \/* 856372 *\/$/;"	m	struct:upcalldata	file:
magic	include/ccn/btree.h	/^    unsigned char magic[1];     \/**< CCN_BT_INTERNAL_MAGIC *\/$/;"	m	struct:ccn_btree_internal_payload
magic	include/ccn/btree.h	/^    unsigned char magic[4];     \/**< File magic *\/$/;"	m	struct:ccn_btree_node_header
magic	include/ccn/btree.h	/^    unsigned magic;             \/**< for making sure we point to a btree *\/$/;"	m	struct:ccn_btree
magic	include/ccn/btree_content.h	/^    unsigned char magic[1];     \/**< CCN_BT_CONTENT_MAGIC *\/$/;"	m	struct:ccn_btree_content_payload
magic	include/ccn/ccn.h	/^    int magic;$/;"	m	struct:ccn_parsed_ContentObject
magic	include/ccn/ccn.h	/^    int magic;$/;"	m	struct:ccn_parsed_interest
magic	lib/ccn_client.c	/^    int magic;                   \/* for sanity checking *\/$/;"	m	struct:expressed_interest	file:
magic	lib/ccn_traverse.c	/^    int magic; \/* 68955871 *\/$/;"	m	struct:ccn_traversal	file:
main	ccnd/ccnd_main.c	/^main(int argc, char **argv)$/;"	f
main	ccnd/ccndsmoketest.c	/^main(int argc, char **argv)$/;"	f
main	ccnr/ccnr_main.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccn_ccnbtoxml.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccn_fetch_test.c	/^main(int argc, string *argv) {$/;"	f
main	cmd/ccn_splitccnb.c	/^main(int argc, char *argv[])$/;"	f
main	cmd/ccn_xmltoccnb.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnbasicconfig.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnbuzz.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnbx.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnc.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccncat.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccncatchunks.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccncatchunks2.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccndumpnames.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccndumppcap.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnfilewatch.c	/^main(int argc, char** argv)$/;"	f
main	cmd/ccnguestprefix.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnhexdumpdata.c	/^main(int argc, char *argv[])$/;"	f
main	cmd/ccninitaeskeystore.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccninitkeystore.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnlibtest.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnls.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnnamelist.c	/^main(int argc, char *argv[])$/;"	f
main	cmd/ccnpeek.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnpoke.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnrm.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnsendchunks.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnseqwriter.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnsimplecat.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnslurp.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnsnew.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnsyncslice.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccnsyncwatch.c	/^main(int argc, char **argv)$/;"	f
main	cmd/ccntimefromdatetime.c	/^main(int argc, char **argv)$/;"	f
main	cmd/dataresponsetest.c	/^main (int argc, char *argv[]) {$/;"	f
main	lib/basicparsetest.c	/^main (int argc, char **argv)$/;"	f
main	lib/ccn_verifysig.c	/^main(int argc, char **argv)$/;"	f
main	lib/encodedecodetest.c	/^main(int argc, char *argv[])$/;"	f
main	lib/hashtbtest.c	/^main(int argc, char **argv)$/;"	f
main	lib/signbenchtest.c	/^main(int argc, char **argv)$/;"	f
main	lib/siphash24.c	/^main()$/;"	f
main	lib/skel_decode_test.c	/^main(int argc, char **argv)$/;"	f
main	libexec/ccndc-main.c	/^main(int argc, char **argv)$/;"	f
main	libexec/udplink.c	/^main (int argc, char * const argv[]) {$/;"	f
main	sync/SyncTest.c	/^main(int argc, char **argv) {$/;"	f
make_connection	ccnd/ccnd.c	/^make_connection(struct ccnd_handle *h,$/;"	f	file:
make_data_template	lib/ccn_fetch.c	/^make_data_template(int maxSuffix) {$/;"	f	file:
make_partition	cmd/ccnbuzz.c	/^make_partition(unsigned i, int lg_n)$/;"	f	file:
make_ra_template	sync/sync_api.c	/^make_ra_template(struct ccns_handle *ch, struct ccn_charbuf *c)$/;"	f	file:
make_scope1_template	sync/sync_api.c	/^make_scope1_template(void) {$/;"	f
make_template	cmd/ccnbuzz.c	/^make_template(struct mydata *md, struct ccn_upcall_info *info, struct ccn_bloom *b)$/;"	f
make_template	cmd/ccncat.c	/^make_template(int allow_stale, int scope)$/;"	f
make_template	cmd/ccncatchunks.c	/^make_template(struct mydata *md, struct ccn_upcall_info *info)$/;"	f
make_template	cmd/ccncatchunks2.c	/^make_template(struct mydata *md)$/;"	f
make_template	cmd/ccnseqwriter.c	/^make_template(int scope)$/;"	f
make_template	cmd/ccnsimplecat.c	/^make_template(struct mydata *md, struct ccn_upcall_info *info)$/;"	f
mark	sync/SyncTest.c	/^    int mark;$/;"	m	struct:SyncTestParms	file:
mark_stale	ccnd/ccnd.c	/^mark_stale(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
mark_unsolicited	ccnd/ccnd.c	/^mark_unsolicited(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
match_components	cmd/dataresponsetest.c	/^match_components(unsigned char *msg1, struct ccn_indexbuf *comp1,$/;"	f
match_interests	ccnd/ccnd.c	/^match_interests(struct ccnd_handle *h, struct content_entry *content,$/;"	f	file:
matchbox	cmd/ccnc.c	/^matchbox(struct ccnxchat_state *st)$/;"	f	file:
matched	cmd/ccnc.c	/^    int matched;                \/* Non-zero if send needed *\/$/;"	m	struct:cs_entry	file:
matched_comps	include/ccn/ccn.h	/^    int matched_comps;$/;"	m	struct:ccn_upcall_info
max	lib/ccn_fetch.c	/^	int max;			\/\/ the buffer size$/;"	m	struct:ccn_fetch_buffer	file:
maxBufs	lib/ccn_fetch.c	/^	int maxBufs;			\/\/ max number of buffers allowed$/;"	m	struct:ccn_fetch_stream	file:
maxComparesBusy	sync/SyncPrivate.h	/^    int maxComparesBusy;        \/*< max # of roots doing compares *\/$/;"	m	struct:SyncPrivate
maxFetchBusy	sync/SyncPrivate.h	/^    int maxFetchBusy;           \/*< max # of fetches per root busy *\/$/;"	m	struct:SyncPrivate
maxHold	sync/SyncActions.c	/^    int64_t maxHold;                \/**< max time thread was held by compare *\/$/;"	m	struct:SyncCompareData	file:
maxHold	sync/SyncActions.c	/^    int64_t maxHold;$/;"	m	struct:SyncUpdateData	file:
maxHold	sync/sync_diff.h	/^    int64_t maxHold;                \/**< max time thread was held by compare *\/    $/;"	m	struct:sync_diff_data
maxHold	sync/sync_diff.h	/^    int64_t maxHold;$/;"	m	struct:sync_update_data
maxName	sync/SyncNode.h	/^    struct ccn_charbuf *maxName;  \/**< maximum name *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::ccn_charbuf
maxSegs	cmd/ccn_fetch_test.c	/^	int maxSegs;$/;"	m	struct:MyParms	file:
maxStreams	lib/ccn_fetch.c	/^	int maxStreams;$/;"	m	struct:ccn_fetch	file:
max_seq_num_build	sync/SyncPrivate.h	/^    uint64_t max_seq_num_build;         \/*< max seq_num seen during building *\/$/;"	m	struct:SyncRootPrivate
max_seq_num_seen	sync/SyncPrivate.h	/^    uint64_t max_seq_num_seen;          \/*< max seq_num seen during adding *\/$/;"	m	struct:SyncRootPrivate
max_seq_num_stable	sync/SyncPrivate.h	/^    uint64_t max_seq_num_stable;        \/*< set when root becomes stable (& stored) *\/$/;"	m	struct:SyncRootPrivate
max_stale	ccnr/ccnr_private.h	/^    ccnr_cookie max_stale;      \/**< largest cookie of stale content *\/$/;"	m	struct:ccnr_handle
max_suffix_comps	include/ccn/ccn.h	/^    int max_suffix_comps;$/;"	m	struct:ccn_parsed_interest
maxnodeid	include/ccn/btree.h	/^    ccn_btnodeid maxnodeid;    \/**< Largest assigned nodeid *\/$/;"	m	struct:ccn_btree_io
maxwindow	cmd/ccncatchunks2.c	/^    unsigned maxwindow;$/;"	m	struct:mydata	file:
mcast_ttl	include/ccn/sockcreate.h	/^    int mcast_ttl;              \/**< may be needed for multicast *\/$/;"	m	struct:ccn_sockdescr
md	lib/ccn_signing.c	/^    const EVP_MD *md;$/;"	m	struct:ccn_sigc	file:
me	cmd/ccnlibtest.c	/^    struct ccn_closure me;$/;"	m	struct:mini_store	typeref:struct:mini_store::ccn_closure	file:
me	lib/ccn_client.c	/^    struct ccn_closure me;$/;"	m	struct:multifilt	typeref:struct:multifilt::ccn_closure	file:
me_too	cmd/ccnsnew.c	/^me_too(struct ccn *h,$/;"	f	file:
merge_files	ccnr/ccnr_init.c	/^merge_files(struct ccnr_handle *h)$/;"	f	file:
merge_names	sync/sync_diff.c	/^merge_names(struct sync_update_data *ud) {$/;"	f	file:
meta	lib/ccn_header.c	/^const unsigned char meta[8] = {CCN_MARKER_CONTROL, '.', 'M', 'E', 'T', 'A', '.', 'M'};$/;"	v
meter	ccnd/ccnd_private.h	/^    struct ccnd_meter *meter[CCND_FACE_METER_N];$/;"	m	struct:face	typeref:struct:face::ccnd_meter
meter	ccnr/ccnr_private.h	/^    struct ccnr_meter *meter[CCNR_FACE_METER_N];$/;"	m	struct:fdholder	typeref:struct:fdholder::ccnr_meter
meterHz	ccnd/ccnd_stats.c	/^static const unsigned meterHz = 7; \/* 1\/ln(8\/7) would give RC const of 1 sec *\/$/;"	v	file:
meterHz	ccnr/ccnr_stats.c	/^static const unsigned meterHz = 7; \/* 1\/ln(8\/7) would give RC const of 1 sec *\/$/;"	v	file:
method	include/ccn/bloom.h	/^    unsigned char method;   \/* allow for various hashing algorithms *\/$/;"	m	struct:ccn_bloom_wire
micros	include/ccn/schedule.h	/^    unsigned micros;$/;"	m	struct:ccn_timeval
micros_per_base	include/ccn/schedule.h	/^    unsigned micros_per_base;  \/* e.g., 1000000 for seconds, microseconds *\/$/;"	m	struct:ccn_gettime
minName	sync/SyncNode.h	/^    struct ccn_charbuf *minName;  \/**< minimum name *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::ccn_charbuf
min_stale	ccnr/ccnr_private.h	/^    ccnr_cookie min_stale;      \/**< smallest cookie of stale content *\/$/;"	m	struct:ccnr_handle
min_suffix_comps	include/ccn/ccn.h	/^    int min_suffix_comps;$/;"	m	struct:ccn_parsed_interest
min_usec	ccnd/ccnd_private.h	/^    unsigned min_usec;               \/**< minimum delay for this queue *\/$/;"	m	struct:content_queue
min_usec	ccnr/ccnr_private.h	/^    unsigned min_usec;               \/**< minimum delay for this queue *\/$/;"	m	struct:content_queue
mini_store	cmd/ccnlibtest.c	/^struct mini_store {$/;"	s	file:
missedsplit	include/ccn/btree.h	/^    ccn_btnodeid missedsplit;   \/**< should stay zero *\/$/;"	m	struct:ccn_btree
misses	sync/SyncHashCache.h	/^    uintmax_t misses;                   \/**< number of cache misses *\/$/;"	m	struct:SyncHashCacheHead
mod	sync/SyncHashCache.h	/^    uint32_t mod;                       \/**< the mod to use *\/$/;"	m	struct:SyncHashCacheHead
mode	sync/SyncTest.c	/^    int mode;$/;"	m	struct:SyncTestParms	file:
moveActionData	sync/SyncActions.c	/^moveActionData(struct SyncActionData *data, enum SyncActionState dstState) {$/;"	f	file:
ms_to_tu	lib/ccn_versioning.c	/^ms_to_tu(int m)$/;"	f	file:
mtu	ccnd/ccnd_private.h	/^    int mtu;                        \/**< Target size for stuffing interests *\/$/;"	m	struct:ccnd_handle
multicastttl	libexec/udplink.c	/^    int multicastttl;$/;"	m	struct:options	file:
multifilt	lib/ccn_client.c	/^struct multifilt {$/;"	s	file:
multifilt_item	lib/ccn_client.c	/^struct multifilt_item {$/;"	s	file:
my_add	sync/sync_api.c	/^my_add(struct sync_diff_add_closure *ac, struct ccn_charbuf *name) {$/;"	f	file:
my_get	sync/sync_api.c	/^my_get(struct sync_diff_get_closure *gc,$/;"	f	file:
my_gettime	lib/ccn_schedule.c	/^my_gettime(const struct ccn_gettime *self, struct ccn_timeval *result)$/;"	f	file:
my_r_sync_msg	sync/SyncTest.c	/^my_r_sync_msg(struct sync_plumbing *sd, const char *fmt, ...) {$/;"	f	file:
my_r_sync_msg	sync/sync_api.c	/^my_r_sync_msg(struct sync_plumbing *sd, const char *fmt, ...) {$/;"	f	file:
my_response	sync/sync_api.c	/^my_response(struct ccn_closure *selfp,$/;"	f	file:
mydata	cmd/ccnbuzz.c	/^struct mydata {$/;"	s	file:
mydata	cmd/ccncatchunks.c	/^struct mydata {$/;"	s	file:
mydata	cmd/ccncatchunks2.c	/^struct mydata {$/;"	s	file:
mydata	cmd/ccnrm.c	/^struct mydata {$/;"	s	file:
mydata	cmd/ccnrm.c	/^} mydata = {0, NULL};$/;"	v	typeref:struct:mydata	file:
mydata	cmd/ccnsendchunks.c	/^struct mydata {$/;"	s	file:
mydata	cmd/ccnsimplecat.c	/^struct mydata {$/;"	s	file:
mydata	cmd/ccnsnew.c	/^struct mydata {$/;"	s	file:
mygettime	cmd/ccncatchunks2.c	/^mygettime(const struct ccn_gettime *self, struct ccn_timeval *result)$/;"	f	file:
myticker	cmd/ccncatchunks2.c	/^static struct ccn_gettime myticker = {$/;"	v	typeref:struct:ccn_gettime	file:
n	include/ccn/indexbuf.h	/^    size_t n;$/;"	m	struct:ccn_indexbuf
n	include/ccn/nametree.h	/^    int n;                  \/**< number of enrolled entries *\/$/;"	m	struct:ccn_nametree
n	lib/ccn_bloom.c	/^    int n;$/;"	m	struct:ccn_bloom	file:
n	lib/ccn_client.c	/^    int n;                      \/**< Number of elements in a *\/$/;"	m	struct:multifilt	file:
n	lib/hashtb.c	/^    int n;                      \/* Number of entries *\/$/;"	m	struct:hashtb	file:
nBufs	lib/ccn_fetch.c	/^	int nBufs;				\/\/ the number of buffers allocated$/;"	m	struct:ccn_fetch_stream	file:
nDeltas	sync/SyncPrivate.h	/^    int nDeltas;                        \/*< number of deltas in the list *\/$/;"	m	struct:SyncRootPrivate
nDeltasLimit	sync/SyncActions.c	/^static int nDeltasLimit = 4;            \/\/ limit of deltas objects in chain per root$/;"	v	file:
nRoots	sync/SyncPrivate.h	/^    int nRoots;$/;"	m	struct:SyncPrivate
nSegs	sync/SyncTest.c	/^    int nSegs;$/;"	m	struct:storeFileStruct	file:
nSplits	sync/SyncTest.c	/^    int nSplits;$/;"	m	struct:SyncTestParms	file:
nStoring	sync/SyncPrivate.h	/^    int nStoring;$/;"	m	struct:SyncPrivate
nStreams	lib/ccn_fetch.c	/^	int nStreams;$/;"	m	struct:ccn_fetch	file:
n_buckets	lib/hashtb.c	/^    unsigned n_buckets;$/;"	m	struct:hashtb	file:
n_cob	cmd/ccnc.c	/^    int n_cob;                  \/* Number of live CS entries *\/$/;"	m	struct:ccnxchat_state	file:
n_excl	cmd/ccnls.c	/^    int n_excl;$/;"	m	struct:upcalldata	file:
n_excl	cmd/ccnslurp.c	/^    int n_excl;$/;"	m	struct:upcalldata	file:
n_excl	lib/ccn_traverse.c	/^    int n_excl;$/;"	m	struct:ccn_traversal	file:
n_hash	include/ccn/bloom.h	/^    unsigned char n_hash;   \/* number of hash functions to employ *\/$/;"	m	struct:ccn_bloom_wire
n_pit	cmd/ccnc.c	/^    int n_pit;                  \/* Number of live PIT entries *\/$/;"	m	struct:ccnxchat_state	file:
n_pool	cmd/ccnlibtest.c	/^n_pool(int pool)$/;"	f
n_stale	ccnr/ccnr_private.h	/^    unsigned long n_stale;          \/**< Number of stale content objects *\/$/;"	m	struct:ccnr_handle
n_ver	cmd/ccnc.c	/^    int n_ver;                  \/* Number of recently received versions *\/$/;"	m	struct:ccnxchat_state	file:
name	ccnr/ccnr_private.h	/^    struct ccn_charbuf *name;   \/** a sockaddr or file name, depending on flags *\/$/;"	m	struct:fdholder	typeref:struct:fdholder::ccn_charbuf
name	ccnr/ccnr_private.h	/^    struct ccn_charbuf *name;$/;"	m	struct:enum_state	typeref:struct:enum_state::ccn_charbuf
name	cmd/ccnc.c	/^    struct ccn_charbuf *name;   \/* Buffer for constructed name *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
name	cmd/ccncatchunks2.c	/^    struct ccn_charbuf *name;$/;"	m	struct:mydata	typeref:struct:mydata::ccn_charbuf	file:
name	include/ccn/coding.h	/^    const char *name;       \/**< textual name of dtag *\/$/;"	m	struct:ccn_dict_entry
name	lib/ccn_fetch.c	/^	struct ccn_charbuf *name;			\/\/ interest name (without seq#)$/;"	m	struct:ccn_fetch_stream	typeref:struct:ccn_fetch_stream::ccn_charbuf	file:
name	sync/SyncPrivate.h	/^    struct ccn_charbuf *name;           \/*< name used for reply *\/$/;"	m	struct:SyncRootDeltas	typeref:struct:SyncRootDeltas::ccn_charbuf
name	sync/SyncUtil.h	/^    struct ccn_charbuf *name;$/;"	m	struct:SyncNameAccumEntry	typeref:struct:SyncNameAccumEntry::ccn_charbuf
nameLenAccum	sync/SyncActions.c	/^    int nameLenAccum;$/;"	m	struct:SyncUpdateData	file:
nameLenAccum	sync/sync_diff.h	/^    int nameLenAccum;$/;"	m	struct:sync_update_data
name_comp_equal_prefix	ccnr/ccnr_proto.c	/^name_comp_equal_prefix(const unsigned char *data,$/;"	f	file:
name_component_count	include/ccn/ccn.h	/^    int name_component_count;$/;"	m	struct:ccn_parsed_Link
name_ncomps	include/ccn/ccn.h	/^    int name_ncomps;$/;"	m	struct:ccn_parsed_ContentObject
name_ncomps	include/ccn/ccn.h	/^    int name_ncomps;$/;"	m	struct:ccn_parsed_Link
name_prefix	include/ccn/reg_mgmt.h	/^    struct ccn_charbuf *name_prefix;$/;"	m	struct:ccn_forwarding_entry	typeref:struct:ccn_forwarding_entry::ccn_charbuf
name_prefix	lib/ccn_bulkdata.c	/^    struct ccn_charbuf *name_prefix;$/;"	m	struct:bulkdata	typeref:struct:bulkdata::ccn_charbuf	file:
namecompare	cmd/ccnc.c	/^namecompare(const void *a, const void *b)$/;"	f	file:
namecompare	cmd/ccnls.c	/^namecompare(const void *a, const void *b)$/;"	f	file:
namecompare	cmd/ccnslurp.c	/^namecompare(const void *a, const void *b)$/;"	f	file:
namecompare	lib/ccn_traverse.c	/^namecompare(const void *a, const void *b)$/;"	f	file:
nameindex	cmd/ccn_ccnbtoxml.c	/^    size_t nameindex; \/* byte index into stringstack *\/$/;"	m	struct:ccn_decoder_stack_item	file:
nameprefix_entry	ccnd/ccnd_private.h	/^struct nameprefix_entry {$/;"	s
nameprefix_entry	ccnr/ccnr_private.h	/^struct nameprefix_entry {$/;"	s
nameprefix_seek	ccnd/ccnd.c	/^nameprefix_seek(struct ccnd_handle *h, struct hashtb_enumerator *e,$/;"	f	file:
nameprefix_tab	ccnd/ccnd_private.h	/^    struct hashtb *nameprefix_tab;  \/**< keyed by name prefix components *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
nameprefix_tab	ccnr/ccnr_private.h	/^    struct hashtb *nameprefix_tab;  \/**< keyed by name prefix components *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::hashtb
names	sync/sync_diff.h	/^    struct SyncNameAccum *names;    \/**< temp storage used while updating *\/$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncNameAccum
namesAdded	sync/SyncActions.c	/^    int namesAdded;                 \/**< names added during this comparison *\/$/;"	m	struct:SyncCompareData	file:
namesAdded	sync/SyncActions.c	/^    int namesAdded;$/;"	m	struct:SyncUpdateData	file:
namesAdded	sync/sync_diff.h	/^    int namesAdded;                 \/**< names added during this comparison *\/$/;"	m	struct:sync_diff_data
namesAdded	sync/sync_diff.h	/^    int namesAdded;$/;"	m	struct:sync_update_data
namesToAdd	sync/SyncRoot.h	/^    struct SyncNameAccum *namesToAdd;     \/**< names needing addition to root *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncNameAccum
namesToAdd	sync/sync_api.c	/^    struct SyncNameAccum *namesToAdd;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncNameAccum	file:
namesToFetch	sync/SyncRoot.h	/^    struct SyncNameAccum *namesToFetch;   \/**< names needing contents fetch *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncNameAccum
namesYieldInc	sync/SyncActions.c	/^static int namesYieldInc = 100;         \/\/ number of names to inc between yield tests$/;"	v	file:
namesYieldInc	sync/sync_diff.c	/^static int namesYieldInc = 100;         \/\/ number of names to inc between yield tests$/;"	v	file:
namesYieldMicros	sync/SyncActions.c	/^static int namesYieldMicros = 20*1000;  \/\/ number of micros to use as yield trigger$/;"	v	file:
namesYieldMicros	sync/sync_diff.c	/^static int namesYieldMicros = 20*1000;  \/\/ number of micros to use as yield trigger$/;"	v	file:
namespaces	ccnr/ccnr_proto.h	/^    struct ccn_indexbuf *namespaces;$/;"	m	struct:ccnr_parsed_policy	typeref:struct:ccnr_parsed_policy::ccn_indexbuf
nametreetest_main	lib/nametreetest.c	/^nametreetest_main(int argc, char **argv)$/;"	f
namingPrefix	sync/SyncRoot.h	/^    struct ccn_charbuf *namingPrefix;     \/**< Sync Protocol naming prefix *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::ccn_charbuf
nb	lib/ccn_seqwriter.c	/^    struct ccn_charbuf *nb;$/;"	m	struct:ccn_seqwriter	typeref:struct:ccn_seqwriter::ccn_charbuf	file:
nc	sync/sync_api.c	/^    struct ccns_name_closure *nc;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::ccns_name_closure	file:
ncL	sync/SyncHashCache.h	/^    struct SyncNodeComposite *ncL;      \/**< the local node in memory *\/$/;"	m	struct:SyncHashCacheEntry	typeref:struct:SyncHashCacheEntry::SyncNodeComposite
ncR	sync/SyncHashCache.h	/^    struct SyncNodeComposite *ncR;      \/**< some remote node in memory *\/$/;"	m	struct:SyncHashCacheEntry	typeref:struct:SyncHashCacheEntry::SyncNodeComposite
ncehead	ccnd/ccnd_private.h	/^    struct ncelinks ncehead;        \/**< list head for expiry-sorted nonces *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ncelinks
ncelinks	ccnd/ccnd_private.h	/^struct ncelinks {$/;"	s
nclauses	sync/sync_api.c	/^    unsigned nclauses;$/;"	m	struct:ccns_slice	file:
ncomp	include/ccn/btree_content.h	/^    unsigned char ncomp[2];     \/**< number of name components *\/$/;"	m	struct:ccn_btree_content_payload
ncomps	ccnd/ccnd_private.h	/^    short ncomps;               \/**< Number of name components plus one *\/$/;"	m	struct:content_entry
needUpdate	sync/sync_api.c	/^    int needUpdate;$/;"	m	struct:ccns_handle	file:
neighbor_ccnb	ccnd/ccnd_private.h	/^    struct ccn_charbuf *neighbor_ccnb; \/**< for neighbor service discovery *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_charbuf
neighbor_ccnb	ccnr/ccnr_private.h	/^    struct ccn_charbuf *neighbor_ccnb; \/**< for neighbor service discovery *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_charbuf
nest	include/ccn/coding.h	/^    int nest;               \/**< Element nesting *\/$/;"	m	struct:ccn_skeleton_decoder
newActionData	sync/SyncActions.c	/^newActionData(enum SyncRegisterActionKind kind) {$/;"	f	file:
newNodeCommon	sync/SyncActions.c	/^newNodeCommon(struct SyncRootStruct *root,$/;"	f	file:
newNodeCommon	sync/sync_diff.c	/^newNodeCommon(struct SyncRootStruct *root,$/;"	f	file:
newStringCopy	lib/ccn_fetch.c	/^newStringCopy(const char *src) {$/;"	f	file:
next	ccnd/ccnd_private.h	/^    struct ccn_forwarding *next;$/;"	m	struct:ccn_forwarding	typeref:struct:ccn_forwarding::ccn_forwarding
next	ccnd/ccnd_private.h	/^    struct ielinks *next;           \/**< next in list *\/$/;"	m	struct:ielinks	typeref:struct:ielinks::ielinks
next	ccnd/ccnd_private.h	/^    struct ncelinks *next;           \/**< next in list *\/$/;"	m	struct:ncelinks	typeref:struct:ncelinks::ncelinks
next	ccnd/ccnd_private.h	/^    struct pit_face_item *next;     \/**< next in list *\/$/;"	m	struct:pit_face_item	typeref:struct:pit_face_item::pit_face_item
next	ccnr/ccnr_private.h	/^    struct ccn_forwarding *next;$/;"	m	struct:ccn_forwarding	typeref:struct:ccn_forwarding::ccn_forwarding
next	ccnr/ccnr_private.h	/^    struct propagating_entry *next;$/;"	m	struct:propagating_entry	typeref:struct:propagating_entry::propagating_entry
next	cmd/dataresponsetest.c	/^    int next;$/;"	m	struct:handlerstate	file:
next	lib/ccn_bulkdata.c	/^    struct pending *next;$/;"	m	struct:pending	typeref:struct:pending::pending	file:
next	lib/ccn_client.c	/^    struct expressed_interest *next; \/* link to next in list *\/$/;"	m	struct:expressed_interest	typeref:struct:expressed_interest::expressed_interest	file:
next	lib/ccn_fetch.c	/^	struct ccn_fetch_buffer *next;$/;"	m	struct:ccn_fetch_buffer	typeref:struct:ccn_fetch_buffer::ccn_fetch_buffer	file:
next	lib/ccn_fetch.c	/^	struct localClosure *next;$/;"	m	struct:localClosure	typeref:struct:localClosure::localClosure	file:
next	sync/SyncActions.h	/^    struct SyncActionData *next;$/;"	m	struct:SyncActionData	typeref:struct:SyncActionData::SyncActionData
next	sync/SyncBase.h	/^    struct SyncErrStruct *next;$/;"	m	struct:SyncErrStruct	typeref:struct:SyncErrStruct::SyncErrStruct
next	sync/SyncHashCache.h	/^    struct SyncHashCacheEntry *next;    \/**< the next entry in the hash chain *\/$/;"	m	struct:SyncHashCacheEntry	typeref:struct:SyncHashCacheEntry::SyncHashCacheEntry
next	sync/SyncPrivate.h	/^    struct SyncMethodsList *next;$/;"	m	struct:SyncMethodsList	typeref:struct:SyncMethodsList::SyncMethodsList
next	sync/SyncPrivate.h	/^    struct SyncRootDeltas *next;        \/*< link to next update *\/$/;"	m	struct:SyncRootDeltas	typeref:struct:SyncRootDeltas::SyncRootDeltas
next	sync/SyncRoot.h	/^    struct SyncRootStruct *next;          \/**< next root in our list *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncRootStruct
next	sync/SyncUtil.h	/^    struct SyncHashInfoList *next;$/;"	m	struct:SyncHashInfoList	typeref:struct:SyncHashInfoList::SyncHashInfoList
next	sync/SyncUtil.h	/^    struct SyncNameAccumList *next;$/;"	m	struct:SyncNameAccumList	typeref:struct:SyncNameAccumList::SyncNameAccumList
next	sync/sync_api.c	/^    struct hash_list *next;$/;"	m	struct:hash_list	typeref:struct:hash_list::hash_list	file:
next	sync/sync_diff.h	/^    struct sync_diff_fetch_data *next;$/;"	m	struct:sync_diff_fetch_data	typeref:struct:sync_diff_fetch_data::sync_diff_fetch_data
next_ce	sync/sync_api.c	/^    struct SyncHashCacheEntry *next_ce;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncHashCacheEntry	file:
next_child_at_level	ccnd/ccnd.c	/^next_child_at_level(struct ccnd_handle *h,$/;"	f	file:
next_expected	lib/ccn_bulkdata.c	/^    uintmax_t next_expected;        \/* smallest undelivered sequence number *\/$/;"	m	struct:bulkdata	file:
next_segment	ccnr/ccnr_private.h	/^    intmax_t next_segment;$/;"	m	struct:enum_state
nextnodeid	include/ccn/btree.h	/^    ccn_btnodeid nextnodeid;    \/**< for allocating new btree nodes *\/$/;"	m	struct:ccn_btree
nextspill	include/ccn/btree.h	/^    ccn_btnodeid nextspill;     \/**< undersize node that needs spilling *\/$/;"	m	struct:ccn_btree
nextsplit	include/ccn/btree.h	/^    ccn_btnodeid nextsplit;     \/**< oversize node that needs splitting *\/$/;"	m	struct:ccn_btree
nextx	ccnd/ccnd_private.h	/^    struct content_entry *nextx; \/**< Next to expire after us *\/$/;"	m	struct:content_entry	typeref:struct:content_entry::content_entry
nfds	ccnd/ccnd_private.h	/^    nfds_t nfds;                    \/**< number of entries in fds array *\/$/;"	m	struct:ccnd_handle
nfds	ccnr/ccnr_private.h	/^    nfds_t nfds;                    \/**< number of entries in fds array *\/$/;"	m	struct:ccnr_handle
nm	sync/SyncTest.c	/^    struct ccn_charbuf *nm;$/;"	m	struct:storeFileStruct	typeref:struct:storeFileStruct::ccn_charbuf	file:
nmentry_by_cookie	include/ccn/nametree.h	/^    struct ccny **nmentry_by_cookie; \/**< for direct lookup by cookie *\/$/;"	m	struct:ccn_nametree	typeref:struct:ccn_nametree::ccny
noDup	sync/SyncTest.c	/^    int noDup;$/;"	m	struct:SyncTestParms	file:
noSend	sync/SyncTest.c	/^    int noSend;$/;"	m	struct:SyncTestParms	file:
no_name	libexec/ccndc.h	/^    struct ccn_charbuf  *no_name;   \/\/ an empty name$/;"	m	struct:ccndc_data	typeref:struct:ccndc_data::ccn_charbuf
no_output	cmd/ccnnamelist.c	/^    int no_output;$/;"	m	struct:options	file:
node	include/ccn/merklepathasn1.h	/^    ASN1_INTEGER *node;$/;"	m	struct:MP_info_st
node	lib/ccn_btree_store.c	/^    struct ccn_btree_node *node;$/;"	m	struct:bts_node_state	typeref:struct:bts_node_state::ccn_btree_node	file:
node	lib/hashtb.c	/^struct node {$/;"	s	file:
nodeFetchBusy	sync/SyncActions.c	/^    int nodeFetchBusy;              \/**< number of busy remote node fetches *\/$/;"	m	struct:SyncCompareData	file:
nodeFetchBusy	sync/sync_diff.h	/^    int nodeFetchBusy;              \/**< number of busy remote node fetches *\/$/;"	m	struct:sync_diff_data
nodeFetchBytes	sync/SyncPrivate.h	/^    uint64_t nodeFetchBytes;        \/*< number of bytes for NodeFetch responses *\/$/;"	m	struct:SyncRootStats
nodeFetchFailed	sync/SyncActions.c	/^    int nodeFetchFailed;            \/**< number of failed remote node fetches *\/$/;"	m	struct:SyncCompareData	file:
nodeFetchFailed	sync/SyncPrivate.h	/^    uint64_t nodeFetchFailed;       \/*< number of NodeFetch response failures *\/$/;"	m	struct:SyncRootStats
nodeFetchFailed	sync/sync_diff.h	/^    int nodeFetchFailed;            \/**< number of failed remote node fetches *\/$/;"	m	struct:sync_diff_data
nodeFetchReceived	sync/SyncPrivate.h	/^    uint64_t nodeFetchReceived;     \/*< number of NodeFetch responses received *\/$/;"	m	struct:SyncRootStats
nodeFetchSeen	sync/SyncPrivate.h	/^    uint64_t nodeFetchSeen;         \/*< number of NodeFetch interests received *\/$/;"	m	struct:SyncRootStats
nodeFetchSent	sync/SyncPrivate.h	/^    uint64_t nodeFetchSent;         \/*< number of NodeFetch interests sent *\/$/;"	m	struct:SyncRootStats
nodeFetchTimeout	sync/SyncPrivate.h	/^    uint64_t nodeFetchTimeout;      \/*< number of NodeFetch response timeouts *\/$/;"	m	struct:SyncRootStats
nodeFromNodes	sync/SyncActions.c	/^nodeFromNodes(struct SyncRootStruct *root, struct SyncNodeAccum *na) {$/;"	f	file:
nodeSplitTrigger	sync/SyncActions.c	/^static int nodeSplitTrigger = 4000;     \/\/ in bytes, triggers node split$/;"	v	file:
nodeSplitTrigger	sync/sync_diff.c	/^static int nodeSplitTrigger = 4000;     \/\/ in bytes, triggers node split$/;"	v	file:
node_example	lib/ccnbtreetest.c	/^struct node_example {$/;"	s	file:
node_from_names	sync/sync_diff.c	/^node_from_names(struct sync_update_data *ud, int split) {$/;"	f	file:
node_from_nodes	sync/sync_diff.c	/^node_from_nodes(struct SyncRootStruct *root, struct SyncNodeAccum *na) {$/;"	f	file:
node_lr	lib/ccn_signing.c	307;"	d	file:
nodebytes	include/ccn/btree.h	/^    int nodebytes;              \/**< limit size of node *\/$/;"	m	struct:ccn_btree
nodeid	include/ccn/btree.h	/^    ccn_btnodeid nodeid;        \/**< Identity of node *\/$/;"	m	struct:ccn_btree_node
nodepool	include/ccn/btree.h	/^    int nodepool;               \/**< limit resident size *\/$/;"	m	struct:ccn_btree
nodes	sync/SyncActions.c	/^    struct SyncNodeAccum *nodes;$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncNodeAccum	file:
nodes	sync/sync_diff.h	/^    struct SyncNodeAccum *nodes;    \/**< temp storage used while updating *\/$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncNodeAccum
nodesCreated	sync/SyncPrivate.h	/^    uint64_t nodesCreated;          \/*< number of new nodes created *\/$/;"	m	struct:SyncRootStats
nodesShared	sync/SyncPrivate.h	/^    uint64_t nodesShared;           \/*< number of nodes shared *\/$/;"	m	struct:SyncRootStats
nodetype	include/ccn/btree.h	/^    unsigned char nodetype[1];  \/**< Indicates root node, backup root, etc. *\/$/;"	m	struct:ccn_btree_node_header
nointerest	cmd/dataresponsetest.c	/^    int nointerest;$/;"	m	struct:options	file:
nonce	ccnd/ccnd_private.h	/^    unsigned char nonce[TYPICAL_NONCE_SIZE]; \/**< nonce bytes *\/$/;"	m	struct:pit_face_item
nonce_entry	ccnd/ccnd_private.h	/^struct nonce_entry {$/;"	s
nonce_ok	ccnd/ccnd.c	/^nonce_ok(struct ccnd_handle *h, struct face *face,$/;"	f	file:
nonce_tab	ccnd/ccnd_private.h	/^    struct hashtb *nonce_tab;       \/**< keyed by interest Nonce *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::hashtb
noncegen	ccnd/ccnd_private.h	/^    int (*noncegen)(struct ccnd_handle *, struct face *, unsigned char *);$/;"	m	struct:ccnd_handle
noteErr	sync/SyncTest.c	/^noteErr(const char *fmt, ...) {$/;"	f	file:
noteHash	sync/SyncActions.c	/^noteHash(struct SyncRootStruct *root, struct SyncHashCacheEntry *ce,$/;"	f	file:
note_content_from	ccnd/ccnd.c	/^note_content_from(struct ccnd_handle *h,$/;"	f	file:
note_update_done	sync/sync_api.c	/^note_update_done(struct sync_done_closure *dc) {$/;"	f	file:
notice	ccnd/ccnd_private.h	/^    struct ccn_seqwriter *notice;   \/**< for notices of status changes *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_seqwriter
notice	ccnr/ccnr_private.h	/^    struct ccn_seqwriter *notice;   \/**< for notices of status changes *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_seqwriter
notice_push	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *notice_push;$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_scheduled_event
notice_push	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *notice_push;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
notify_after	ccnr/ccnr_private.h	/^    ccnr_accession notify_after;  \/**< starting item for notifying sync *\/$/;"	m	struct:ccnr_handle
now	lib/ccn_client.c	/^    struct timeval now;$/;"	m	struct:ccn	typeref:struct:ccn::timeval	file:
now	lib/ccn_schedule.c	/^    heapmicros now;     \/* internal micros corresponding to lasttime  *\/$/;"	m	struct:ccn_schedule	file:
npe	ccnd/ccnd_private.h	/^    struct nameprefix_entry *npe;   \/**< owning npe, or NULL for head *\/$/;"	m	struct:ielinks	typeref:struct:ielinks::nameprefix_entry
nrun	ccnd/ccnd_private.h	/^    unsigned nrun;                   \/**< # sent since last randomized delay *\/$/;"	m	struct:content_queue
nrun	ccnr/ccnr_private.h	/^    unsigned nrun;                   \/**< # sent since last randomized delay *\/$/;"	m	struct:content_queue
nseen	cmd/ccnrm.c	/^    int nseen;$/;"	m	struct:mydata	file:
numval	cmd/ccn_ccnbtoxml.c	/^    size_t numval;$/;"	m	struct:ccn_decoder	file:
numval	include/ccn/coding.h	/^    size_t numval;          \/**< Current numval, meaning depends on state *\/$/;"	m	struct:ccn_skeleton_decoder
nv	lib/ccn_seqwriter.c	/^    struct ccn_charbuf *nv;$/;"	m	struct:ccn_seqwriter	typeref:struct:ccn_seqwriter::ccn_charbuf	file:
offset	include/ccn/ccn.h	/^    unsigned short offset[CCN_PCO_E+1];$/;"	m	struct:ccn_parsed_ContentObject
offset	include/ccn/ccn.h	/^    unsigned short offset[CCN_PI_E+1];$/;"	m	struct:ccn_parsed_interest
offset	include/ccn/ccn.h	/^    unsigned short offset[CCN_PL_E+1];$/;"	m	struct:ccn_parsed_Link
oldformatcontent	ccnd/ccnd_private.h	/^    unsigned long oldformatcontent;$/;"	m	struct:ccnd_handle
oldformatcontent	ccnr/ccnr_private.h	/^    unsigned long oldformatcontent;$/;"	m	struct:ccnr_handle
oldformatcontentgrumble	ccnd/ccnd_private.h	/^    unsigned long oldformatcontentgrumble;$/;"	m	struct:ccnd_handle
oldformatcontentgrumble	ccnr/ccnr_private.h	/^    unsigned long oldformatcontentgrumble;$/;"	m	struct:ccnr_handle
oldformatinterestgrumble	ccnd/ccnd_private.h	/^    unsigned long oldformatinterestgrumble;$/;"	m	struct:ccnd_handle
oldformatinterestgrumble	ccnr/ccnr_private.h	/^    unsigned long oldformatinterestgrumble;$/;"	m	struct:ccnr_handle
oldformatinterests	ccnd/ccnd_private.h	/^    unsigned long oldformatinterests;$/;"	m	struct:ccnd_handle
oldformatinterests	ccnr/ccnr_private.h	/^    unsigned long oldformatinterests;$/;"	m	struct:ccnr_handle
on_error_exit	libexec/ccndc-log.c	/^on_error_exit(int res, int lineno, const char *msg)$/;"	f
ooo	cmd/ccncatchunks2.c	/^    struct ooodata ooo[PIPELIMIT];$/;"	m	struct:mydata	typeref:struct:mydata::ooodata	file:
ooo_base	cmd/ccncatchunks2.c	/^    unsigned ooo_base;$/;"	m	struct:mydata	file:
ooo_count	cmd/ccncatchunks2.c	/^    unsigned ooo_count;$/;"	m	struct:mydata	file:
ooodata	cmd/ccncatchunks2.c	/^struct ooodata {$/;"	s	file:
open_local	ccnd/ccndsmoketest.c	/^open_local(struct sockaddr_un *sa, const char *verb)$/;"	f	file:
open_socket	ccnd/ccndsmoketest.c	/^open_socket(const char *host, const char *portstr, int sock_type)$/;"	f	file:
openfds	include/ccn/btree.h	/^    int openfds;               \/**< Number of open files *\/$/;"	m	struct:ccn_btree_io
openudata	cmd/ccn_xmltoccnb.c	/^    struct ccn_charbuf *openudata;$/;"	m	struct:ccn_encoder	typeref:struct:ccn_encoder::ccn_charbuf	file:
option	cmd/ccnc.c	/^} option;$/;"	v	typeref:struct:__anon3	file:
option	cmd/ccnls.c	/^    unsigned option;$/;"	m	struct:upcalldata	file:
options	cmd/ccnnamelist.c	/^struct options {$/;"	s	file:
options	cmd/dataresponsetest.c	/^static struct options {$/;"	s	file:
options	cmd/dataresponsetest.c	/^} options = {0, 0, 0};$/;"	v	typeref:struct:options	file:
options	libexec/udplink.c	/^static struct options {$/;"	s	file:
options	libexec/udplink.c	/^} options = {NULL, NULL, NULL, "", "", 0, 0, 0};$/;"	v	typeref:struct:options	file:
orderpref	include/ccn/ccn.h	/^    int orderpref;$/;"	m	struct:ccn_parsed_interest
orders	include/ccn/hashtb.h	/^    int orders;                    \/* default is 0 *\/$/;"	m	struct:hashtb_param
osrc	ccnd/ccnd_private.h	/^    unsigned osrc;               \/**< and of older matching content *\/$/;"	m	struct:nameprefix_entry
osrc	ccnr/ccnr_private.h	/^    unsigned osrc;               \/**< and of older matching content *\/$/;"	m	struct:nameprefix_entry
out	cmd/ccn_fetch_test.c	/^	FILE *out;$/;"	m	struct:TestElemStruct	file:
outbound	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *outbound; \/**< in order of use *\/$/;"	m	struct:propagating_entry	typeref:struct:propagating_entry::ccn_indexbuf
outbuf	ccnd/ccnd_private.h	/^    struct ccn_charbuf *outbuf;$/;"	m	struct:face	typeref:struct:face::ccn_charbuf
outbuf	ccnr/ccnr_private.h	/^    struct ccn_charbuf *outbuf;$/;"	m	struct:fdholder	typeref:struct:fdholder::ccn_charbuf
outbuf	lib/ccn_client.c	/^    struct ccn_charbuf *outbuf;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_charbuf	file:
outbufindex	ccnd/ccnd_private.h	/^    size_t outbufindex;$/;"	m	struct:face
outbufindex	ccnr/ccnr_private.h	/^    size_t outbufindex;         \/** Buffered output data *\/$/;"	m	struct:fdholder
outbufindex	lib/ccn_client.c	/^    size_t outbufindex;$/;"	m	struct:ccn	file:
outfile	cmd/ccn_xmltoccnb.c	/^    FILE *outfile;$/;"	m	struct:ccn_encoder	file:
outgoing_content	cmd/ccnlibtest.c	/^outgoing_content(struct ccn_closure *selfp,$/;"	f
output	cmd/ccn_xmltoccnb.c	/^    unsigned char *output;$/;"	m	struct:base64_decoder	file:
output	cmd/ccnrm.c	/^    FILE *output;$/;"	m	struct:mydata	file:
output_size	cmd/ccn_xmltoccnb.c	/^    size_t output_size;$/;"	m	struct:base64_decoder	file:
outstanding	ccnr/ccnr_proto.h	/^    intmax_t outstanding[CCNR_PIPELINE];$/;"	m	struct:ccnr_expect_content
outstanding	cmd/ccnsendchunks.c	/^    int outstanding;$/;"	m	struct:mydata	file:
outstanding	lib/ccn_client.c	/^    int outstanding;             \/* number currently outstanding (0 or 1) *\/$/;"	m	struct:expressed_interest	file:
p	include/ccn/ccn.h	/^    ccn_handler p;      \/**< client-supplied handler *\/$/;"	m	struct:ccn_closure
p	lib/ccnbtreetest.c	/^    unsigned char p[CCN_BT_SIZE_UNITS];$/;"	m	struct:entry_example	file:
pad	include/ccn/btree.h	/^    unsigned char pad[3];       \/**< must be zero *\/$/;"	m	struct:ccn_btree_internal_payload
param	lib/hashtb.c	/^    struct hashtb_param param;  \/* saved client parameters *\/$/;"	m	struct:hashtb	typeref:struct:hashtb::hashtb_param	file:
parent	ccnd/ccnd_private.h	/^    struct nameprefix_entry *parent; \/**< link to next-shorter prefix *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::nameprefix_entry
parent	ccnr/ccnr_private.h	/^    struct nameprefix_entry *parent; \/**< link to next-shorter prefix *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::nameprefix_entry
parent	include/ccn/btree.h	/^    ccn_btnodeid parent;        \/**< Parent node id; 0 if unknown *\/$/;"	m	struct:ccn_btree_node
parent	lib/ccn_bulkdata.c	/^    struct bulkdata *parent;$/;"	m	struct:pending	typeref:struct:pending::bulkdata	file:
parent	lib/ccn_fetch.c	/^	struct ccn_fetch *parent;$/;"	m	struct:ccn_fetch_stream	typeref:struct:ccn_fetch_stream::ccn_fetch	file:
parent_of	lib/ccn_signing.c	309;"	d	file:
parms	sync/SyncTest.c	/^    struct SyncTestParms *parms;$/;"	m	struct:storeFileStruct	typeref:struct:storeFileStruct::SyncTestParms	file:
parseAndAccumName	sync/SyncTest.c	/^parseAndAccumName(char *s, struct SyncNameAccum *na) {$/;"	f	file:
parse_ccn_face_instance	libexec/ccndc.c	/^parse_ccn_face_instance(struct ccndc_data *self,$/;"	f
parse_ccn_face_instance_from_face	libexec/ccndc.c	/^parse_ccn_face_instance_from_face(struct ccndc_data *self,$/;"	f
parse_ccn_forwarding_entry	libexec/ccndc.c	/^parse_ccn_forwarding_entry(struct ccndc_data *self,$/;"	f
parsed_KeyName	lib/ccn_buf_decoder.c	/^struct parsed_KeyName {$/;"	s	file:
parsed_interest	ccnr/ccnr_sync.c	/^    struct ccn_parsed_interest parsed_interest;$/;"	m	struct:sync_enumeration_state	typeref:struct:sync_enumeration_state::ccn_parsed_interest	file:
parsed_policy	ccnr/ccnr_private.h	/^    struct ccnr_parsed_policy *parsed_policy;  \/**< offsets for parsed fields of policy *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccnr_parsed_policy
parseopts	cmd/ccnc.c	/^parseopts(int argc, char **argv)$/;"	f	file:
partial	cmd/ccn_xmltoccnb.c	/^    unsigned partial;$/;"	m	struct:base64_decoder	file:
passive_templ	cmd/ccnslurp.c	/^static struct ccn_charbuf *passive_templ;$/;"	v	typeref:struct:ccn_charbuf	file:
path	lib/encodedecodetest.c	/^struct path {$/;"	s	file:
path_create	lib/encodedecodetest.c	/^struct path * path_create(char * strpath) {$/;"	f
path_destroy	lib/encodedecodetest.c	/^void path_destroy(struct path **path) {$/;"	f
payload	cmd/ccnc.c	/^    struct ccn_charbuf *payload; \/* Buffer for payload *\/$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
payload	include/ccn/nametree.h	/^    void *payload;          \/**< client payload *\/$/;"	m	struct:ccny
pco	include/ccn/ccn.h	/^    struct ccn_parsed_ContentObject *pco;$/;"	m	struct:ccn_upcall_info	typeref:struct:ccn_upcall_info::ccn_parsed_ContentObject
pcobuf	lib/ccn_client.c	/^    struct ccn_parsed_ContentObject *pcobuf;$/;"	m	struct:simple_get_data	typeref:struct:simple_get_data::ccn_parsed_ContentObject	file:
pe_head	ccnr/ccnr_private.h	/^    struct propagating_entry pe_head; \/**< list head for propagating entries *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::propagating_entry
pending	lib/ccn_bulkdata.c	/^struct pending {$/;"	s	file:
pending_ce	sync/sync_api.c	/^    struct SyncHashCacheEntry *pending_ce; \/\/ Of the RA we last sent$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncHashCacheEntry	file:
pending_interests	ccnd/ccnd_private.h	/^    int pending_interests;$/;"	m	struct:face
pending_interests	ccnr/ccnr_private.h	/^    int pending_interests;$/;"	m	struct:fdholder
pfi_copy_nonce	ccnd/ccnd.c	/^pfi_copy_nonce(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfi_create	ccnd/ccnd.c	/^pfi_create(struct ccnd_handle *h,$/;"	f	file:
pfi_destroy	ccnd/ccnd.c	/^pfi_destroy(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfi_flags	ccnd/ccnd_private.h	/^    unsigned pfi_flags;             \/**< CCND_PFI_x *\/$/;"	m	struct:pit_face_item
pfi_nonce_matches	ccnd/ccnd.c	/^pfi_nonce_matches(struct pit_face_item *p,$/;"	f	file:
pfi_seek	ccnd/ccnd.c	/^pfi_seek(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfi_set_expiry_from_lifetime	ccnd/ccnd.c	/^pfi_set_expiry_from_lifetime(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfi_set_expiry_from_micros	ccnd/ccnd.c	/^pfi_set_expiry_from_micros(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfi_set_nonce	ccnd/ccnd.c	/^pfi_set_nonce(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfi_unique_nonce	ccnd/ccnd.c	/^pfi_unique_nonce(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
pfl	ccnd/ccnd_private.h	/^    struct pit_face_item *pfl;      \/**< upstream and downstream faces *\/$/;"	m	struct:interest_entry	typeref:struct:interest_entry::pit_face_item
phase	cmd/ccn_xmltoccnb.c	/^    int phase;$/;"	m	struct:base64_decoder	file:
pi	include/ccn/ccn.h	/^    struct ccn_parsed_interest *pi;$/;"	m	struct:ccn_upcall_info	typeref:struct:ccn_upcall_info::ccn_parsed_interest
pib	cmd/ccnc.c	/^    struct ccn_charbuf *pib;    \/* Buffer for received Interest *\/$/;"	m	struct:pit_entry	typeref:struct:pit_entry::ccn_charbuf	file:
pit	cmd/ccnc.c	/^    struct pit_entry pit[PIT_LIMIT];$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::pit_entry	file:
pit_entry	cmd/ccnc.c	/^struct pit_entry {$/;"	s	file:
pit_face_item	ccnd/ccnd_private.h	/^struct pit_face_item {$/;"	s
pkts_recvd	cmd/ccncatchunks2.c	/^    intmax_t pkts_recvd;$/;"	m	struct:mydata	file:
pktseq	ccnd/ccnd_private.h	/^    unsigned short pktseq;      \/**< sequence number for sent packets *\/$/;"	m	struct:face
policy_link_cob	ccnr/ccnr_private.h	/^    struct ccn_charbuf *policy_link_cob;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_charbuf
policy_name	ccnr/ccnr_private.h	/^    struct ccn_charbuf *policy_name;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_charbuf
policy_version_offset	ccnr/ccnr_proto.h	/^    int policy_version_offset;$/;"	m	struct:ccnr_parsed_policy
port	include/ccn/sockcreate.h	/^    const char *port;           \/**< service name or number *\/$/;"	m	struct:ccn_sockdescr
portstr	ccnd/ccnd_private.h	/^    const char *portstr;            \/**< "main" port number *\/$/;"	m	struct:ccnd_handle
portstr	ccnr/ccnr_private.h	/^    const char *portstr;            \/**< port number for status display *\/$/;"	m	struct:ccnr_handle
pos	lib/ccn_fetch.c	/^	intmax_t pos;		\/\/ the base byte position for this segment$/;"	m	struct:ccn_fetch_buffer	file:
pos	sync/SyncNode.h	/^    int pos;$/;"	m	struct:SyncLongHashStruct
pos	sync/SyncTreeWorker.h	/^    ssize_t pos;$/;"	m	struct:SyncTreeWorkerEntry
postSortCount	sync/SyncActions.c	/^    int postSortCount;$/;"	m	struct:SyncUpdateData	file:
post_enroll	include/ccn/nametree.h	/^    ccn_nametree_action post_enroll; \/**< called after enroll *\/$/;"	m	struct:ccn_nametree
post_face_notice	ccnd/ccnd_internal_client.c	/^post_face_notice(struct ccnd_handle *ccnd, unsigned faceid)$/;"	f	file:
post_face_notice	ccnr/ccnr_internal_client.c	/^post_face_notice(struct ccnr_handle *ccnr, unsigned filedesc)$/;"	f	file:
ppkd	sync/sync_api.c	/^    unsigned char ppkd[32]; \/\/ key digest of tracked repo, if known.$/;"	m	struct:ccns_handle	file:
ppkd_size	sync/sync_api.c	/^    int ppkd_size;$/;"	m	struct:ccns_handle	file:
ppkdg	include/ccn/btree_content.h	/^    unsigned char ppkdg[32];    \/**< PublisherPublicKeyDigest *\/$/;"	m	struct:ccn_btree_content_payload
preSortCount	sync/SyncActions.c	/^    int preSortCount;$/;"	m	struct:SyncUpdateData	file:
pre_remove	include/ccn/nametree.h	/^    ccn_nametree_action pre_remove; \/**< called before removal *\/$/;"	m	struct:ccn_nametree
predicted_response_limit	ccnd/ccnd_private.h	/^    int predicted_response_limit;   \/**< CCND_MAX_RTE_MICROSEC *\/$/;"	m	struct:ccnd_handle
prefer_newest	cmd/ccnc.c	/^    int prefer_newest;          \/* for saner startup *\/$/;"	m	struct:ccnxchat_state	file:
prefix	cmd/ccn_splitccnb.c	/^    char *prefix;$/;"	m	struct:fstate	file:
prefix	cmd/ccnhexdumpdata.c	/^    char *prefix;$/;"	m	struct:fstate	file:
prefix	sync/SyncActions.h	/^    struct ccn_charbuf *prefix;$/;"	m	struct:SyncActionData	typeref:struct:SyncActionData::ccn_charbuf
prefix	sync/sync_api.c	/^    struct ccn_charbuf *prefix;$/;"	m	struct:ccns_slice	typeref:struct:ccns_slice::ccn_charbuf	file:
prefixAccum	sync/SyncPrivate.h	/^    struct SyncNameAccum *prefixAccum;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncNameAccum
prefix_comps	include/ccn/ccn.h	/^    int prefix_comps;$/;"	m	struct:ccn_parsed_interest
prefix_comps	lib/ccn_bulkdata.c	/^    int prefix_comps;$/;"	m	struct:bulkdata	file:
prepare_poll_fds	ccnd/ccnd.c	/^prepare_poll_fds(struct ccnd_handle *h)$/;"	f	file:
prev	ccnd/ccnd_private.h	/^    struct ielinks *prev;           \/**< previous in list *\/$/;"	m	struct:ielinks	typeref:struct:ielinks::ielinks
prev	ccnd/ccnd_private.h	/^    struct ncelinks *prev;           \/**< previous in list *\/$/;"	m	struct:ncelinks	typeref:struct:ncelinks::ncelinks
prev	ccnr/ccnr_private.h	/^    struct propagating_entry *prev;$/;"	m	struct:propagating_entry	typeref:struct:propagating_entry::propagating_entry
prev	include/ccn/nametree.h	/^    struct ccny *prev;      \/**< link to previous, in name order *\/$/;"	m	struct:ccny	typeref:struct:ccny::ccny
prev	lib/ccn_bulkdata.c	/^    struct pending *prev;           \/* links for doubly-linked list *\/$/;"	m	struct:pending	typeref:struct:pending::pending	file:
prevAddLen	sync/SyncPrivate.h	/^    size_t prevAddLen;$/;"	m	struct:SyncRootPrivate
prevx	ccnd/ccnd_private.h	/^    struct content_entry *prevx; \/**< Expiry doubly linked for fast removal *\/$/;"	m	struct:content_entry	typeref:struct:content_entry::content_entry
printTree	sync/SyncTest.c	/^printTree(struct SyncTreeWorkerHead *head, FILE *f) {$/;"	f	file:
printTreeInner	sync/SyncTest.c	/^printTreeInner(struct SyncTreeWorkerHead *head,$/;"	f	file:
print_percent_escaped	cmd/ccn_ccnbtoxml.c	/^print_percent_escaped(const unsigned char *data, size_t size)$/;"	f	file:
print_summary	cmd/ccncatchunks2.c	/^print_summary(struct mydata *md)$/;"	f
printraw	ccnd/ccndsmoketest.c	/^printraw(char *p, int n)$/;"	f	file:
printraw	cmd/ccnlibtest.c	/^printraw(const void *r, int n)$/;"	f
printstat	cmd/ccnfilewatch.c	/^printstat(FILE *out, struct stat *s)$/;"	f	file:
priv	include/ccn/hashtb.h	/^    void *priv[3];$/;"	m	struct:hashtb_enumerator
priv	sync/SyncBase.h	/^    struct SyncPrivate *priv;       \/\/ opaque data for Repo (from Repo)$/;"	m	struct:SyncBaseStruct	typeref:struct:SyncBaseStruct::SyncPrivate
priv	sync/SyncRoot.h	/^    struct SyncRootPrivate *priv;         \/**< private to SyncRoot *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::SyncRootPrivate
private_key	lib/ccn_keystore.c	/^    EVP_PKEY *private_key;$/;"	m	struct:ccn_keystore	file:
probes	sync/SyncHashCache.h	/^    uintmax_t probes;                   \/**< number of cache probes *\/$/;"	m	struct:SyncHashCacheHead
process_data	cmd/ccn_ccnbtoxml.c	/^process_data(struct ccn_decoder *d, unsigned char *data, size_t n)$/;"	f	file:
process_data	cmd/ccnnamelist.c	/^process_data(struct ccn_skeleton_decoder *d, unsigned char *data, size_t n, struct ccn_charbuf *c, const struct options *o)$/;"	f	file:
process_fd	cmd/ccn_ccnbtoxml.c	/^process_fd(struct ccn_decoder *d, int fd)$/;"	f	file:
process_fd	cmd/ccn_splitccnb.c	/^process_fd(int fd, struct fstate *perfilestate)$/;"	f	file:
process_fd	cmd/ccn_xmltoccnb.c	/^process_fd(int fd, FILE *outfile, int flags, const struct ccn_dict *dtags)$/;"	f	file:
process_fd	cmd/ccndumppcap.c	/^process_fd(pcap_dumper_t *pcap_out, int fd, int content_only,$/;"	f	file:
process_fd	cmd/ccnhexdumpdata.c	/^process_fd(int fd, struct fstate *perfilestate)$/;"	f	file:
process_fd	cmd/ccnnamelist.c	/^process_fd(int fd, struct ccn_charbuf *c, const struct options *o)$/;"	f	file:
process_fd	lib/skel_decode_test.c	/^process_fd(int fd, int flags)$/;"	f	file:
process_file	cmd/ccn_ccnbtoxml.c	/^process_file(char *path, int formatting_flags, const struct ccn_dict *dtags)$/;"	f	file:
process_file	cmd/ccn_splitccnb.c	/^process_file(char *path, struct fstate *perfilestate)$/;"	f	file:
process_file	cmd/ccn_xmltoccnb.c	/^process_file(char *path, int flags, const struct ccn_dict *dtags)$/;"	f	file:
process_file	cmd/ccnhexdumpdata.c	/^process_file(char *path, struct fstate *perfilestate)$/;"	f	file:
process_file	cmd/ccnnamelist.c	/^process_file(char *path, struct ccn_charbuf *c, const struct options *o)$/;"	f	file:
process_file	lib/skel_decode_test.c	/^process_file(char *path, int flags)$/;"	f	file:
process_icb_action	ccnd/ccnd.c	/^process_icb_action($/;"	f	file:
process_incoming_content	ccnd/ccnd.c	/^process_incoming_content(struct ccnd_handle *h, struct face *face,$/;"	f	file:
process_incoming_content	ccnr/ccnr_store.c	/^process_incoming_content(struct ccnr_handle *h, struct fdholder *fdholder,$/;"	f
process_incoming_interest	ccnd/ccnd.c	/^process_incoming_interest(struct ccnd_handle *h, struct face *face,$/;"	f	file:
process_incoming_link_message	ccnd/ccnd.c	/^process_incoming_link_message(struct ccnd_handle *h,$/;"	f	file:
process_input	ccnd/ccnd.c	/^process_input(struct ccnd_handle *h, int fd)$/;"	f	file:
process_input_buffer	ccnd/ccnd.c	/^process_input_buffer(struct ccnd_handle *h, struct face *face)$/;"	f	file:
process_input_buffer	ccnr/ccnr_dispatch.c	/^process_input_buffer(struct ccnr_handle *h, struct fdholder *fdholder)$/;"	f	file:
process_input_message	ccnd/ccnd.c	/^process_input_message(struct ccnd_handle *h, struct face *face,$/;"	f	file:
process_input_message	ccnr/ccnr_dispatch.c	/^process_input_message(struct ccnr_handle *h, struct fdholder *fdholder,$/;"	f	file:
process_internal_client_buffer	ccnd/ccnd.c	/^process_internal_client_buffer(struct ccnd_handle *h)$/;"	f	file:
process_options	libexec/udplink.c	/^void process_options(int argc, char * const argv[], struct options *opt) {$/;"	f
process_split_file	cmd/ccn_ccnbtoxml.c	/^process_split_file(char *base, char *path, int formatting_flags,$/;"	f	file:
process_test	cmd/ccn_splitccnb.c	/^process_test(unsigned char *data, size_t n, struct fstate *perfilestate)$/;"	f	file:
process_test	cmd/ccndumppcap.c	/^process_test(pcap_dumper_t *pcap_out, int content_only,$/;"	f	file:
process_test	cmd/ccnhexdumpdata.c	/^process_test(unsigned char *data, size_t n, struct fstate *perfilestate)$/;"	f	file:
process_test	lib/skel_decode_test.c	/^process_test(unsigned char *data, size_t n, int flags)$/;"	f	file:
progname	ccnd/ccnd_private.h	/^    const char *progname;           \/**< our name, for locating helpers *\/$/;"	m	struct:ccnd_handle
progname	ccnr/ccnr_private.h	/^    const char *progname;           \/**< our name, for locating helpers *\/$/;"	m	struct:ccnr_handle
progname	cmd/ccnc.c	/^static const char *progname;$/;"	v	file:
progname	cmd/ccnsnew.c	/^static const char *progname;$/;"	v	file:
propagate_interest	ccnd/ccnd.c	/^propagate_interest(struct ccnd_handle *h,$/;"	f	file:
propagating_entry	ccnr/ccnr_private.h	/^struct propagating_entry {$/;"	s
propagating_tab	ccnr/ccnr_private.h	/^    struct hashtb *propagating_tab; \/**< keyed by nonce *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::hashtb
prune_oldest_exclusion	cmd/ccnc.c	/^prune_oldest_exclusion(struct ccnxchat_state *st)$/;"	f	file:
prv	include/ccn/nametree.h	/^    unsigned short prv;     \/**< not for client use *\/$/;"	m	struct:ccny
pubid	include/ccn/ccn.h	/^    unsigned char pubid[32];$/;"	m	struct:ccn_signing_params
pubkey_digest	lib/ccn_keystore.c	/^    unsigned char pubkey_digest[SHA256_DIGEST_LENGTH];$/;"	m	struct:ccn_keystore	file:
pubkey_digest_length	lib/ccn_keystore.c	/^    ssize_t pubkey_digest_length;$/;"	m	struct:ccn_keystore	file:
public_key	lib/ccn_keystore.c	/^    EVP_PKEY *public_key;$/;"	m	struct:ccn_keystore	file:
publisher_digest_type	include/ccn/ccn.h	/^    int publisher_digest_type;$/;"	m	struct:ccn_parsed_Link
purgeOldEntries	sync/SyncActions.c	/^purgeOldEntries(struct SyncRootStruct *root) {$/;"	f	file:
putFile	sync/SyncTest.c	/^putFile(struct SyncTestParms *parms, char *src, char *dst) {$/;"	f	file:
putFileList	sync/SyncTest.c	/^putFileList(struct SyncTestParms *parms, char *listName) {$/;"	f	file:
putMark	sync/SyncTest.c	/^static void putMark(FILE *f) {$/;"	f	file:
q	ccnd/ccnd_private.h	/^    struct content_queue *q[CCN_CQ_N]; \/**< outgoing content, per delay class *\/$/;"	m	struct:face	typeref:struct:face::content_queue
q	ccnr/ccnr_private.h	/^    struct content_queue *q[CCN_CQ_N]; \/**< outgoing content, per delay class *\/$/;"	m	struct:fdholder	typeref:struct:fdholder::content_queue
qsort_compare_dict_indices	lib/ccn_extend_dict.c	/^qsort_compare_dict_indices(const void *x, const void *y)$/;"	f	file:
qsort_compare_dict_names	lib/ccn_extend_dict.c	/^qsort_compare_dict_names(const void *x, const void *y)$/;"	f	file:
quiet	cmd/ccnc.c	/^    int quiet;                  \/* no automatic greeting or farewell *\/$/;"	m	struct:ccnxchat_state	file:
quiet	cmd/ccnc.c	/^    int quiet;$/;"	m	struct:__anon3	file:
r_dispatch_process_input	ccnr/ccnr_dispatch.c	/^r_dispatch_process_input(struct ccnr_handle *h, int fd)$/;"	f
r_dispatch_process_internal_client_buffer	ccnr/ccnr_dispatch.c	/^r_dispatch_process_internal_client_buffer(struct ccnr_handle *h)$/;"	f
r_dispatch_run	ccnr/ccnr_dispatch.c	/^r_dispatch_run(struct ccnr_handle *h)$/;"	f
r_fwd_finalize_nameprefix	ccnr/ccnr_forwarding.c	/^r_fwd_finalize_nameprefix(struct hashtb_enumerator *e)$/;"	f
r_init_config_msg	ccnr/ccnr_init.c	/^r_init_config_msg(struct ccnr_handle *h, int flags,$/;"	f	file:
r_init_confval	ccnr/ccnr_init.c	/^r_init_confval(struct ccnr_handle *h, const char *key,$/;"	f
r_init_create	ccnr/ccnr_init.c	/^r_init_create(const char *progname, ccnr_logger logger, void *loggerdata)$/;"	f
r_init_debug_getenv	ccnr/ccnr_init.c	/^r_init_debug_getenv(struct ccnr_handle *h, const char *envname)$/;"	f	file:
r_init_destroy	ccnr/ccnr_init.c	/^r_init_destroy(struct ccnr_handle **pccnr)$/;"	f
r_init_fail	ccnr/ccnr_init.c	/^r_init_fail(struct ccnr_handle *ccnr, int line, const char *culprit, int err)$/;"	f
r_init_map_and_process_file	ccnr/ccnr_init.c	/^r_init_map_and_process_file(struct ccnr_handle *h, struct ccn_charbuf *filename, int add_content)$/;"	f
r_init_parse_config	ccnr/ccnr_init.c	/^r_init_parse_config(struct ccnr_handle *h, struct ccn_charbuf *config, int pass)$/;"	f
r_init_read_config	ccnr/ccnr_init.c	/^r_init_read_config(struct ccnr_handle *h)$/;"	f
r_io_accept_connection	ccnr/ccnr_io.c	/^r_io_accept_connection(struct ccnr_handle *h, int listener_fd)$/;"	f
r_io_destroy_face	ccnr/ccnr_io.c	/^r_io_destroy_face(struct ccnr_handle *h, unsigned filedesc)$/;"	f
r_io_enroll_face	ccnr/ccnr_io.c	/^r_io_enroll_face(struct ccnr_handle *h, struct fdholder *fdholder)$/;"	f
r_io_fdholder_from_fd	ccnr/ccnr_io.c	/^r_io_fdholder_from_fd(struct ccnr_handle *h, unsigned filedesc)$/;"	f
r_io_open_repo_data_file	ccnr/ccnr_io.c	/^r_io_open_repo_data_file(struct ccnr_handle *h, const char *name, int output)$/;"	f
r_io_prepare_poll_fds	ccnr/ccnr_io.c	/^r_io_prepare_poll_fds(struct ccnr_handle *h)$/;"	f
r_io_record_fd	ccnr/ccnr_io.c	/^r_io_record_fd(struct ccnr_handle *h, int fd,$/;"	f
r_io_register_new_face	ccnr/ccnr_io.c	/^r_io_register_new_face(struct ccnr_handle *h, struct fdholder *fdholder)$/;"	f
r_io_repo_data_file_fd	ccnr/ccnr_io.c	/^r_io_repo_data_file_fd(struct ccnr_handle *h, unsigned repofile, int output)$/;"	f
r_io_send	ccnr/ccnr_io.c	/^r_io_send(struct ccnr_handle *h,$/;"	f
r_io_shutdown_all	ccnr/ccnr_io.c	/^r_io_shutdown_all(struct ccnr_handle *h)$/;"	f
r_io_shutdown_client_fd	ccnr/ccnr_io.c	/^r_io_shutdown_client_fd(struct ccnr_handle *h, int fd)$/;"	f
r_link_do_deferred_write	ccnr/ccnr_link.c	/^r_link_do_deferred_write(struct ccnr_handle *h, int fd)$/;"	f
r_link_send_content	ccnr/ccnr_link.c	/^r_link_send_content(struct ccnr_handle *h, struct fdholder *fdholder, struct content_entry *content)$/;"	f
r_link_stuff_and_send	ccnr/ccnr_link.c	/^r_link_stuff_and_send(struct ccnr_handle *h, struct fdholder *fdholder,$/;"	f
r_lookup	ccnr/ccnr_sync.c	/^r_lookup(struct ccnr_handle *ccnr,$/;"	f
r_match_consume_interest	ccnr/ccnr_match.c	/^r_match_consume_interest(struct ccnr_handle *h, struct propagating_entry *pe)$/;"	f
r_match_consume_matching_interests	ccnr/ccnr_match.c	/^r_match_consume_matching_interests(struct ccnr_handle *h,$/;"	f
r_match_match_interests	ccnr/ccnr_match.c	/^r_match_match_interests(struct ccnr_handle *h, struct content_entry *content,$/;"	f
r_net_get_local_sockname	ccnr/ccnr_net.c	/^r_net_get_local_sockname(void)$/;"	f
r_net_listen_on	ccnr/ccnr_net.c	/^r_net_listen_on(struct ccnr_handle *h, const char *addrs)$/;"	f
r_net_listen_on_address	ccnr/ccnr_net.c	/^r_net_listen_on_address(struct ccnr_handle *h, const char *addr)$/;"	f
r_net_setsockopt_v6only	ccnr/ccnr_net.c	/^r_net_setsockopt_v6only(struct ccnr_handle *h, int fd)$/;"	f
r_proto_activate_policy	ccnr/ccnr_proto.c	/^r_proto_activate_policy(struct ccnr_handle *ccnr, struct ccnr_parsed_policy *pp) {$/;"	f
r_proto_answer_req	ccnr/ccnr_proto.c	/^r_proto_answer_req(struct ccn_closure *selfp,$/;"	f
r_proto_append_repo_info	ccnr/ccnr_proto.c	/^r_proto_append_repo_info(struct ccnr_handle *ccnr,$/;"	f
r_proto_begin_enumeration	ccnr/ccnr_proto.c	/^r_proto_begin_enumeration(struct ccn_closure *selfp,$/;"	f	file:
r_proto_bulk_import	ccnr/ccnr_proto.c	/^r_proto_bulk_import(struct ccn_closure *selfp,$/;"	f	file:
r_proto_check_exclude	ccnr/ccnr_proto.c	/^r_proto_check_exclude(struct ccnr_handle *ccnr,$/;"	f	file:
r_proto_continue_enumeration	ccnr/ccnr_proto.c	/^r_proto_continue_enumeration(struct ccn_closure *selfp,$/;"	f	file:
r_proto_deactivate_policy	ccnr/ccnr_proto.c	/^r_proto_deactivate_policy(struct ccnr_handle *ccnr, struct ccnr_parsed_policy *pp) {$/;"	f
r_proto_dump_enums	ccnr/ccnr_proto.c	/^r_proto_dump_enums(struct ccnr_handle *ccnr)$/;"	f
r_proto_expect_content	ccnr/ccnr_proto.c	/^r_proto_expect_content(struct ccn_closure *selfp,$/;"	f
r_proto_finalize_enum_state	ccnr/ccnr_proto.c	/^r_proto_finalize_enum_state(struct hashtb_enumerator *e)$/;"	f
r_proto_init	ccnr/ccnr_proto.c	/^r_proto_init(struct ccnr_handle *ccnr) {$/;"	f
r_proto_initiate_key_fetch	ccnr/ccnr_proto.c	/^r_proto_initiate_key_fetch(struct ccnr_handle *ccnr,$/;"	f
r_proto_mktemplate	ccnr/ccnr_proto.c	/^r_proto_mktemplate(struct ccnr_expect_content *md, struct ccn_upcall_info *info,$/;"	f	file:
r_proto_parse_policy	ccnr/ccnr_proto.c	/^r_proto_parse_policy(struct ccnr_handle *ccnr, const unsigned char *buf, size_t length,$/;"	f
r_proto_policy_append_basic	ccnr/ccnr_proto.c	/^r_proto_policy_append_basic(struct ccnr_handle *ccnr,$/;"	f
r_proto_policy_append_namespace	ccnr/ccnr_proto.c	/^r_proto_policy_append_namespace(struct ccnr_handle *ccnr,$/;"	f
r_proto_policy_complete	ccnr/ccnr_proto.c	/^r_proto_policy_complete(struct ccn_closure *selfp,$/;"	f	file:
r_proto_policy_update	ccnr/ccnr_proto.c	/^r_proto_policy_update(struct ccn_schedule *sched,$/;"	f	file:
r_proto_start_write	ccnr/ccnr_proto.c	/^r_proto_start_write(struct ccn_closure *selfp,$/;"	f	file:
r_proto_start_write_checked	ccnr/ccnr_proto.c	/^r_proto_start_write_checked(struct ccn_closure *selfp,$/;"	f	file:
r_proto_uri_listen	ccnr/ccnr_proto.c	/^r_proto_uri_listen(struct ccnr_handle *ccnr, struct ccn *ccn, const char *uri,$/;"	f
r_sendq_content_queue_destroy	ccnr/ccnr_sendq.c	/^r_sendq_content_queue_destroy(struct ccnr_handle *h, struct content_queue **pq)$/;"	f
r_sendq_face_send_queue_insert	ccnr/ccnr_sendq.c	/^r_sendq_face_send_queue_insert(struct ccnr_handle *h,$/;"	f
r_store_commit_content	ccnr/ccnr_store.c	/^r_store_commit_content(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_accession	ccnr/ccnr_store.c	/^r_store_content_accession(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_base	ccnr/ccnr_store.c	/^r_store_content_base(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_btree_insert	ccnr/ccnr_store.c	/^r_store_content_btree_insert(struct ccnr_handle *h,$/;"	f	file:
r_store_content_change_flags	ccnr/ccnr_store.c	/^r_store_content_change_flags(struct content_entry *content, int set, int clear)$/;"	f
r_store_content_cookie	ccnr/ccnr_store.c	/^r_store_content_cookie(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_field_access	ccnr/ccnr_store.c	/^r_store_content_field_access(struct ccnr_handle *h,$/;"	f
r_store_content_flags	ccnr/ccnr_store.c	/^r_store_content_flags(struct content_entry *content)$/;"	f
r_store_content_flatname	ccnr/ccnr_store.c	/^r_store_content_flatname(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_from_accession	ccnr/ccnr_store.c	/^r_store_content_from_accession(struct ccnr_handle *h, ccnr_accession accession)$/;"	f
r_store_content_from_cookie	ccnr/ccnr_store.c	/^r_store_content_from_cookie(struct ccnr_handle *h, ccnr_cookie cookie)$/;"	f
r_store_content_mapped	ccnr/ccnr_store.c	/^r_store_content_mapped(struct ccnr_handle *h, struct content_entry *content)$/;"	f	file:
r_store_content_matches_interest_prefix	ccnr/ccnr_store.c	/^r_store_content_matches_interest_prefix(struct ccnr_handle *h,$/;"	f
r_store_content_next	ccnr/ccnr_store.c	/^r_store_content_next(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_read	ccnr/ccnr_store.c	/^r_store_content_read(struct ccnr_handle *h, struct content_entry *content)$/;"	f	file:
r_store_content_size	ccnr/ccnr_store.c	/^r_store_content_size(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_content_trim	ccnr/ccnr_store.c	/^r_store_content_trim(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_enroll_content	ccnr/ccnr_store.c	/^r_store_enroll_content(struct ccnr_handle *h, struct content_entry *content)$/;"	f
r_store_fatal	ccnr/ccnr_store.c	/^r_store_fatal(struct ccnr_handle *h, const char *fn, int lineno)$/;"	f	file:
r_store_final	ccnr/ccnr_store.c	/^r_store_final(struct ccnr_handle *h, int stable) {$/;"	f
r_store_find_first_match_candidate	ccnr/ccnr_store.c	/^r_store_find_first_match_candidate(struct ccnr_handle *h,$/;"	f
r_store_forget_content	ccnr/ccnr_store.c	/^r_store_forget_content(struct ccnr_handle *h, struct content_entry **pentry)$/;"	f
r_store_index_cleaner	ccnr/ccnr_store.c	/^r_store_index_cleaner(struct ccn_schedule *sched,$/;"	f	file:
r_store_index_needs_cleaning	ccnr/ccnr_store.c	/^r_store_index_needs_cleaning(struct ccnr_handle *h)$/;"	f
r_store_init	ccnr/ccnr_store.c	/^r_store_init(struct ccnr_handle *h)$/;"	f
r_store_look	ccnr/ccnr_store.c	/^r_store_look(struct ccnr_handle *h, const unsigned char *key, size_t size)$/;"	f	file:
r_store_lookup	ccnr/ccnr_store.c	/^r_store_lookup(struct ccnr_handle *h,$/;"	f
r_store_lookup_backwards	ccnr/ccnr_store.c	/^r_store_lookup_backwards(struct ccnr_handle *h,$/;"	f	file:
r_store_lookup_ccnb	ccnr/ccnr_store.c	/^r_store_lookup_ccnb(struct ccnr_handle *h,$/;"	f
r_store_mark_repoFile1	ccnr/ccnr_store.c	/^const ccnr_accession r_store_mark_repoFile1 = ((ccnr_accession)1) << 48;$/;"	v
r_store_name_append_components	ccnr/ccnr_store.c	/^r_store_name_append_components(struct ccn_charbuf *dst,$/;"	f
r_store_next_child_at_level	ccnr/ccnr_store.c	/^r_store_next_child_at_level(struct ccnr_handle *h,$/;"	f
r_store_offset_from_accession	ccnr/ccnr_store.c	/^r_store_offset_from_accession(struct ccnr_handle *h, ccnr_accession a)$/;"	f	file:
r_store_read_stable_point	ccnr/ccnr_store.c	/^r_store_read_stable_point(struct ccnr_handle *h)$/;"	f	file:
r_store_reindexing	ccnr/ccnr_store.c	/^r_store_reindexing(struct ccn_schedule *sched,$/;"	f	file:
r_store_repofile_from_accession	ccnr/ccnr_store.c	/^r_store_repofile_from_accession(struct ccnr_handle *h, ccnr_accession a)$/;"	f	file:
r_store_send_content	ccnr/ccnr_store.c	/^r_store_send_content(struct ccnr_handle *h, struct fdholder *fdholder, struct content_entry *content)$/;"	f
r_store_set_accession_from_offset	ccnr/ccnr_store.c	/^r_store_set_accession_from_offset(struct ccnr_handle *h,$/;"	f
r_store_set_flatname	ccnr/ccnr_store.c	/^r_store_set_flatname(struct ccnr_handle *h, struct content_entry *content,$/;"	f	file:
r_store_trim	ccnr/ccnr_store.c	/^r_store_trim(struct ccnr_handle *h, unsigned long limit)$/;"	f
r_store_write_stable_point	ccnr/ccnr_store.c	/^r_store_write_stable_point(struct ccnr_handle *h)$/;"	f	file:
r_sync_enumerate	ccnr/ccnr_sync.c	/^r_sync_enumerate(struct sync_plumbing *sdd,$/;"	f
r_sync_enumerate	sync/sync_plumbing.h	/^    int (* r_sync_enumerate)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_client_methods
r_sync_enumerate_action	ccnr/ccnr_sync.c	/^r_sync_enumerate_action(struct ccn_schedule *sched,$/;"	f	file:
r_sync_fence	ccnr/ccnr_sync.c	/^r_sync_fence(struct sync_plumbing *sdd,$/;"	f
r_sync_fence	sync/sync_plumbing.h	/^    int (* r_sync_fence)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_client_methods
r_sync_local_store	ccnr/ccnr_sync.c	/^r_sync_local_store(struct sync_plumbing *sdd,$/;"	f
r_sync_local_store	sync/sync_plumbing.h	/^    int (* r_sync_local_store)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_client_methods
r_sync_lookup	ccnr/ccnr_sync.c	/^r_sync_lookup(struct sync_plumbing *sdd,$/;"	f
r_sync_lookup	sync/sync_plumbing.h	/^    int (* r_sync_lookup)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_client_methods
r_sync_msg	ccnr/ccnr_sync.c	/^r_sync_msg(struct sync_plumbing *sdd,$/;"	f
r_sync_msg	sync/sync_plumbing.h	/^    void (* r_sync_msg)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_client_methods
r_sync_notify_content	ccnr/ccnr_sync.c	/^r_sync_notify_content(struct ccnr_handle *ccnr, int e, struct content_entry *content)$/;"	f
r_sync_upcall_store	ccnr/ccnr_sync.c	/^r_sync_upcall_store(struct sync_plumbing *sdd,$/;"	f
r_sync_upcall_store	sync/sync_plumbing.h	/^    enum ccn_upcall_res (* r_sync_upcall_store)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_client_methods	typeref:enum:sync_plumbing_client_methods::r_sync_upcall_store
r_util_charbuf_obtain	ccnr/ccnr_util.c	/^r_util_charbuf_obtain(struct ccnr_handle *h)$/;"	f
r_util_charbuf_release	ccnr/ccnr_util.c	/^r_util_charbuf_release(struct ccnr_handle *h, struct ccn_charbuf *c)$/;"	f
r_util_gettime	ccnr/ccnr_util.c	/^r_util_gettime(const struct ccn_gettime *self, struct ccn_timeval *result)$/;"	f
r_util_indexbuf_obtain	ccnr/ccnr_util.c	/^r_util_indexbuf_obtain(struct ccnr_handle *h)$/;"	f
r_util_indexbuf_release	ccnr/ccnr_util.c	/^r_util_indexbuf_release(struct ccnr_handle *h, struct ccn_indexbuf *c)$/;"	f
r_util_name_comp_compare	ccnr/ccnr_util.c	/^r_util_name_comp_compare(const unsigned char *data,$/;"	f
r_util_reseed	ccnr/ccnr_util.c	/^r_util_reseed(struct ccnr_handle *h)$/;"	f
r_util_segment_from_component	ccnr/ccnr_util.c	/^r_util_segment_from_component(const unsigned char *ccnb, size_t start, size_t stop)$/;"	f
r_util_timecmp	ccnr/ccnr_util.c	/^r_util_timecmp(long secA, unsigned usecA, long secB, unsigned usecB)$/;"	f
rand_usec	ccnd/ccnd_private.h	/^    unsigned rand_usec;              \/**< randomization range *\/$/;"	m	struct:content_queue
rand_usec	ccnr/ccnr_private.h	/^    unsigned rand_usec;              \/**< randomization range *\/$/;"	m	struct:content_queue
randomize_content_delay	ccnd/ccnd.c	/^randomize_content_delay(struct ccnd_handle *h, struct content_queue *q)$/;"	f	file:
randomize_content_delay	ccnr/ccnr_sendq.c	/^randomize_content_delay(struct ccnr_handle *h, struct content_queue *q)$/;"	f	file:
rate	ccnd/ccnd_stats.c	/^    unsigned rate; \/** a scale factor applies *\/$/;"	m	struct:ccnd_meter	file:
rate	ccnr/ccnr_stats.c	/^    unsigned rate; \/** a scale factor applies *\/$/;"	m	struct:ccnr_meter	file:
raw_data	cmd/ccncatchunks2.c	/^    unsigned char *raw_data;        \/* content that has arrived out-of-order *\/$/;"	m	struct:ooodata	file:
raw_data_size	cmd/ccncatchunks2.c	/^    size_t raw_data_size;           \/* its size (plus 1) in bytes *\/$/;"	m	struct:ooodata	file:
rawbuf	ccnd/ccndsmoketest.c	/^char rawbuf[1024*1024];$/;"	v
rawbuf	cmd/ccnlibtest.c	/^static unsigned char rawbuf[65536];$/;"	v	file:
rawbuf	lib/ccn_verifysig.c	/^static unsigned char rawbuf[8801];$/;"	v	file:
rawlen	cmd/ccnlibtest.c	/^static ssize_t rawlen;$/;"	v	file:
rc	sync/SyncNode.h	/^    int rc;               \/**< reference count *\/$/;"	m	struct:SyncNodeComposite
readAndAccumNames	sync/SyncTest.c	/^readAndAccumNames(FILE *input, int rem) {$/;"	f	file:
readPosition	lib/ccn_fetch.c	/^	intmax_t readPosition;	\/\/ the read position (always assigned)$/;"	m	struct:ccn_fetch_stream	file:
readSeg	lib/ccn_fetch.c	/^	seg_t readSeg;			\/\/ the segment for the readPosition$/;"	m	struct:ccn_fetch_stream	file:
readStart	lib/ccn_fetch.c	/^	intmax_t readStart;		\/\/ the read position at segment start$/;"	m	struct:ccn_fetch_stream	file:
read_configfile	libexec/ccndc-main.c	/^read_configfile(struct ccndc_data *ccndc, const char *filename)$/;"	f	file:
read_full	cmd/ccnpoke.c	/^read_full(int fd, unsigned char *buf, size_t size)$/;"	f	file:
read_full	cmd/ccnsendchunks.c	/^read_full(int fd, unsigned char *buf, size_t size)$/;"	f
read_input	cmd/ccnc.c	/^read_input(struct ccnxchat_state *st)$/;"	f	file:
ready	ccnd/ccnd_private.h	/^    unsigned ready;                  \/**< # that have waited enough *\/$/;"	m	struct:content_queue
ready	ccnr/ccnr_private.h	/^    unsigned ready;                  \/**< # that have waited enough *\/$/;"	m	struct:content_queue
ready	cmd/ccnc.c	/^    int ready;                  \/* true if payload is ready to go *\/$/;"	m	struct:ccnxchat_state	file:
ready	lib/ccn_digest.c	/^    short ready;$/;"	m	struct:ccn_digest	file:
reap	ccnd/ccnd.c	/^reap($/;"	f	file:
reap_enumerations	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *reap_enumerations; \/**< cleans out old enumeration state *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
reap_enumerations	ccnr/ccnr_proto.c	/^reap_enumerations(struct ccn_schedule *sched,$/;"	f	file:
reap_enumerations_needed	ccnr/ccnr_proto.c	/^reap_enumerations_needed(struct ccnr_handle *ccnr)$/;"	f	file:
reap_needed	ccnd/ccnd.c	/^reap_needed(struct ccnd_handle *h, int init_delay_usec)$/;"	f	file:
reaper	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *reaper;$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_scheduled_event
reaper	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *reaper;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_scheduled_event
reconnect	cmd/dataresponsetest.c	/^    int reconnect;$/;"	m	struct:options	file:
record_connection	ccnd/ccnd.c	/^record_connection(struct ccnd_handle *h, int fd,$/;"	f	file:
recv_fd	ccnd/ccnd_private.h	/^    int recv_fd;                \/**< socket for receiving *\/$/;"	m	struct:face
recvcount	ccnd/ccnd_private.h	/^    unsigned recvcount;         \/**< for activity level monitoring *\/$/;"	m	struct:face
recvcount	ccnr/ccnr_private.h	/^    unsigned recvcount;         \/**< for activity level monitoring *\/$/;"	m	struct:fdholder
recving	include/ccn/sockcreate.h	/^    int recving;    \/**< file descriptor to use for input (recv) *\/$/;"	m	struct:ccn_sockets
refLen	sync/SyncNode.h	/^    int refLen;           \/**< number of references *\/$/;"	m	struct:SyncNodeComposite
refLim	sync/SyncNode.h	/^    int refLim;           \/**< space allocated for references *\/$/;"	m	struct:SyncNodeComposite
refcount	include/ccn/ccn.h	/^    int refcount;       \/**< client should not update this directly *\/$/;"	m	struct:ccn_closure
refcount	lib/hashtb.c	/^    int refcount;               \/* Number of open enumerators *\/$/;"	m	struct:hashtb	file:
refresh_us	lib/ccn_client.c	/^    int refresh_us;$/;"	m	struct:ccn	file:
refs	ccnd/ccnd_private.h	/^    short refs;                 \/**< number of queues we are on *\/$/;"	m	struct:content_entry
refs	sync/SyncNode.h	/^    struct SyncNodeElem *refs;    \/**< pointer to references array *\/$/;"	m	struct:SyncNodeComposite	typeref:struct:SyncNodeComposite::SyncNodeElem
register_new_face	ccnd/ccnd.c	/^register_new_face(struct ccnd_handle *h, struct face *face)$/;"	f	file:
remNodeFetch	sync/sync_diff.c	/^remNodeFetch(struct sync_diff_data *sdd, struct SyncHashCacheEntry *ce) {$/;"	f	file:
remoteDeltas	sync/SyncPrivate.h	/^    struct SyncNameAccum *remoteDeltas; \/*< delta names from remote sources *\/$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncNameAccum
remoteSeen	sync/SyncPrivate.h	/^    struct SyncHashInfoList *remoteSeen;$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncHashInfoList
remotehostname	libexec/udplink.c	/^    const char *remotehostname;$/;"	m	struct:options	file:
remoteifindex	libexec/udplink.c	/^    unsigned int remoteifindex;$/;"	m	struct:options	file:
remoteport	libexec/udplink.c	/^    char remoteport[8];$/;"	m	struct:options	file:
remove_content	ccnd/ccnd.c	/^remove_content(struct ccnd_handle *h, struct content_entry *content)$/;"	f	file:
renewals	ccnd/ccnd_private.h	/^    unsigned renewals;              \/**< number of times renewed *\/$/;"	m	struct:ccn_strategy
renewed	ccnd/ccnd_private.h	/^    ccn_wrappedtime renewed;        \/**< when entry was last refreshed *\/$/;"	m	struct:pit_face_item
renewed	ccnd/ccnd_private.h	/^    ccn_wrappedtime renewed;        \/**< when interest entry was renewed *\/$/;"	m	struct:ccn_strategy
replace_interest_msg	lib/ccn_client.c	/^replace_interest_msg(struct expressed_interest *interest,$/;"	f	file:
reply_body	ccnr/ccnr_private.h	/^    struct ccn_charbuf *reply_body;$/;"	m	struct:enum_state	typeref:struct:enum_state::ccn_charbuf
repofile1_fd	ccnr/ccnr_private.h	/^    int repofile1_fd;               \/**< read-only access to repoFile1 *\/$/;"	m	struct:ccnr_handle
report	cmd/ccncatchunks2.c	/^    struct ccn_scheduled_event *report;$/;"	m	struct:mydata	typeref:struct:mydata::ccn_scheduled_event	file:
reportExclude	sync/SyncActions.c	/^reportExclude(struct SyncRootStruct *root, struct ccn_buf_decoder *d) {$/;"	f	file:
reporter	cmd/ccncatchunks2.c	/^reporter(struct ccn_schedule *sched, void *clienth, $/;"	f	file:
reqBusy	lib/ccn_fetch.c	/^	int reqBusy;			\/\/ the number of requests busy$/;"	m	struct:ccn_fetch_stream	file:
reqSeg	lib/ccn_fetch.c	/^	seg_t reqSeg;$/;"	m	struct:localClosure	file:
requests	lib/ccn_fetch.c	/^	struct localClosure *requests;	\/\/ segment requests in process$/;"	m	struct:ccn_fetch_stream	typeref:struct:ccn_fetch_stream::localClosure	file:
res	lib/ccn_client.c	/^    int res;$/;"	m	struct:simple_get_data	file:
reschedule_event	lib/ccn_schedule.c	/^reschedule_event($/;"	f	file:
reserved	include/ccn/bloom.h	/^    unsigned char reserved; \/* must be 0 for now *\/$/;"	m	struct:ccn_bloom_wire
resetDiffData	sync/sync_diff.c	/^resetDiffData(struct sync_diff_data *sdd) {$/;"	f	file:
resetUpdateData	sync/sync_diff.c	/^resetUpdateData(struct sync_update_data *ud) {$/;"	f	file:
resident	include/ccn/btree.h	/^    struct hashtb *resident;    \/**< of ccn_btree_node, by nodeid *\/$/;"	m	struct:ccn_btree	typeref:struct:ccn_btree::hashtb
resolve	sync/SyncTest.c	/^    int resolve;$/;"	m	struct:SyncTestParms	file:
resolveVersion	cmd/ccn_fetch_test.c	/^	int resolveVersion;$/;"	m	struct:MyParms	file:
resolve_templ	lib/ccn_versioning.c	/^resolve_templ(struct ccn_charbuf *templ, unsigned const char *vcomp,$/;"	f	file:
resp404	ccnd/ccnd_stats.c	/^static const char *resp404 =$/;"	v	file:
resp404	ccnr/ccnr_stats.c	/^static const char *resp404 =$/;"	v	file:
resp405	ccnd/ccnd_stats.c	/^static const char *resp405 =$/;"	v	file:
resp405	ccnr/ccnr_stats.c	/^static const char *resp405 =$/;"	v	file:
responder	cmd/ccnc.c	/^    const char *responder;$/;"	m	struct:__anon3	file:
result_size	cmd/ccn_xmltoccnb.c	/^    size_t result_size;$/;"	m	struct:base64_decoder	file:
resultbuf	lib/ccn_client.c	/^    struct ccn_charbuf *resultbuf;$/;"	m	struct:simple_get_data	typeref:struct:simple_get_data::ccn_charbuf	file:
retErr	cmd/ccn_fetch_test.c	/^retErr(string msg) {$/;"	f	file:
robo_chat	cmd/ccnc.c	/^robo_chat(int argc, char **argv)$/;"	f	file:
robotname	cmd/ccnc.c	/^    int robotname;              \/* print n bytes of robot name *\/$/;"	m	struct:ccnxchat_state	file:
robotname	cmd/ccnc.c	/^    int robotname;$/;"	m	struct:__anon3	file:
root	sync/SyncActions.c	/^    struct SyncRootStruct *root;    \/**< parent root for this comparison *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::SyncRootStruct	file:
root	sync/SyncActions.c	/^    struct SyncRootStruct *root;$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncRootStruct	file:
root	sync/SyncActions.h	/^    struct SyncRootStruct *root;$/;"	m	struct:SyncActionData	typeref:struct:SyncActionData::SyncRootStruct
root	sync/SyncHashCache.h	/^    struct SyncRootStruct *root;        \/**< the parent root *\/$/;"	m	struct:SyncHashCacheHead	typeref:struct:SyncHashCacheHead::SyncRootStruct
root	sync/SyncTest.c	/^    struct SyncRootStruct *root;$/;"	m	struct:SyncTestParms	typeref:struct:SyncTestParms::SyncRootStruct	file:
root	sync/sync_api.c	/^    struct SyncRootStruct *root;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::SyncRootStruct	file:
root	sync/sync_diff.h	/^    struct SyncRootStruct *root;$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::SyncRootStruct
root	sync/sync_diff.h	/^    struct SyncRootStruct *root;$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncRootStruct
rootAdviseBytes	sync/SyncPrivate.h	/^    uint64_t rootAdviseBytes;       \/*< number of bytes for RootAdvise responses *\/$/;"	m	struct:SyncRootStats
rootAdviseFailed	sync/SyncPrivate.h	/^    uint64_t rootAdviseFailed;      \/*< number of RootAdvise response failures *\/$/;"	m	struct:SyncRootStats
rootAdviseFresh	sync/SyncPrivate.h	/^    int rootAdviseFresh;        \/*< seconds for root advise response freshness *\/$/;"	m	struct:SyncPrivate
rootAdviseLifetime	sync/SyncPrivate.h	/^    int rootAdviseLifetime;     \/*< seconds for root advise interest lifetime *\/$/;"	m	struct:SyncPrivate
rootAdviseReceived	sync/SyncPrivate.h	/^    uint64_t rootAdviseReceived;    \/*< number of RootAdvise responses received *\/$/;"	m	struct:SyncRootStats
rootAdviseSeen	sync/SyncPrivate.h	/^    uint64_t rootAdviseSeen;        \/*< number of RootAdvise interests received *\/$/;"	m	struct:SyncRootStats
rootAdviseSent	sync/SyncPrivate.h	/^    uint64_t rootAdviseSent;        \/*< number of RootAdvise interests sent *\/$/;"	m	struct:SyncRootStats
rootAdviseTimeout	sync/SyncPrivate.h	/^    uint64_t rootAdviseTimeout;     \/*< number of RootAdvise response timeouts *\/$/;"	m	struct:SyncRootStats
rootHead	sync/SyncPrivate.h	/^    struct SyncRootStruct *rootHead;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncRootStruct
rootId	sync/SyncRoot.h	/^    unsigned rootId;                      \/**< root Id for reporting *\/$/;"	m	struct:SyncRootStruct
root_digest	include/ccn/header.h	/^    struct ccn_charbuf *root_digest;$/;"	m	struct:ccn_header	typeref:struct:ccn_header::ccn_charbuf
root_example	lib/ccnbtreetest.c	/^struct root_example {$/;"	s	file:
rootex1	lib/ccnbtreetest.c	/^} rootex1 = {$/;"	v	typeref:struct:root_example
row_max	include/ccn/matrix.h	/^    uint_least64_t row_max;$/;"	m	struct:ccn_matrix_bounds
row_min	include/ccn/matrix.h	/^    uint_least64_t row_min;$/;"	m	struct:ccn_matrix_bounds
rrun	ccnd/ccnd_private.h	/^    unsigned rrun;$/;"	m	struct:face
rseq	ccnd/ccnd_private.h	/^    uintmax_t rseq;$/;"	m	struct:face
rtt	cmd/ccncatchunks2.c	/^    unsigned rtt;$/;"	m	struct:mydata	file:
rtte	cmd/ccncatchunks2.c	/^    unsigned rtte;$/;"	m	struct:mydata	file:
runTest	cmd/ccn_fetch_test.c	/^runTest(struct MyParms *p) {$/;"	f	file:
running	ccnd/ccnd_private.h	/^    int running;                    \/**< true while should be running *\/$/;"	m	struct:ccnd_handle
running	ccnr/ccnr_private.h	/^    int running;                    \/**< true while should be running *\/$/;"	m	struct:ccnr_handle
running	lib/ccn_client.c	/^    int running;$/;"	m	struct:ccn	file:
s	include/ccn/schedule.h	/^    long s;$/;"	m	struct:ccn_timeval
saveMethods	sync/SyncPrivate.h	/^    struct SyncMethodsList *saveMethods;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncMethodsList
saved_schema	cmd/ccn_ccnbtoxml.c	/^    int saved_schema;$/;"	m	struct:ccn_decoder_stack_item	file:
saved_schema_state	cmd/ccn_ccnbtoxml.c	/^    int saved_schema_state;$/;"	m	struct:ccn_decoder_stack_item	file:
savedss	cmd/ccn_ccnbtoxml.c	/^    size_t savedss;$/;"	m	struct:ccn_decoder_stack_item	file:
scanDeltas	sync/SyncActions.c	/^scanDeltas(struct SyncRootStruct *root, struct SyncHashCacheEntry *ceR) {$/;"	f	file:
scanRemoteSeen	sync/SyncActions.c	/^scanRemoteSeen(struct SyncRootStruct *root, struct SyncHashCacheEntry *ceR) {$/;"	f	file:
scan_buckets	lib/hashtb.c	/^scan_buckets(struct hashtb *ht, unsigned b)$/;"	f	file:
scan_reusable	lib/ccn_btree.c	/^scan_reusable(const unsigned char *key, size_t keysize,$/;"	f	file:
sched	ccnd/ccnd_private.h	/^    struct ccn_schedule *sched;     \/**< our schedule *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_schedule
sched	ccnr/ccnr_private.h	/^    struct ccn_schedule *sched;     \/**< our schedule *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_schedule
sched	cmd/ccncatchunks2.c	/^    struct ccn_schedule *sched;$/;"	m	struct:mydata	typeref:struct:mydata::ccn_schedule	file:
sched	sync/sync_plumbing.h	/^    struct ccn_schedule *sched;     \/\/ scheduler to share$/;"	m	struct:sync_plumbing	typeref:struct:sync_plumbing::ccn_schedule
schedule	lib/ccn_client.c	/^    struct ccn_schedule *schedule;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_schedule	file:
schedule_adjacency_negotiation	ccnd/ccnd_internal_client.c	/^schedule_adjacency_negotiation(struct ccnd_handle *ccnd, unsigned faceid)$/;"	f	file:
schema	cmd/ccn_ccnbtoxml.c	/^    int schema;$/;"	m	struct:ccn_decoder	file:
scope	cmd/ccnls.c	/^    int scope;$/;"	m	struct:upcalldata	file:
scope	include/ccn/ccn.h	/^    int scope;$/;"	m	struct:ccn_parsed_interest
scope	sync/SyncTest.c	/^    int scope;$/;"	m	struct:SyncTestParms	file:
scratch_charbuf	ccnd/ccnd_private.h	/^    struct ccn_charbuf *scratch_charbuf; \/**< one-slot scratch cache *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_charbuf
scratch_charbuf	ccnr/ccnr_private.h	/^    struct ccn_charbuf *scratch_charbuf; \/**< one-slot scratch cache *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_charbuf
scratch_indexbuf	ccnd/ccnd_private.h	/^    struct ccn_indexbuf *scratch_indexbuf; \/**< one-slot scratch cache *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_indexbuf
scratch_indexbuf	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *scratch_indexbuf; \/**< one-slot scratch cache *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_indexbuf
scratch_indexbuf	lib/ccn_client.c	/^    struct ccn_indexbuf *scratch_indexbuf;$/;"	m	struct:ccn	typeref:struct:ccn::ccn_indexbuf	file:
scrub_sockaddr	ccnd/ccnd.c	/^scrub_sockaddr(struct sockaddr *addr, socklen_t addrlen,$/;"	f	file:
sd	sync/SyncBase.h	/^    struct sync_plumbing *sd;   \/\/ interface between client and sync$/;"	m	struct:SyncBaseStruct	typeref:struct:SyncBaseStruct::sync_plumbing
se_cookie	ccnr/ccnr_sync.c	/^static const int se_cookie = __LINE__;$/;"	v	file:
sec	ccnd/ccnd_private.h	/^    long sec;                       \/**< cached gettime seconds *\/$/;"	m	struct:ccnd_handle
sec	ccnr/ccnr_private.h	/^    long sec;                       \/**< cached gettime seconds *\/$/;"	m	struct:ccnr_handle
seed	ccnd/ccnd_private.h	/^    unsigned short seed[3];         \/**< for PRNG *\/$/;"	m	struct:ccnd_handle
seed	ccnr/ccnr_private.h	/^    unsigned short seed[3];         \/**< for PRNG *\/$/;"	m	struct:ccnr_handle
seed	include/ccn/bloom.h	/^    unsigned char seed[4];  \/* can seed hashes differently *\/$/;"	m	struct:ccn_bloom_wire
seek_forwarding	ccnd/ccnd.c	/^seek_forwarding(struct ccnd_handle *h,$/;"	f	file:
seek_trailer	lib/ccn_btree.c	/^seek_trailer(struct ccn_btree_node *node, int i)$/;"	f	file:
seg	lib/ccn_fetch.c	/^	seg_t seg;			\/\/ the seg for this buffer (< 0 if unassigned)$/;"	m	struct:ccn_fetch_buffer	file:
segData	sync/SyncTest.c	/^    unsigned char *segData;$/;"	m	struct:storeFileStruct	file:
segFromInfo	sync/SyncTest.c	/^segFromInfo(struct ccn_upcall_info *info) {$/;"	f	file:
segSize	lib/ccn_fetch.c	/^	int segSize;			\/\/ the segment size (-1 if variable, 0 if unknown)$/;"	m	struct:ccn_fetch_stream	file:
seg_t	lib/ccn_fetch.c	/^typedef intmax_t seg_t;$/;"	t	file:
segment_prefix	cmd/ccn_splitccnb.c	/^segment_prefix(char *path)$/;"	f	file:
segment_prefix	cmd/ccnhexdumpdata.c	/^segment_prefix(char *path)$/;"	f	file:
segmented	sync/SyncTest.c	/^    int segmented;$/;"	m	struct:SyncTestParms	file:
segnum	cmd/ccn_splitccnb.c	/^    int segnum;$/;"	m	struct:fstate	file:
segnum	cmd/ccnhexdumpdata.c	/^    int segnum;$/;"	m	struct:fstate	file:
segsAhead	lib/ccn_fetch.c	/^	int segsAhead;$/;"	m	struct:ccn_fetch_stream	file:
segsRead	lib/ccn_fetch.c	/^	seg_t segsRead;$/;"	m	struct:ccn_fetch_stream	file:
segsRequested	lib/ccn_fetch.c	/^	seg_t segsRequested;$/;"	m	struct:ccn_fetch_stream	file:
self	cmd/ccnsnew.c	/^    struct ccn_closure self;$/;"	m	struct:mydata	typeref:struct:mydata::ccn_closure	file:
sendSlice	sync/SyncTest.c	/^sendSlice(struct SyncTestParms *parms,$/;"	f	file:
send_adjacency_solicit	ccnd/ccnd_internal_client.c	/^send_adjacency_solicit(struct ccnd_handle *ccnd, struct face *face)$/;"	f	file:
send_ccnb_file	ccnd/ccndsmoketest.c	/^send_ccnb_file(int sock, FILE *msgs, const char *filename, int is_dgram)$/;"	f	file:
send_content	ccnd/ccnd.c	/^send_content(struct ccnd_handle *h, struct face *face, struct content_entry *content)$/;"	f	file:
send_http_response	ccnd/ccnd_stats.c	/^send_http_response(struct ccnd_handle *h, struct face *face,$/;"	f	file:
send_http_response	ccnr/ccnr_stats.c	/^send_http_response(struct ccnr_handle *h, struct fdholder *fdholder,$/;"	f	file:
send_interest	ccnd/ccnd.c	/^send_interest(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
send_interest_scratch	ccnd/ccnd_private.h	/^    struct ccn_charbuf *send_interest_scratch; \/**< for use by send_interest *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_charbuf
send_matching_data	cmd/ccnc.c	/^send_matching_data(struct ccnxchat_state *st)$/;"	f	file:
send_queue	ccnd/ccnd_private.h	/^    struct ccn_indexbuf *send_queue; \/**< accession numbers of pending content *\/$/;"	m	struct:content_queue	typeref:struct:content_queue::ccn_indexbuf
send_queue	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *send_queue; \/**< cookie numbers of pending content *\/$/;"	m	struct:content_queue	typeref:struct:content_queue::ccn_indexbuf
send_remote_unencapsulated	libexec/udplink.c	/^send_remote_unencapsulated(int s, struct addrinfo *r, unsigned char *buf, size_t start, size_t length) {$/;"	f
sender	ccnd/ccnd_private.h	/^    struct ccn_scheduled_event *sender;$/;"	m	struct:content_queue	typeref:struct:content_queue::ccn_scheduled_event
sender	ccnr/ccnr_private.h	/^    struct ccn_scheduled_event *sender;$/;"	m	struct:content_queue	typeref:struct:content_queue::ccn_scheduled_event
sendface	ccnd/ccnd_private.h	/^    unsigned sendface;          \/**< faceid for sending (maybe == faceid) *\/$/;"	m	struct:face
sending	include/ccn/sockcreate.h	/^    int sending;    \/**< file descriptor to use for output (send) *\/$/;"	m	struct:ccn_sockets
sending_fd	ccnd/ccnd.c	/^sending_fd(struct ccnd_handle *h, struct face *face)$/;"	f	file:
sending_fd	ccnr/ccnr_io.c	/^sending_fd(struct ccnr_handle *h, struct fdholder *fdholder)$/;"	f	file:
sendtime	cmd/ccncatchunks2.c	/^    unsigned sendtime;$/;"	m	struct:mydata	file:
sendtime_slot	cmd/ccncatchunks2.c	/^    unsigned sendtime_slot;$/;"	m	struct:mydata	file:
sent	ccnr/ccnr_private.h	/^    int sent;                   \/**< leading faceids of outbound processed *\/$/;"	m	struct:propagating_entry
sent	cmd/ccnc.c	/^    int sent;                   \/* Number of times sent *\/$/;"	m	struct:cs_entry	file:
seqfunc	lib/ccn_bulkdata.c	/^    ccn_seqfunc *seqfunc;           \/* the sequence number scheme *\/$/;"	m	struct:bulkdata	file:
seqfunc_param	lib/ccn_bulkdata.c	/^    void *seqfunc_param;            \/* parameters thereto, if needed *\/$/;"	m	struct:bulkdata	file:
seqnum	lib/ccn_seqwriter.c	/^    uintmax_t seqnum;$/;"	m	struct:ccn_seqwriter	file:
sequenced_name	cmd/ccncatchunks2.c	/^sequenced_name(struct mydata *md, uintmax_t seq)$/;"	f	file:
sequenced_name	lib/ccn_fetch.c	/^sequenced_name(struct ccn_charbuf *basename, seg_t seq) {$/;"	f	file:
seqw_incoming_interest	lib/ccn_seqwriter.c	/^seqw_incoming_interest($/;"	f	file:
seqw_next_cob	lib/ccn_seqwriter.c	/^seqw_next_cob(struct ccn_seqwriter *w)$/;"	f	file:
serial	ccnd/ccnd_private.h	/^    unsigned serial;                \/**< used for logging *\/$/;"	m	struct:interest_entry
service_ccnb	ccnd/ccnd_private.h	/^    struct ccn_charbuf *service_ccnb; \/**< for local service discovery *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_charbuf
service_ccnb	ccnr/ccnr_private.h	/^    struct ccn_charbuf *service_ccnb; \/**< for local service discovery *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_charbuf
setCovered	sync/SyncActions.c	/^setCovered(struct SyncHashCacheEntry *ce) {$/;"	f	file:
setCovered	sync/sync_diff.c	/^setCovered(struct SyncHashCacheEntry *ce) {$/;"	f	file:
setCurrentHash	sync/sync_api.c	/^setCurrentHash(struct SyncRootStruct *root, struct SyncHashCacheEntry *ce) {$/;"	f	file:
setFence	sync/SyncActions.c	/^setFence(struct SyncBaseStruct *base) {$/;"	f	file:
set_content_timer	ccnd/ccnd.c	/^set_content_timer(struct ccnd_handle *h, struct content_entry *content,$/;"	f	file:
set_multicast_socket_options	lib/ccn_sockcreate.c	/^set_multicast_socket_options(int socket_r, int socket_w,$/;"	f	file:
set_multicast_sockopt	libexec/udplink.c	/^set_multicast_sockopt(int socket_r, int socket_w, struct addrinfo *ai, struct options *opt)$/;"	f
set_stdout	cmd/ccn_ccnbtoxml.c	/^set_stdout(struct ccn_decoder *d, enum callback_kind kind, void *data)$/;"	f	file:
setpos	lib/hashtb.c	/^setpos(struct hashtb_enumerator *hte, struct node **pp)$/;"	f	file:
setscope	cmd/ccnsnew.c	/^static int setscope = 0;$/;"	v	file:
setup_multicast	ccnd/ccnd.c	/^setup_multicast(struct ccnd_handle *h, struct ccn_face_instance *face_instance,$/;"	f	file:
sha256_ctx	lib/ccn_digest.c	/^    SHA256_CTX sha256_ctx;$/;"	m	struct:ccn_digest	file:
sha256ec_md	lib/ccn_signing.c	/^static const EVP_MD sha256ec_md=$/;"	v	file:
shortDelayMicros	sync/SyncActions.c	/^static int shortDelayMicros = 1000;     \/\/ short delay for quick reschedule$/;"	v	file:
shortDelayMicros	sync/sync_diff.c	/^static int shortDelayMicros = 1000;     \/\/ short delay for quick reschedule$/;"	v	file:
showCacheEntry	sync/SyncActions.c	/^showCacheEntry(struct SyncRootStruct *root, char *dst, int lim,$/;"	f	file:
showCacheEntry1	sync/SyncActions.c	/^showCacheEntry1(struct SyncRootStruct *root, char *here, char *msg,$/;"	f	file:
showCacheEntry1	sync/sync_diff.c	/^showCacheEntry1(struct SyncRootStruct *root, char *here, char *msg,$/;"	f	file:
showCacheEntry2	sync/SyncActions.c	/^showCacheEntry2(struct SyncRootStruct *root, char *here, char *msg,$/;"	f	file:
showCacheEntry2	sync/sync_diff.c	/^showCacheEntry2(struct SyncRootStruct *root, char *here, char *msg,$/;"	f	file:
showHighLevel	sync/SyncActions.c	/^static int showHighLevel = 1;           \/\/ governs high-level comments$/;"	v	file:
shutdown_client_fd	ccnd/ccnd.c	/^shutdown_client_fd(struct ccnd_handle *h, int fd)$/;"	f	file:
shuttle	lib/lned.c	/^shuttle(int peer, const char *prompt)$/;"	f	file:
sibling_of	lib/ccn_signing.c	308;"	d	file:
side	sync/sync_diff.h	/^    enum sync_diff_side side;$/;"	m	struct:sync_diff_fetch_data	typeref:enum:sync_diff_fetch_data::sync_diff_side
sigc_from_digest_and_pkey	lib/ccn_signing.c	/^sigc_from_digest_and_pkey(struct ccn_sigc *sigc, const char *digest, const struct ccn_pkey *pkey)$/;"	f	file:
simple_get_data	lib/ccn_client.c	/^struct simple_get_data {$/;"	s	file:
siphash_2_4	lib/siphash24.c	/^siphash_2_4(const unsigned char *in, size_t inlen, const unsigned char *k)$/;"	f
size	ccnd/ccnd_private.h	/^    int size;                   \/**< Size of ContentObject *\/$/;"	m	struct:content_entry
size	ccnd/ccnd_private.h	/^    unsigned size;                  \/** size of key *\/$/;"	m	struct:nonce_entry
size	ccnd/ccnd_private.h	/^    unsigned size;                  \/**< size of interest message *\/$/;"	m	struct:interest_entry
size	ccnr/ccnr_private.h	/^    unsigned size;              \/**< size in bytes of interest_msg *\/$/;"	m	struct:propagating_entry
size	ccnr/ccnr_store.c	/^    int size;                   \/**< size of ContentObject *\/$/;"	m	struct:content_entry	file:
size	cmd/dataresponsetest.c	/^        size_t	size;$/;"	m	struct:handlerstate::handlerstateitem	file:
size	include/ccn/ccn.h	/^    size_t size;$/;"	m	struct:ccn_buf_decoder
size	lib/ccn_client.c	/^    size_t size;                 \/* its size in bytes *\/$/;"	m	struct:expressed_interest	file:
sk_ASN1_OCTET_STRING_delete	include/ccn/merklepathasn1.h	44;"	d
sk_ASN1_OCTET_STRING_delete_ptr	include/ccn/merklepathasn1.h	45;"	d
sk_ASN1_OCTET_STRING_dup	include/ccn/merklepathasn1.h	48;"	d
sk_ASN1_OCTET_STRING_find	include/ccn/merklepathasn1.h	42;"	d
sk_ASN1_OCTET_STRING_find_ex	include/ccn/merklepathasn1.h	43;"	d
sk_ASN1_OCTET_STRING_free	include/ccn/merklepathasn1.h	35;"	d
sk_ASN1_OCTET_STRING_insert	include/ccn/merklepathasn1.h	46;"	d
sk_ASN1_OCTET_STRING_is_sorted	include/ccn/merklepathasn1.h	53;"	d
sk_ASN1_OCTET_STRING_new	include/ccn/merklepathasn1.h	33;"	d
sk_ASN1_OCTET_STRING_new_null	include/ccn/merklepathasn1.h	34;"	d
sk_ASN1_OCTET_STRING_num	include/ccn/merklepathasn1.h	36;"	d
sk_ASN1_OCTET_STRING_pop	include/ccn/merklepathasn1.h	51;"	d
sk_ASN1_OCTET_STRING_pop_free	include/ccn/merklepathasn1.h	49;"	d
sk_ASN1_OCTET_STRING_push	include/ccn/merklepathasn1.h	40;"	d
sk_ASN1_OCTET_STRING_set	include/ccn/merklepathasn1.h	38;"	d
sk_ASN1_OCTET_STRING_set_cmp_func	include/ccn/merklepathasn1.h	47;"	d
sk_ASN1_OCTET_STRING_shift	include/ccn/merklepathasn1.h	50;"	d
sk_ASN1_OCTET_STRING_sort	include/ccn/merklepathasn1.h	52;"	d
sk_ASN1_OCTET_STRING_unshift	include/ccn/merklepathasn1.h	41;"	d
sk_ASN1_OCTET_STRING_value	include/ccn/merklepathasn1.h	37;"	d
sk_ASN1_OCTET_STRING_zero	include/ccn/merklepathasn1.h	39;"	d
skipToHash	sync/SyncActions.h	/^    int skipToHash;$/;"	m	struct:SyncActionData
skipdim	include/ccn/nametree.h	/^    short skipdim;          \/**< dimension of skiplinks array *\/$/;"	m	struct:ccny
skiplinks	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *skiplinks; \/**< skiplist for content-ordered ops *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_indexbuf
skiplinks	include/ccn/nametree.h	/^    struct ccny *skiplinks[1]; \/**< skiplist links (flex array) *\/$/;"	m	struct:ccny	typeref:struct:ccny::ccny
sliceBusy	sync/SyncPrivate.h	/^    int sliceBusy;$/;"	m	struct:SyncPrivate
sliceBusy	sync/SyncPrivate.h	/^    int sliceBusy;$/;"	m	struct:SyncRootPrivate
sliceCmdPrefix	sync/SyncPrivate.h	/^    struct ccn_charbuf *sliceCmdPrefix;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::ccn_charbuf
sliceCoding	sync/SyncRoot.h	/^    struct ccn_charbuf *sliceCoding;      \/**< ccnb encoding for the description *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::ccn_charbuf
sliceEnum	sync/SyncPrivate.h	/^    int sliceEnum;$/;"	m	struct:SyncPrivate
sliceHash	sync/SyncRoot.h	/^    struct ccn_charbuf *sliceHash;        \/**< the raw hash of the sliceCoding *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::ccn_charbuf
slice_parse	sync/sync_api.c	/^slice_parse(struct ccns_slice *s, const unsigned char *p, size_t size) {$/;"	f	file:
sliver	ccnd/ccnd_private.h	/^    int sliver;                     \/**< extra microseconds beyond wtnow *\/$/;"	m	struct:ccnd_handle
small	sync/SyncHashCache.h	/^    uint32_t small;                     \/**< the small hash *\/$/;"	m	struct:SyncHashCacheEntry
sock	lib/ccn_client.c	/^    int sock;$/;"	m	struct:ccn	file:
solicit_response	ccnd/ccnd_internal_client.c	/^solicit_response(struct ccn_closure *selfp,$/;"	f	file:
sort	sync/SyncActions.c	/^    struct SyncNameAccum *sort;$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncNameAccum	file:
sort	sync/SyncTest.c	/^    int sort;$/;"	m	struct:SyncTestParms	file:
sorter	sync/IndexSorter.h	/^    IndexSorter_sorter *sorter;        \/\/ the sorting function$/;"	m	struct:IndexSorter_Struct
source_address	include/ccn/sockcreate.h	/^    const char *source_address; \/**< may be needed for multicast *\/$/;"	m	struct:ccn_sockdescr
sp_flags	include/ccn/ccn.h	/^    int sp_flags;$/;"	m	struct:ccn_signing_params
split_my_excludes	cmd/ccnslurp.c	/^split_my_excludes(struct ccn_closure *selfp)$/;"	f	file:
split_my_excludes	lib/ccn_traverse.c	/^split_my_excludes(struct ccn_closure *selfp)$/;"	f	file:
splits	sync/SyncTest.c	/^    int *splits;$/;"	m	struct:SyncTestParms	file:
src	ccnd/ccnd_private.h	/^    unsigned src;                \/**< faceid of recent content source *\/$/;"	m	struct:nameprefix_entry
src	ccnr/ccnr_private.h	/^    unsigned src;                \/**< filedesc of recent content source *\/$/;"	m	struct:nameprefix_entry
src	cmd/ccn_fetch_test.c	/^	string src;$/;"	m	struct:MyParms	file:
ss	lib/ccnbtreetest.c	/^    unsigned char ss[64];$/;"	m	struct:node_example	file:
ss	lib/ccnbtreetest.c	/^    unsigned char ss[CCN_BT_SIZE_UNITS];$/;"	m	struct:root_example	file:
sstate	cmd/ccn_ccnbtoxml.c	/^    int sstate;$/;"	m	struct:ccn_decoder	file:
stable	ccnr/ccnr_private.h	/^    off_t stable;                   \/**< repoFile1 size at shutdown *\/$/;"	m	struct:ccnr_handle
stableEnabled	sync/SyncPrivate.h	/^    int stableEnabled;$/;"	m	struct:SyncPrivate
stack	cmd/ccn_ccnbtoxml.c	/^    struct ccn_decoder_stack_item *stack;$/;"	m	struct:ccn_decoder	typeref:struct:ccn_decoder::ccn_decoder_stack_item	file:
stack	sync/SyncTreeWorker.h	/^    struct SyncTreeWorkerEntry *stack;$/;"	m	struct:SyncTreeWorkerHead	typeref:struct:SyncTreeWorkerHead::SyncTreeWorkerEntry
staletime	ccnd/ccnd_private.h	/^    int staletime;              \/**< Time in seconds, relative to starttime *\/$/;"	m	struct:content_entry
stampnow	cmd/ccnc.c	/^stampnow(struct ccn_charbuf *c)$/;"	f	file:
start	cmd/ccn_xmltoccnb.c	/^    size_t start;$/;"	m	struct:ccn_encoder_stack_item	file:
start	include/ccn/header.h	/^    uintmax_t start;$/;"	m	struct:ccn_header
start	sync/SyncNode.h	/^    ssize_t start;      \/**< start of element encoding *\/$/;"	m	struct:SyncNodeElem
startClock	lib/ccn_fetch.c	/^	TimeMarker startClock;$/;"	m	struct:localClosure	file:
startTime	cmd/ccn_fetch_test.c	/^	uint64_t startTime;$/;"	m	struct:TestElemStruct	file:
startTime	sync/SyncActions.c	/^    int64_t startTime;            \/**< time marker for compare data creation *\/$/;"	m	struct:SyncCompareData	file:
startTime	sync/SyncActions.c	/^    int64_t startTime;$/;"	m	struct:SyncUpdateData	file:
startTime	sync/SyncActions.h	/^    int64_t startTime;$/;"	m	struct:SyncActionData
startTime	sync/SyncTest.c	/^    struct timeval startTime;$/;"	m	struct:SyncTestParms	typeref:struct:SyncTestParms::timeval	file:
startTime	sync/sync_api.c	/^    int64_t startTime;$/;"	m	struct:ccns_handle	file:
startTime	sync/sync_diff.h	/^    int64_t startTime;              \/**< time marker for sync_diff_start *\/$/;"	m	struct:sync_diff_data
startTime	sync/sync_diff.h	/^    int64_t startTime;$/;"	m	struct:sync_diff_fetch_data
startTime	sync/sync_diff.h	/^    int64_t startTime;$/;"	m	struct:sync_update_data
start_ccnd	ccnd/android_main.c	/^start_ccnd(void)$/;"	f
start_ccnr	ccnr/android_main.c	/^start_ccnr(void)$/;"	f
start_interest	sync/sync_api.c	/^start_interest(struct sync_diff_data *diff_data) {$/;"	f	file:
start_node_fetch	sync/sync_diff.c	/^start_node_fetch(struct sync_diff_data *sdd,$/;"	f	file:
start_round	sync/sync_api.c	/^start_round(struct ccns_handle *ch, int micros) {$/;"	f	file:
start_tv	cmd/ccncatchunks2.c	/^    struct timeval start_tv;$/;"	m	struct:mydata	typeref:struct:mydata::timeval	file:
start_write_scope_limit	ccnr/ccnr_private.h	/^    unsigned start_write_scope_limit;    \/**< Scope on start-write must be <= this value.  3 indicates unlimited *\/$/;"	m	struct:ccnr_handle
starting_cookie	ccnr/ccnr_private.h	/^    ccnr_cookie starting_cookie;$/;"	m	struct:enum_state
starttime	ccnd/ccnd_private.h	/^    long starttime;                 \/**< ccnd start time, in seconds *\/$/;"	m	struct:ccnd_handle
starttime	ccnr/ccnr_private.h	/^    long starttime;                 \/**< ccnr start time, in seconds *\/$/;"	m	struct:ccnr_handle
starttime_usec	ccnd/ccnd_private.h	/^    unsigned starttime_usec;        \/**< ccnd start time fractional part *\/$/;"	m	struct:ccnd_handle
starttime_usec	ccnr/ccnr_private.h	/^    unsigned starttime_usec;        \/**< ccnr start time fractional part *\/$/;"	m	struct:ccnr_handle
startupbytes	ccnr/ccnr_private.h	/^    off_t startupbytes;             \/**< repoFile1 size at startup *\/$/;"	m	struct:ccnr_handle
statchanged	cmd/ccnfilewatch.c	/^statchanged(struct stat *prev, struct stat *curr)$/;"	f	file:
state	ccnd/ccnd_private.h	/^    int state;$/;"	m	struct:ccn_strategy
state	cmd/ccn_ccnbtoxml.c	/^    int state;$/;"	m	struct:ccn_decoder	file:
state	include/ccn/coding.h	/^    int state;              \/**< Decoder state *\/$/;"	m	struct:ccn_skeleton_decoder
state	sync/SyncActions.c	/^    enum SyncCompareState state;    \/**< summary state of comparison *\/$/;"	m	struct:SyncCompareData	typeref:enum:SyncCompareData::SyncCompareState	file:
state	sync/SyncActions.c	/^    enum SyncUpdateState state;$/;"	m	struct:SyncUpdateData	typeref:enum:SyncUpdateData::SyncUpdateState	file:
state	sync/SyncActions.h	/^    enum SyncActionState state;$/;"	m	struct:SyncActionData	typeref:enum:SyncActionData::SyncActionState
state	sync/SyncHashCache.h	/^    enum SyncHashState state;           \/**< state bits *\/$/;"	m	struct:SyncHashCacheEntry	typeref:enum:SyncHashCacheEntry::SyncHashState
state	sync/SyncTreeWorker.h	/^    enum SyncTreeWorkerState state;$/;"	m	struct:SyncTreeWorkerHead	typeref:enum:SyncTreeWorkerHead::SyncTreeWorkerState
state	sync/sync_diff.h	/^    enum sync_diff_state state;     \/**< summary state of comparison *\/$/;"	m	struct:sync_diff_data	typeref:enum:sync_diff_data::sync_diff_state
state	sync/sync_diff.h	/^    enum sync_update_state state;$/;"	m	struct:sync_update_data	typeref:enum:sync_update_data::sync_update_state
stats	sync/SyncPrivate.h	/^    struct SyncRootStats *stats;$/;"	m	struct:SyncRootPrivate	typeref:struct:SyncRootPrivate::SyncRootStats
stdiologger	ccnd/ccnd_main.c	/^stdiologger(void *loggerdata, const char *format, va_list ap)$/;"	f	file:
stdiologger	ccnr/ccnr_main.c	/^stdiologger(void *loggerdata, const char *format, va_list ap)$/;"	f	file:
stop	sync/SyncNode.h	/^    ssize_t stop;       \/**< stop of element encoding *\/$/;"	m	struct:SyncNodeElem
stopTime	sync/SyncTest.c	/^    struct timeval stopTime;$/;"	m	struct:SyncTestParms	typeref:struct:SyncTestParms::timeval	file:
stop_tv	cmd/ccncatchunks2.c	/^    struct timeval stop_tv;$/;"	m	struct:mydata	typeref:struct:mydata::timeval	file:
store	ccnr/ccnr_proto.h	/^    struct ccn_charbuf *store;$/;"	m	struct:ccnr_parsed_policy	typeref:struct:ccnr_parsed_policy::ccn_charbuf
store	cmd/ccnlibtest.c	/^static struct mini_store store[N_POOLS];$/;"	v	typeref:struct:mini_store	file:
store	include/ccn/face_mgmt.h	/^    struct ccn_charbuf *store;$/;"	m	struct:ccn_face_instance	typeref:struct:ccn_face_instance::ccn_charbuf
store	include/ccn/reg_mgmt.h	/^    unsigned char store[48];$/;"	m	struct:ccn_forwarding_entry
storeFileStruct	sync/SyncTest.c	/^struct storeFileStruct {$/;"	s	file:
storeHandler	sync/SyncTest.c	/^storeHandler(struct ccn_closure *selfp,$/;"	f	file:
stored	sync/SyncTest.c	/^    int stored;$/;"	m	struct:storeFileStruct	file:
storing	sync/SyncHashCache.h	/^    struct SyncHashCacheEntry *storing; \/**< the next entry in the storing chain *\/$/;"	m	struct:SyncHashCacheEntry	typeref:struct:SyncHashCacheEntry::SyncHashCacheEntry
storingHead	sync/SyncPrivate.h	/^    struct SyncHashCacheEntry *storingHead;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncHashCacheEntry
storingTail	sync/SyncPrivate.h	/^    struct SyncHashCacheEntry *storingTail;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncHashCacheEntry
strategy	ccnd/ccnd_private.h	/^    struct ccn_strategy strategy;   \/**< state of strategy engine *\/$/;"	m	struct:interest_entry	typeref:struct:interest_entry::ccn_strategy
strategy_callout	ccnd/ccnd.c	/^strategy_callout(struct ccnd_handle *h,$/;"	f	file:
strategy_settimer	ccnd/ccnd.c	/^strategy_settimer(struct ccnd_handle *h, struct interest_entry *ie,$/;"	f	file:
strategy_timer	ccnd/ccnd.c	/^strategy_timer(struct ccn_schedule *sched,$/;"	f	file:
streams	lib/ccn_fetch.c	/^	struct ccn_fetch_stream **streams;$/;"	m	struct:ccn_fetch	typeref:struct:ccn_fetch::ccn_fetch_stream	file:
string	cmd/ccn_fetch_test.c	/^typedef char *string;$/;"	t	file:
stringstack	cmd/ccn_ccnbtoxml.c	/^    struct ccn_charbuf *stringstack;$/;"	m	struct:ccn_decoder	typeref:struct:ccn_decoder::ccn_charbuf	file:
stuff_and_send	ccnd/ccnd.c	/^stuff_and_send(struct ccnd_handle *h, struct face *face,$/;"	f	file:
stuff_link_check	ccnd/ccnd.c	/^stuff_link_check(struct ccnd_handle *h,$/;"	f	file:
subdirs	Android.mk	/^subdirs := $(addprefix $(LOCAL_PATH)\/,$(addsuffix \/Android.mk, \\$/;"	m
surplus	ccnd/ccnd_private.h	/^    int surplus;                \/**< sends since last successful recv *\/$/;"	m	struct:face
symmetric_key	lib/ccn_aes_keystore.c	/^    EVP_PKEY *symmetric_key;$/;"	m	struct:ccn_keystore	file:
syncActionMethods	sync/SyncActions.c	/^struct sync_plumbing_sync_methods syncActionMethods = {$/;"	v	typeref:struct:sync_plumbing_sync_methods
syncActionsPrivate	sync/SyncPrivate.h	/^    int syncActionsPrivate;$/;"	m	struct:SyncPrivate
syncScope	sync/SyncPrivate.h	/^    int syncScope;                      \/*< scope to be used for sync *\/$/;"	m	struct:SyncRootPrivate
syncScope	sync/SyncPrivate.h	/^    int syncScope;              \/*< default sync scope *\/$/;"	m	struct:SyncPrivate
syncScope	sync/SyncTest.c	/^    int syncScope;$/;"	m	struct:SyncTestParms	file:
sync_base	ccnr/ccnr_private.h	/^    struct SyncBaseStruct *sync_base;$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::SyncBaseStruct
sync_cb	cmd/ccnsyncwatch.c	/^sync_cb(struct ccns_name_closure *nc,$/;"	f
sync_client_methods	ccnr/ccnr_init.c	/^static struct sync_plumbing_client_methods sync_client_methods = {$/;"	v	typeref:struct:sync_plumbing_client_methods	file:
sync_data	sync/sync_plumbing.h	/^    void *sync_data;$/;"	m	struct:sync_plumbing
sync_diff_X	sync/sync_diff.h	/^    sync_diff_X,$/;"	e	enum:sync_diff_side
sync_diff_Y	sync/sync_diff.h	/^    sync_diff_Y$/;"	e	enum:sync_diff_side
sync_diff_add_closure	sync/sync_diff.h	/^struct sync_diff_add_closure {$/;"	s
sync_diff_data	sync/sync_diff.h	/^struct sync_diff_data {$/;"	s
sync_diff_fetch_data	sync/sync_diff.h	/^struct sync_diff_fetch_data {$/;"	s
sync_diff_get_closure	sync/sync_diff.h	/^struct sync_diff_get_closure {$/;"	s
sync_diff_note_node	sync/sync_diff.c	/^sync_diff_note_node(struct sync_diff_data *sdd,$/;"	f
sync_diff_side	sync/sync_diff.h	/^enum sync_diff_side {$/;"	g
sync_diff_start	sync/sync_diff.c	/^sync_diff_start(struct sync_diff_data *sdd) {$/;"	f
sync_diff_state	sync/sync_diff.h	/^enum sync_diff_state {$/;"	g
sync_diff_state_busy	sync/sync_diff.h	/^    sync_diff_state_busy,$/;"	e	enum:sync_diff_state
sync_diff_state_done	sync/sync_diff.h	/^    sync_diff_state_done$/;"	e	enum:sync_diff_state
sync_diff_state_error	sync/sync_diff.h	/^    sync_diff_state_error,$/;"	e	enum:sync_diff_state
sync_diff_state_init	sync/sync_diff.h	/^    sync_diff_state_init,$/;"	e	enum:sync_diff_state
sync_diff_state_preload	sync/sync_diff.h	/^    sync_diff_state_preload,$/;"	e	enum:sync_diff_state
sync_diff_stop	sync/sync_diff.c	/^sync_diff_stop(struct sync_diff_data *sdd) {$/;"	f
sync_done_closure	sync/sync_diff.h	/^struct sync_done_closure {$/;"	s
sync_enumeration_state	ccnr/ccnr_sync.c	/^struct sync_enumeration_state {$/;"	s	file:
sync_methods	sync/SyncPrivate.h	/^    struct sync_plumbing_sync_methods *sync_methods;$/;"	m	struct:SyncMethodsList	typeref:struct:SyncMethodsList::sync_plumbing_sync_methods
sync_methods	sync/sync_plumbing.h	/^    struct sync_plumbing_sync_methods *sync_methods;$/;"	m	struct:sync_plumbing	typeref:struct:sync_plumbing::sync_plumbing_sync_methods
sync_msg	sync/SyncBase.c	/^sync_msg(struct SyncBaseStruct *base, const char *fmt, ...) {$/;"	f
sync_notify	sync/sync_plumbing.h	/^    int (* sync_notify)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_sync_methods
sync_notify_default	sync/SyncBase.c	/^sync_notify_default(struct sync_plumbing *sd,$/;"	f	file:
sync_notify_for_actions	sync/SyncActions.c	/^sync_notify_for_actions(struct sync_plumbing *sd,$/;"	f	file:
sync_plumbing	ccnr/ccnr_private.h	/^    struct sync_plumbing *sync_plumbing;  \/**< encapsulates methods and data *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::sync_plumbing
sync_plumbing	sync/sync_api.c	/^    struct sync_plumbing *sync_plumbing;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::sync_plumbing	file:
sync_plumbing	sync/sync_plumbing.h	/^struct sync_plumbing {$/;"	s
sync_plumbing_client_methods	sync/sync_plumbing.h	/^struct sync_plumbing_client_methods {$/;"	s
sync_plumbing_sync_methods	sync/sync_plumbing.h	/^struct sync_plumbing_sync_methods {$/;"	s
sync_start	sync/sync_plumbing.h	/^    int (* sync_start)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_sync_methods
sync_start_default	sync/SyncBase.c	/^sync_start_default(struct sync_plumbing *sd,$/;"	f	file:
sync_start_for_actions	sync/SyncActions.c	/^sync_start_for_actions(struct sync_plumbing *sd,$/;"	f	file:
sync_stop	sync/sync_plumbing.h	/^    void (* sync_stop)(struct sync_plumbing *sd,$/;"	m	struct:sync_plumbing_sync_methods
sync_stop_default	sync/SyncBase.c	/^sync_stop_default(struct sync_plumbing *sd,$/;"	f
sync_stop_for_actions	sync/SyncActions.c	/^sync_stop_for_actions(struct sync_plumbing *sd,$/;"	f	file:
sync_update_data	sync/sync_diff.h	/^struct sync_update_data {$/;"	s
sync_update_start	sync/sync_diff.c	/^sync_update_start(struct sync_update_data *ud, struct SyncNameAccum *acc) {$/;"	f
sync_update_state	sync/sync_diff.h	/^enum sync_update_state {$/;"	g
sync_update_state_busy	sync/sync_diff.h	/^    sync_update_state_busy,$/;"	e	enum:sync_update_state
sync_update_state_done	sync/sync_diff.h	/^    sync_update_state_done$/;"	e	enum:sync_update_state
sync_update_state_error	sync/sync_diff.h	/^    sync_update_state_error,$/;"	e	enum:sync_update_state
sync_update_state_init	sync/sync_diff.h	/^    sync_update_state_init,$/;"	e	enum:sync_update_state
sync_update_stop	sync/sync_diff.c	/^sync_update_stop(struct sync_update_data *ud) {$/;"	f
syncdebug	ccnr/ccnr_private.h	/^    int syncdebug;                  \/**< For controlling debug output from sync *\/$/;"	m	struct:ccnr_handle
sz	lib/ccn_digest.c	/^    unsigned short sz;$/;"	m	struct:ccn_digest	file:
t	lib/ccnbtreetest.c	/^    struct ccn_btree_entry_trailer t;$/;"	m	struct:entry_example	typeref:struct:entry_example::ccn_btree_entry_trailer	file:
tagdict	cmd/ccn_ccnbtoxml.c	/^    const struct ccn_dict_entry *tagdict;$/;"	m	struct:ccn_decoder	typeref:struct:ccn_decoder::ccn_dict_entry	file:
tagdict	cmd/ccn_xmltoccnb.c	/^    const struct ccn_dict_entry *tagdict;$/;"	m	struct:ccn_encoder	typeref:struct:ccn_encoder::ccn_dict_entry	file:
tagdict_count	cmd/ccn_ccnbtoxml.c	/^    int tagdict_count;$/;"	m	struct:ccn_decoder	file:
tagdict_count	cmd/ccn_xmltoccnb.c	/^    int tagdict_count;$/;"	m	struct:ccn_encoder	file:
tagstate	cmd/ccn_ccnbtoxml.c	/^    int tagstate;$/;"	m	struct:ccn_decoder	file:
takedown	lib/lned.c	/^takedown(int n, int r)$/;"	f	file:
tap	ccnd/ccnd_private.h	/^    struct ccn_indexbuf *tap;    \/**< faceids to forward to as tap *\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ccn_indexbuf
tap	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *tap;    \/**< faceids to forward to as tap*\/$/;"	m	struct:nameprefix_entry	typeref:struct:nameprefix_entry::ccn_indexbuf
tap	lib/ccn_client.c	/^    int tap;$/;"	m	struct:ccn	file:
target	lib/ccn_client.c	/^    int target;                  \/* how many we want outstanding (0 or 1) *\/$/;"	m	struct:expressed_interest	file:
target	sync/SyncTest.c	/^    char *target;$/;"	m	struct:SyncTestParms	file:
templ	cmd/ccncatchunks2.c	/^    struct ccn_charbuf *templ;$/;"	m	struct:mydata	typeref:struct:mydata::ccn_charbuf	file:
template	sync/SyncTest.c	/^    struct ccn_charbuf *template;$/;"	m	struct:storeFileStruct	typeref:struct:storeFileStruct::ccn_charbuf	file:
template_ccnb	include/ccn/ccn.h	/^    struct ccn_charbuf *template_ccnb;$/;"	m	struct:ccn_signing_params	typeref:struct:ccn_signing_params::ccn_charbuf
term_width	lib/lned.c	/^term_width(int fd)$/;"	f	file:
test1	cmd/ccn_ccnbtoxml.c	/^unsigned char test1[] = {$/;"	v
testEncodeDecode	sync/SyncTest.c	/^testEncodeDecode(struct SyncTestParms *parms) {$/;"	f	file:
testGenComposite	sync/SyncTest.c	/^testGenComposite(struct SyncBaseStruct *base, int nRefs) {$/;"	f	file:
testReadBuilder	sync/SyncTest.c	/^testReadBuilder(struct SyncTestParms *parms) {$/;"	f	file:
testReader	sync/SyncTest.c	/^testReader(struct SyncTestParms *parms) {$/;"	f	file:
testRootBasic	sync/SyncTest.c	/^testRootBasic(struct SyncTestParms *parms) {$/;"	f	file:
testRootCoding	sync/SyncTest.c	/^testRootCoding(struct SyncTestParms *parms, struct SyncRootStruct *root) {$/;"	f	file:
testRootLookup	sync/SyncTest.c	/^testRootLookup (struct SyncTestParms *parms, struct SyncRootStruct *root,$/;"	f	file:
test_basic_btree_delete_entry	lib/ccnbtreetest.c	/^test_basic_btree_delete_entry(void)$/;"	f
test_basic_btree_insert_entry	lib/ccnbtreetest.c	/^test_basic_btree_insert_entry(void)$/;"	f
test_btree_chknode	lib/ccnbtreetest.c	/^test_btree_chknode(void)$/;"	f
test_btree_compare	lib/ccnbtreetest.c	/^test_btree_compare(void)$/;"	f
test_btree_init	lib/ccnbtreetest.c	/^test_btree_init(void)$/;"	f
test_btree_inserts_from_stdin	lib/ccnbtreetest.c	/^test_btree_inserts_from_stdin(void)$/;"	f
test_btree_io	lib/ccnbtreetest.c	/^test_btree_io(void)$/;"	f	file:
test_btree_key_fetch	lib/ccnbtreetest.c	/^test_btree_key_fetch(void)$/;"	f
test_btree_lockfile	lib/ccnbtreetest.c	/^test_btree_lockfile(void)$/;"	f
test_btree_lookup	lib/ccnbtreetest.c	/^test_btree_lookup(void)$/;"	f
test_btree_searchnode	lib/ccnbtreetest.c	/^test_btree_searchnode(void)$/;"	f
test_directory_creation	lib/ccnbtreetest.c	/^test_directory_creation(void)$/;"	f	file:
test_flatname	lib/ccnbtreetest.c	/^test_flatname(void)$/;"	f
test_insert_content	lib/ccnbtreetest.c	/^test_insert_content(void)$/;"	f
test_inserts_from_stdin	lib/nametreetest.c	/^test_inserts_from_stdin(void)$/;"	f
test_structure_sizes	lib/ccnbtreetest.c	/^test_structure_sizes(void)$/;"	f
test_vectors	lib/siphash24.c	/^test_vectors()$/;"	f
testhelp_count_matches	lib/ccnbtreetest.c	/^testhelp_count_matches(struct ccn_btree *btree,$/;"	f	file:
testtick	lib/ccn_schedule.c	/^testtick(struct ccn_schedule *sched)$/;"	f	file:
ticktock	ccnd/ccnd_private.h	/^    struct ccn_gettime ticktock;    \/**< our time generator *\/$/;"	m	struct:ccnd_handle	typeref:struct:ccnd_handle::ccn_gettime
ticktock	ccnr/ccnr_private.h	/^    struct ccn_gettime ticktock;    \/**< our time generator *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_gettime
time_leap	lib/ccn_schedule.c	/^    int time_leap;      \/* number of times clock took a large jump *\/$/;"	m	struct:ccn_schedule	file:
time_ran_backward	lib/ccn_schedule.c	/^    int time_ran_backward; \/* number of times clock ran backwards *\/$/;"	m	struct:ccn_schedule	file:
timeout	lib/ccn_client.c	/^    int timeout;$/;"	m	struct:ccn	file:
timeoutSeg	lib/ccn_fetch.c	/^	seg_t timeoutSeg;		\/\/ the lowest timeout segment seen$/;"	m	struct:ccn_fetch_stream	file:
timeoutUSecs	lib/ccn_fetch.c	/^	intmax_t timeoutUSecs;	\/\/ microseconds for interest timeout$/;"	m	struct:ccn_fetch_stream	file:
timeouts	cmd/ccncatchunks2.c	/^    intmax_t timeouts;$/;"	m	struct:mydata	file:
timeouts	cmd/ccnsnew.c	/^    int timeouts;$/;"	m	struct:mydata	file:
timeoutsSeen	lib/ccn_fetch.c	/^	intmax_t timeoutsSeen;$/;"	m	struct:ccn_fetch_stream	file:
timex	include/ccn/btree_content.h	/^    unsigned char timex[6];     \/**< Timestamp from content object *\/$/;"	m	struct:ccn_btree_content_payload
toclean	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *toclean;   \/**< for index_cleaner use *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_indexbuf
token_index	include/ccn/coding.h	/^    size_t token_index;     \/**< Starting index of most-recent token *\/$/;"	m	struct:ccn_skeleton_decoder
topo	sync/sync_api.c	/^    struct ccn_charbuf *topo;$/;"	m	struct:ccns_slice	typeref:struct:ccns_slice::ccn_charbuf	file:
topoAccum	sync/SyncPrivate.h	/^    struct SyncNameAccum *topoAccum;$/;"	m	struct:SyncPrivate	typeref:struct:SyncPrivate::SyncNameAccum
topoPrefix	sync/SyncRoot.h	/^    struct ccn_charbuf *topoPrefix;       \/**< Sync Protocol topo prefix *\/$/;"	m	struct:SyncRootStruct	typeref:struct:SyncRootStruct::ccn_charbuf
toss_in_cs	cmd/ccnc.c	/^toss_in_cs(struct ccnxchat_state *st, const unsigned char *p, size_t size)$/;"	f	file:
toss_in_pit	cmd/ccnc.c	/^toss_in_pit(struct ccnxchat_state *st, const unsigned char *p,$/;"	f	file:
toss_white	cmd/ccn_xmltoccnb.c	/^    int toss_white;$/;"	m	struct:ccn_encoder	file:
total	ccnd/ccnd_stats.c	/^    uintmax_t total;$/;"	m	struct:ccnd_meter	file:
total	ccnr/ccnr_stats.c	/^    uintmax_t total;$/;"	m	struct:ccnr_meter	file:
total_flood_control	ccnr/ccnr_stats.c	/^    long total_flood_control;      \/* done propagating, still recorded *\/$/;"	m	struct:ccnr_stats	file:
total_interest_counts	ccnd/ccnd_stats.c	/^    long total_interest_counts;$/;"	m	struct:ccnd_stats	file:
total_interest_counts	ccnr/ccnr_stats.c	/^    long total_interest_counts;$/;"	m	struct:ccnr_stats	file:
trailer	include/ccn/btree.h	/^    struct ccn_btree_entry_trailer trailer;$/;"	m	struct:ccn_btree_internal_entry	typeref:struct:ccn_btree_internal_entry::ccn_btree_entry_trailer
trailer	include/ccn/btree_content.h	/^    struct ccn_btree_entry_trailer trailer;$/;"	m	struct:ccn_btree_content_entry	typeref:struct:ccn_btree_content_entry::ccn_btree_entry_trailer
treeDepth	sync/SyncNode.h	/^    unsigned treeDepth;   \/**< max tree depth (includes this node) *\/$/;"	m	struct:SyncNodeComposite
tries	ccnr/ccnr_proto.h	/^    int tries; \/** counter so we can give up eventually *\/$/;"	m	struct:ccnr_expect_content
trim_rover	ccnr/ccnr_private.h	/^    ccnr_cookie trim_rover;     \/**< where we left off trimming *\/$/;"	m	struct:ccnr_handle
try_node_split	sync/sync_diff.c	/^try_node_split(struct sync_update_data *ud) {$/;"	f	file:
try_tcp_instead	ccnr/ccnr_init.c	/^try_tcp_instead(int fd)$/;"	f	file:
tt_name	lib/skel_decode_test.c	/^static const char *tt_name[8] = {$/;"	v	file:
ttpad	include/ccn/btree_content.h	/^    unsigned char ttpad[1];     \/**< Reserved until 20 Aug 4147 07:32:16 GMT *\/$/;"	m	struct:ccn_btree_content_payload
tts_default	ccnd/ccnd_private.h	/^    int tts_default;                \/**< CCND_DEFAULT_TIME_TO_STALE (seconds) *\/$/;"	m	struct:ccnd_handle
tts_limit	ccnd/ccnd_private.h	/^    int tts_limit;                  \/**< CCND_MAX_TIME_TO_STALE (seconds) *\/$/;"	m	struct:ccnd_handle
tv_earlier	lib/ccn_client.c	/^tv_earlier(const struct timeval *a, const struct timeval *b)$/;"	f	file:
tw	sync/SyncActions.c	/^    struct SyncTreeWorkerHead *tw;$/;"	m	struct:SyncUpdateData	typeref:struct:SyncUpdateData::SyncTreeWorkerHead	file:
tw	sync/sync_diff.h	/^    struct SyncTreeWorkerHead *tw;$/;"	m	struct:sync_update_data	typeref:struct:sync_update_data::SyncTreeWorkerHead
twL	sync/SyncActions.c	/^    struct SyncTreeWorkerHead *twL; \/**< local tree walker state *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::SyncTreeWorkerHead	file:
twR	sync/SyncActions.c	/^    struct SyncTreeWorkerHead *twR; \/**< remote tree walker state *\/$/;"	m	struct:SyncCompareData	typeref:struct:SyncCompareData::SyncTreeWorkerHead	file:
twX	sync/sync_diff.h	/^    struct SyncTreeWorkerHead *twX; \/**< "local" tree walker state *\/$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::SyncTreeWorkerHead
twY	sync/sync_diff.h	/^    struct SyncTreeWorkerHead *twY; \/**< "remote" tree walker state *\/$/;"	m	struct:sync_diff_data	typeref:struct:sync_diff_data::SyncTreeWorkerHead
type	include/ccn/ccn.h	/^    enum ccn_content_type type;$/;"	m	struct:ccn_parsed_ContentObject	typeref:enum:ccn_parsed_ContentObject::ccn_content_type
type	include/ccn/ccn.h	/^    enum ccn_content_type type;$/;"	m	struct:ccn_signing_params	typeref:enum:ccn_signing_params::ccn_content_type
type	include/ccn/ccn.h	/^    int type;$/;"	m	struct:ccn_parsed_Link
udplink_fatal	libexec/udplink.c	/^udplink_fatal(int line, char *format, ...)$/;"	f
udplink_note	libexec/udplink.c	/^udplink_note(char *format, ...)$/;"	f
udplink_print_data	libexec/udplink.c	/^udplink_print_data(char *source, unsigned char *data, int start, int length, int logging)$/;"	f
unit_tests_for_signing	lib/encodedecodetest.c	/^unit_tests_for_signing(struct ccn *h, int *ip, int symmetric)$/;"	f
unlink_at_exit	ccnd/ccnd.c	/^unlink_at_exit(const char *path)$/;"	f	file:
unlink_this_at_exit	ccnd/ccnd.c	/^static const char *unlink_this_at_exit = NULL;$/;"	v	file:
unsol	ccnr/ccnr_private.h	/^    struct ccn_indexbuf *unsol;     \/**< unsolicited content *\/$/;"	m	struct:ccnr_handle	typeref:struct:ccnr_handle::ccn_indexbuf
unverified	cmd/ccncatchunks2.c	/^    intmax_t unverified;$/;"	m	struct:mydata	file:
upcalldata	cmd/ccnls.c	/^struct upcalldata {$/;"	s	file:
upcalldata	cmd/ccnslurp.c	/^struct upcalldata {$/;"	s	file:
update	sync/SyncRoot.h	/^    void *update;                         \/**< data for doing sync tree updates *\/$/;"	m	struct:SyncRootStruct
update256	lib/ccn_signing.c	/^static int update256(EVP_MD_CTX *ctx,const void *data,size_t count)$/;"	f	file:
updateAction	sync/sync_diff.c	/^updateAction(struct ccn_schedule *sched,$/;"	f	file:
updateError	sync/sync_diff.c	/^updateError(struct sync_update_data *ud) {$/;"	f	file:
updateNeedDelta	sync/SyncActions.c	/^static int updateNeedDelta = 6;         \/\/ seconds for adaptive update$/;"	v	file:
updateStallDelta	sync/SyncActions.c	/^static int updateStallDelta = 15;       \/\/ seconds used to determine stalled update$/;"	v	file:
update_data	sync/sync_api.c	/^    struct sync_update_data *update_data;$/;"	m	struct:ccns_handle	typeref:struct:ccns_handle::sync_update_data	file:
update_data	sync/sync_diff.h	/^    struct sync_update_data *update_data;$/;"	m	struct:sync_done_closure	typeref:struct:sync_done_closure::sync_update_data
update_epoch	lib/ccn_schedule.c	/^update_epoch(struct ccn_schedule *sched)$/;"	f	file:
update_ex_index	ccnd/ccnd.c	/^update_ex_index(struct ccnd_handle *h, int staletime, ccn_cookie c)$/;"	f	file:
update_forward_to	ccnd/ccnd.c	/^update_forward_to(struct ccnd_handle *h, struct nameprefix_entry *npe)$/;"	f	file:
update_func	lib/ccn_signing.c	/^    int (*update_func)(void *ctx, const void *data, size_t count);$/;"	m	struct:ccn_sigc	file:
update_ifilt_flags	lib/ccn_client.c	/^update_ifilt_flags(struct ccn *h, struct interest_filter *f, int forw_flags)$/;"	f	file:
update_multifilt	lib/ccn_client.c	/^update_multifilt(struct ccn *h,$/;"	f	file:
update_npe_children	ccnd/ccnd.c	/^update_npe_children(struct ccnd_handle *h, struct nameprefix_entry *npe, unsigned faceid)$/;"	f	file:
update_rtt	cmd/ccncatchunks2.c	/^update_rtt(struct mydata *md, int incoming, unsigned slot)$/;"	f	file:
update_time	lib/ccn_schedule.c	/^update_time(struct ccn_schedule *sched)$/;"	f	file:
updatesDone	sync/SyncPrivate.h	/^    uint64_t updatesDone;           \/*< number of sync tree root updates done *\/$/;"	m	struct:SyncRootStats
usage	cmd/ccn_ccnbtoxml.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccn_xmltoccnb.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnbasicconfig.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnbuzz.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnbx.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnc.c	/^usage(void)$/;"	f	file:
usage	cmd/ccncat.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccncatchunks.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccncatchunks2.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccndumpnames.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccndumppcap.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnfilewatch.c	/^usage(const char *progname) {$/;"	f	file:
usage	cmd/ccnguestprefix.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccninitaeskeystore.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccninitkeystore.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnlibtest.c	/^usage(void)$/;"	f
usage	cmd/ccnls.c	/^usage(const char *prog)$/;"	f
usage	cmd/ccnnamelist.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnpeek.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnpoke.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnrm.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnsendchunks.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnseqwriter.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnsimplecat.c	/^usage(const char *progname)$/;"	f	file:
usage	cmd/ccnslurp.c	/^usage(const char *prog)$/;"	f
usage	cmd/ccnsnew.c	/^usage(void)$/;"	f	file:
usage	cmd/ccnsyncslice.c	/^usage(char *prog)$/;"	f
usage	cmd/ccnsyncwatch.c	/^usage(char *prog)$/;"	f
usage	lib/signbenchtest.c	/^usage(const char *progname)$/;"	f	file:
usage	libexec/ccndc-main.c	/^usage(const char *progname)$/;"	f	file:
usage	libexec/udplink.c	/^usage(char *name) {$/;"	f
useCompExcl	sync/SyncActions.c	/^static int useCompExcl = 1;             \/\/ governs use of nextcomp exclusion use$/;"	v	file:
useRepoStore	sync/SyncPrivate.h	/^    int useRepoStore;$/;"	m	struct:SyncPrivate
use_decimal	cmd/ccncatchunks2.c	/^    int use_decimal;$/;"	m	struct:mydata	file:
usec	ccnd/ccnd_private.h	/^    unsigned usec;                  \/**< cached gettime microseconds *\/$/;"	m	struct:ccnd_handle
usec	ccnd/ccnd_private.h	/^    unsigned usec;               \/**< response-time prediction *\/$/;"	m	struct:nameprefix_entry
usec	ccnr/ccnr_private.h	/^    int usec;                   \/**< usec until timeout *\/$/;"	m	struct:propagating_entry
usec	ccnr/ccnr_private.h	/^    unsigned usec;                  \/**< cached gettime microseconds *\/$/;"	m	struct:ccnr_handle
usec	ccnr/ccnr_private.h	/^    unsigned usec;               \/**< response-time prediction *\/$/;"	m	struct:nameprefix_entry
vectors	lib/siphash24.c	/^const uint8_t vectors[64][8] = {$/;"	v
ver	cmd/ccnc.c	/^    struct ccn_charbuf *ver[VER_LIMIT];$/;"	m	struct:ccnxchat_state	typeref:struct:ccnxchat_state::ccn_charbuf	file:
verbose	cmd/ccnc.c	/^    int verbose;                \/* to turn on debugging output *\/$/;"	m	struct:ccnxchat_state	file:
verbose	cmd/ccnc.c	/^    int verbose;$/;"	m	struct:__anon3	file:
verbose	cmd/ccnlibtest.c	/^int verbose;$/;"	v
verbose	libexec/ccndc-log.c	/^int verbose = 0;$/;"	v
verbose	sync/SyncTest.c	/^    int verbose;$/;"	m	struct:SyncTestParms	file:
verbose_error	lib/ccn_client.c	/^    int verbose_error;$/;"	m	struct:ccn	file:
verify_final_func	lib/ccn_signing.c	/^    int (*verify_final_func)(void *ctx, const unsigned char *sigbuf, unsigned int siglen, EVP_PKEY *pkey);$/;"	m	struct:ccn_sigc	file:
verify_init_func	lib/ccn_signing.c	/^    int (*verify_init_func)(void *ctx, const void *key, int len, const EVP_MD *md);$/;"	m	struct:ccn_sigc	file:
version	ccnr/ccnr_proto.h	/^    unsigned char version[7];$/;"	m	struct:ccnr_parsed_policy
version	include/ccn/aeskeystoreasn1.h	/^    ASN1_INTEGER *version;$/;"	m	struct:AESKeystore_info_st
version	include/ccn/btree.h	/^    unsigned char version[1];   \/**< Format version *\/$/;"	m	struct:ccn_btree_node_header
version	sync/sync_api.c	/^    unsigned version;$/;"	m	struct:ccns_slice	file:
visits	sync/SyncTreeWorker.h	/^    intmax_t visits;$/;"	m	struct:SyncTreeWorkerHead
wait_for_input_or_timeout	cmd/ccnc.c	/^wait_for_input_or_timeout(struct ccn *h, int fd)$/;"	f	file:
wanted_pub	lib/ccn_client.c	/^    struct ccn_charbuf *wanted_pub; \/* waiting for this pub to arrive *\/$/;"	m	struct:expressed_interest	typeref:struct:expressed_interest::ccn_charbuf	file:
warn	cmd/ccnls.c	/^    unsigned warn;$/;"	m	struct:upcalldata	file:
warn	cmd/ccnslurp.c	/^    unsigned warn;$/;"	m	struct:upcalldata	file:
warn	lib/ccn_traverse.c	/^    unsigned warn;$/;"	m	struct:ccn_traversal	file:
what	ccnd/ccnd_stats.c	/^    char what[8];$/;"	m	struct:ccnd_meter	file:
what	ccnr/ccnr_stats.c	/^    char what[8];$/;"	m	struct:ccnr_meter	file:
whenMade	sync/SyncPrivate.h	/^    int64_t whenMade;                   \/*< when created *\/$/;"	m	struct:SyncRootDeltas
whenSent	sync/SyncPrivate.h	/^    int64_t whenSent;                   \/*< when last sent *\/$/;"	m	struct:SyncRootDeltas
wire	lib/ccn_bloom.c	/^    struct ccn_bloom_wire *wire;$/;"	m	struct:ccn_bloom	typeref:struct:ccn_bloom::ccn_bloom_wire	file:
wrappednow	cmd/ccnc.c	/^wrappednow(void)$/;"	f
write_interest_handler	sync/sync_api.c	/^write_interest_handler (struct ccn_closure *selfp,$/;"	f	file:
write_segment	cmd/ccn_splitccnb.c	/^write_segment(unsigned char *data, size_t s, struct fstate *perfilestate)$/;"	f	file:
write_slice	sync/sync_api.c	/^write_slice(struct ccn *h,$/;"	f	file:
write_to_stream	ccnd/ccndsmoketest.c	/^write_to_stream(FILE *outstream, const void *rawbuf, size_t rawlen)$/;"	f
wt_compare	ccnd/ccnd.c	/^wt_compare(ccn_wrappedtime a, ccn_wrappedtime b)$/;"	f	file:
wtnow	ccnd/ccnd_private.h	/^    ccn_wrappedtime wtnow;          \/**< corresponding wrapped time *\/$/;"	m	struct:ccnd_handle
x	cmd/dataresponsetest.c	/^        struct ccn_parsed_ContentObject x;$/;"	m	struct:handlerstate::handlerstateitem	typeref:struct:handlerstate::handlerstateitem::ccn_parsed_ContentObject	file:
x	lib/ccn_bulkdata.c	/^    uintmax_t x;                    \/* sequence number for this item *\/$/;"	m	struct:pending	file:
xmllint	util/ccnrpolicyedit.sh	/^  xmllint () {$/;"	f
zeroLenSeg	lib/ccn_fetch.c	/^	seg_t zeroLenSeg;		\/\/ the lowest zero len segment seen$/;"	m	struct:ccn_fetch_stream	file:
